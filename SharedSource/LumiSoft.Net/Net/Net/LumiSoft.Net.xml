<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LumiSoft.Net</name>
    </assembly>
    <members>
        <member name="T:LumiSoft.Net.TCP.TCP_Server`1">
            <summary>
            This class implements generic TCP session based server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.m_pTimer_IdleTimeout_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is called when session idle check timer triggered.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.Start">
            <summary>
            Starts TCP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.Stop">
            <summary>
            Stops TCP server, all active connections will be terminated.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.Restart">
            <summary>
            Restarts TCP server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.OnMaxConnectionsExceeded(`0)">
            <summary>
            Is called when new incoming session and server maximum allowed connections exceeded.
            </summary>
            <param name="session">Incoming session.</param>
            <remarks>This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.OnMaxConnectionsPerIPExceeded(`0)">
            <summary>
            Is called when new incoming session and server maximum allowed connections per connected IP exceeded.
            </summary>
            <param name="session">Incoming session.</param>
            <remarks>This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.StartListen">
            <summary>
            Starts listening incoming connections. NOTE: All active listening points will be disposed.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.IOCompletionBeginAccept(System.Net.Sockets.SocketAsyncEventArgs,System.Net.Sockets.Socket,LumiSoft.Net.IPBindInfo)">
            <summary>
            Starts accepting connection(s).
            </summary>
            <param name="socketArgs">AcceptAsync method data.</param>
            <param name="listeningSocket">Local listening socket.</param>
            <param name="bindInfo">Local listening socket bind info.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>socketArgs</b>,<b>listeningSocket</b> or <b>bindInfo</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.AsynSocketsAcceptCompleted(System.IAsyncResult)">
            <summary>
            This method is called when BeginAccept ha completed.
            </summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.ProcessConnection(System.Net.Sockets.Socket,LumiSoft.Net.IPBindInfo)">
            <summary>
            Processes specified connection.
            </summary>
            <param name="socket">Accpeted socket.</param>
            <param name="bindInfo">Local bind info what accpeted connection.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>socket</b> or <b>bindInfo</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.OnStarted">
            <summary>
            Raises <b>Started</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.OnStopped">
            <summary>
            Raises <b>Stopped</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.OnDisposed">
            <summary>
            Raises <b>Disposed</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.OnSessionCreated(`0)">
            <summary>
            Raises <b>SessionCreated</b> event.
            </summary>
            <param name="session">TCP server session that was created.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.OnError(System.Exception)">
            <summary>
            Raises <b>Error</b> event.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.IsDisposed">
            <summary>
            Gets if server is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.IsRunning">
            <summary>
            Gets if server is running.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.Bindings">
            <summary>
            Gets or sets TCP server IP bindings.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.LocalEndPoints">
            <summary>
            Gets local listening IP end points.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.MaxConnections">
            <summary>
            Gets or sets maximum allowed concurent connections. Value 0 means unlimited.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when negative value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.MaxConnectionsPerIP">
            <summary>
            Gets or sets maximum allowed connections for 1 IP address. Value 0 means unlimited.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.SessionIdleTimeout">
            <summary>
            Gets or sets maximum allowed session idle time in seconds, after what session will be terminated. Value 0 means unlimited,
            but this is strongly not recommened.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when negative value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.Logger">
            <summary>
            Gets or sets logger. Value null means no logging.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.StartTime">
            <summary>
            Gets the time when server was started.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP server is not running and this property is accesed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.ConnectionsProcessed">
            <summary>
            Gets how many connections this TCP server has processed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP server is not running and this property is accesed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.Sessions">
            <summary>
            Gets TCP server active sessions.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP server is not running and this property is accesed.</exception>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_Server`1.Started">
            <summary>
            This event is raised when TCP server has started.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_Server`1.Stopped">
            <summary>
            This event is raised when TCP server has stopped.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_Server`1.Disposed">
            <summary>
            This event is raised when TCP server has disposed.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_Server`1.SessionCreated">
            <summary>
            This event is raised when TCP server creates new session.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_Server`1.Error">
            <summary>
            This event is raised when TCP server has unknown unhandled error.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Server`1.ListeningPoint">
            <summary>
            This class holds listening point info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.ListeningPoint.#ctor(System.Net.Sockets.Socket,LumiSoft.Net.IPBindInfo)">
            <summary>
            Default constructor.
            </summary>
            <param name="socket">Listening socket.</param>
            <param name="bind">Bind info what acceped socket.</param>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.ListeningPoint.Socket">
            <summary>
            Gets socket.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.ListeningPoint.BindInfo">
            <summary>
            Gets bind info.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_ServerSession">
            <summary>
            This class implements generic TCP server session.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Session">
            <summary>
            This is base class for TCP_Client and TCP_ServerSession.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Session.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Session.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Session.Disconnect">
            <summary>
            Disconnects session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.IsConnected">
            <summary>
            Gets if session is connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.ID">
            <summary>
            Gets session ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.ConnectTime">
            <summary>
            Gets the time when session was connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.LastActivity">
            <summary>
            Gets the last time when data was sent or received.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.LocalEndPoint">
            <summary>
            Gets session local IP end point.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.RemoteEndPoint">
            <summary>
            Gets session remote IP end point.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.IsSecureConnection">
            <summary>
            Gets if this session TCP connection is secure connection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.IsAuthenticated">
            <summary>
            Gets if this session is authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.AuthenticatedUserIdentity">
            <summary>
            Gets session authenticated user identity , returns null if not authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.TcpStream">
            <summary>
            Gets TCP stream which must be used to send/receive data through this session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.Init(System.Object,System.Net.Sockets.Socket,System.String,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Initializes session. This method is called from TCP_Server when new session created.
            </summary>
            <param name="server">Owner TCP server.</param>
            <param name="socket">Connected socket.</param>
            <param name="hostName">Local host name.</param>
            <param name="ssl">Specifies if session should switch to SSL.</param>
            <param name="certificate">SSL certificate.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.Start">
            <summary>
            This method is called from TCP server when session should start processing incoming connection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.SwitchToSecure">
            <summary>
            Switches session to secure connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when connection is already secure or when SSL certificate is not specified.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.Disconnect">
            <summary>
            Disconnects session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.Disconnect(System.String)">
            <summary>
            Disconnects session.
            </summary>
            <param name="text">Text what is sent to connected host before disconnecting.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.OnTimeout">
            <summary>
            This method is called when specified session times out.
            </summary>
            <remarks>
            This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.OnTimeoutI">
            <summary>
            Just calls <b>OnTimeout</b> method.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.OnIdleTimeout">
            <summary>
            Raises <b>IdleTimeout</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.OnDisonnected">
            <summary>
            Raises <b>Disonnected</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.OnDisposed">
            <summary>
            Raises <b>Disposed</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.OnError(System.Exception)">
            <summary>
            Raises <b>Error</b> event.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.IsDisposed">
            <summary>
            Gets if TCP server session is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.Server">
            <summary>
            Gets owner TCP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.LocalHostName">
            <summary>
            Gets local host name.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.Certificate">
            <summary>
            Gets session certificate.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.Tag">
            <summary>
            Gets or sets user data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.Tags">
            <summary>
            Gets user data items collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.IsConnected">
            <summary>
            Gets if session is connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.ID">
            <summary>
            Gets session ID.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.ConnectTime">
            <summary>
            Gets the time when session was connected.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.LastActivity">
            <summary>
            Gets the last time when data was sent or received.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.LocalEndPoint">
            <summary>
            Gets session local IP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.RemoteEndPoint">
            <summary>
            Gets session remote IP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.IsSecureConnection">
            <summary>
            Gets if this session TCP connection is secure connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.TcpStream">
            <summary>
            Gets TCP stream which must be used to send/receive data through this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_ServerSession.IdleTimeout">
            <summary>
            This event is raised when session idle(no activity) timeout reached.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_ServerSession.Disonnected">
            <summary>
            This event is raised when session has disconnected and will be disposed soon.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_ServerSession.Disposed">
            <summary>
            This event is raised when session has disposed.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_ServerSession.Error">
            <summary>
            This event is raised when TCP server session has unknown unhandled error.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_ServerSessionEventArgs`1">
            <summary>
            This class provides data to .... .
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSessionEventArgs`1.#ctor(LumiSoft.Net.TCP.TCP_Server{`0},`0)">
            <summary>
            Default constructor.
            </summary>
            <param name="server">TCP server.</param>
            <param name="session">TCP server session.</param>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSessionEventArgs`1.Server">
            <summary>
            Gets TCP server.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSessionEventArgs`1.Session">
            <summary>
            Gets TCP server session.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_SessionCollection`1">
            <summary>
            This class implements TCP session collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_SessionCollection`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_SessionCollection`1.Add(`0)">
            <summary>
            Adds specified TCP session to the colletion.
            </summary>
            <param name="session">TCP server session to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>session</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_SessionCollection`1.Remove(`0)">
            <summary>
            Removes specified TCP server session from the collection.
            </summary>
            <param name="session">TCP server session to remove.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>session</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_SessionCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_SessionCollection`1.ToArray">
            <summary>
            Copies all TCP server session to new array. This method is thread-safe.
            </summary>
            <returns>Returns TCP sessions array.</returns>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_SessionCollection`1.GetConnectionsPerIP(System.Net.IPAddress)">
            <summary>
            Gets number of connections per specified IP.
            </summary>
            <param name="ip">IP address.</param>
            <returns>Returns current number of connections of the specified IP.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_SessionCollection`1.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_SessionCollection`1.Item(System.String)">
            <summary>
            Gets TCP session with the specified ID.
            </summary>
            <param name="id">Session ID.</param>
            <returns>Returns TCP session with the specified ID.</returns>
        </member>
        <member name="T:LumiSoft.Data.lsDB.DbFile">
            <summary>
            LumiSoft database file.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.Open(System.String)">
            <summary>
            Opens specified data file.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.Open(System.String,System.Int32)">
            <summary>
            Opens specified data file.
            </summary>
            <param name="fileName">File name.</param>
            <param name="waitTime">If data base file is exclusively locked, then how many seconds to wait file to unlock before raising a error.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.Close">
            <summary>
            Closes database file.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.Create(System.String)">
            <summary>
            Creates new database file.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.Create(System.String,System.Int32)">
            <summary>
            Creates new database file.
            </summary>
            <param name="fileName">File name.</param>
            <param name="dataPageDataAreaSize">Specifies how many data can data page store.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.LockTable(System.Int32)">
            <summary>
            Locks table.
            </summary>
            <param name="waitTime">If table is locked, then how many sconds to wait table to unlock, before teturning error.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.UnlockTable">
            <summary>
            Unlock table.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.NextRecord">
            <summary>
            Gets next record. Returns true if end of file reached and there are no more records.
            </summary>
            <returns>Returns true if end of file reached and there are no more records.</returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.AppendRecord(System.Object[])">
            <summary>
            Appends new record to table.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.DeleteCurrentRecord">
            <summary>
            Deletes current record.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.StoreDataToDataPages(System.Int32,System.Byte[],LumiSoft.Data.lsDB.DataPage[])">
            <summary>
            Stores data to specified data pages.
            </summary>
            <param name="dataPageDataAreaSize">Data page data area size.</param>
            <param name="data">Data to store.</param>
            <param name="dataPages">Data pages where to store data.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.GetDataPages(System.Int64,System.Int32)">
            <summary>
            Gets specified number of free data pages. If free data pages won't exist, creates new ones.
            Data pages are marked as used and OwnerDataPagePointer and NextDataPagePointer is set as needed.
            </summary>
            <param name="ownerDataPagePointer">Owner data page pointer that own first requested data page. If no owner then this value is 0.</param>
            <param name="count">Number of data pages wanted.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.AddColumn(LumiSoft.Data.lsDB.LDB_DataColumn)">
            <summary>
            Adds column to db file.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.RemoveColumn(LumiSoft.Data.lsDB.LDB_DataColumn)">
            <summary>
            Removes specified column from database file.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.ReadFromFile(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from file.
            </summary>
            <param name="data">Buffer where to store readed data..</param>
            <param name="offset">Offset in array to where to start storing readed data.</param>
            <param name="count">Number of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.WriteToFile(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to file.
            </summary>
            <param name="data">Data to write.</param>
            <param name="offset">Offset in array from where to start writing data.</param>
            <param name="count">Number of bytes to write.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.GetFilePosition">
            <summary>
            Gets current position in file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.SetFilePosition(System.Int64)">
            <summary>
            Sets file position.
            </summary>
            <param name="position">Position in file.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.GoToFileEnd">
            <summary>
            Moves position to the end of file.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DbFile.IsDatabaseOpen">
            <summary>
            Gets if there is active database file.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DbFile.FileName">
            <summary>
            Gets open database file name. Throws exception if database isn't open.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DbFile.Columns">
            <summary>
            Gets table columns. Throws exception if database isn't open.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DbFile.CurrentRecord">
            <summary>
            Gets current record. Returns null if there isn't current record.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DbFile.TableLocked">
            <summary>
            Gets table is locked.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DbFile.DataPageDataAreaSize">
            <summary>
            Gets how much data data page can store.
            </summary>
        </member>
        <member name="T:LumiSoft.Data.lsDB.LDB_DataColumn">
            <summary>
            
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumn.#ctor(System.String,LumiSoft.Data.lsDB.LDB_DataType)">
            <summary>
            Default constructor.
            </summary>
            <param name="columnName">Column name.</param>
            <param name="dataType">Column data type.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumn.#ctor(System.String,LumiSoft.Data.lsDB.LDB_DataType,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="columnName">Column name.</param>
            <param name="dataType">Column data type.</param>  
            <param name="columnSize">Specifies column data size. This is available for String datatype only.</param>  
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumn.#ctor">
            <summary>
            Internal constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumn.Parse(System.Byte[])">
            <summary>
            Parses column from byte[] data.
            </summary>
            <param name="columnData">Column data.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumn.ToColumnInfo">
            <summary>
            Convert column to byte[] data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumn.GetChar0TerminatedString(System.String)">
            <summary>
            Gets string from char(0) terminated text.
            </summary>
            <param name="text">Text.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Data.lsDB.LDB_DataColumn.DataType">
            <summary>
            Gets LDB data type.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.LDB_DataColumn.ColumnName">
            <summary>
            Gets column name.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.LDB_DataColumn.ColumnSize">
            <summary>
            Gets column size. Returns -1 if column is with variable length.
            </summary>
        </member>
        <member name="T:LumiSoft.Data.lsDB.LDB_DataColumnCollection">
            <summary>
            lsDB data column collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumnCollection.#ctor(System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Table that owns this collection.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumnCollection.Add(LumiSoft.Data.lsDB.LDB_DataColumn)">
            <summary>
            Ads specified data column to collection.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumnCollection.Remove(System.String)">
            <summary>
            Removes specified data column from collection.
            </summary>
            <param name="columName">Column name which to remove.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumnCollection.Remove(LumiSoft.Data.lsDB.LDB_DataColumn)">
            <summary>
            Removes specified data column from collection.
            </summary>
            <param name="column">Data column which to remove.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumnCollection.IndexOf(System.String)">
            <summary>
             Gets specified data column index in collection. Returns -1 if no such column.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumnCollection.IndexOf(LumiSoft.Data.lsDB.LDB_DataColumn)">
            <summary>
            Gets specified data column index in collection. Returns -1 if no such column.
            </summary>
            <param name="column">Data column.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumnCollection.Contains(System.String)">
            <summary>
            Gets if data column collection contains specified column.
            </summary>
            <param name="columnName">Column name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumnCollection.Contains(LumiSoft.Data.lsDB.LDB_DataColumn)">
            <summary>
            Gets if data column collection contains specified column.
            </summary>
            <param name="column">Data column.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumnCollection.Parse(System.Byte[])">
            <summary>
            Parses and adds data column to the collection.
            </summary>
            <param name="columnData"></param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumnCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Data.lsDB.LDB_DataColumnCollection.Item(System.Int32)">
            <summary>
            Gets column from specified index.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.LDB_DataColumnCollection.Count">
            <summary>
            Gets column count in the collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Data.lsDB.LDB_DataType">
            <summary>
            lsDB data types.
            </summary>
        </member>
        <member name="F:LumiSoft.Data.lsDB.LDB_DataType.String">
            <summary>
            Unicode string.
            </summary>
        </member>
        <member name="F:LumiSoft.Data.lsDB.LDB_DataType.Long">
            <summary>
            Long (64-bit integer).
            </summary>
        </member>
        <member name="F:LumiSoft.Data.lsDB.LDB_DataType.Int">
            <summary>
            Integer (32-bit integer).
            </summary>
        </member>
        <member name="F:LumiSoft.Data.lsDB.LDB_DataType.DateTime">
            <summary>
            Date time.
            </summary>
        </member>
        <member name="F:LumiSoft.Data.lsDB.LDB_DataType.Bool">
            <summary>
            Boolean.
            </summary>
        </member>
        <member name="T:LumiSoft.Data.lsDB.LDB_Record">
            <summary>
            lsDB database record.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_Record.#ctor(LumiSoft.Data.lsDB.DbFile,LumiSoft.Data.lsDB.DataPage)">
            <summary>
            Default constructor.
            </summary>
            <param name="ownerDb">Table that owns this row.</param>
            <param name="rowStartDataPage">Data page on what row starts.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_Record.CreateRecord(LumiSoft.Data.lsDB.DbFile,System.Object[])">
            <summary>
            Creates record. Contains record info + record values.
            </summary>
            <param name="ownerDb">Roecord owner table.</param>
            <param name="rowValues">Row values what to store to record.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_Record.ParseRowInfo">
            <summary>
            Parse row info.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_Record.GetColumnData(System.Int32)">
            <summary>
            Gets specified column data.
            </summary>
            <param name="columnIndex">Column index.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_Record.UpdateRecord(System.Object[])">
            <summary>
            Updates this record values.
            </summary>
            <param name="rowValues">Row new values.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_Record.ConvertToInternalData(LumiSoft.Data.lsDB.LDB_DataColumn,System.Object)">
            <summary>
            Converts data to specied column internal store data.
            </summary>
            <param name="coulmn">Column where to store data.</param>
            <param name="val">Data to convert.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_Record.ConvertFromInternalData(LumiSoft.Data.lsDB.LDB_DataColumn,System.Byte[])">
            <summary>
            Converts internal data to .NET data type.
            </summary>
            <param name="coulmn">Column what data it is.</param>
            <param name="val">Internal data value.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Data.lsDB.LDB_Record.Values">
            <summary>
            Gets or set all data column values.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.LDB_Record.Item(System.Int32)">
            <summary>
            Gets or sets specified data column value.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.LDB_Record.Item(System.String)">
            <summary>
            Gets or sets specified data column value.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.LDB_Record.Item(LumiSoft.Data.lsDB.LDB_DataColumn)">
            <summary>
            Gets or sets specified data column value.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.LDB_Record.DataPage">
            <summary>
            Gets data page on what row starts.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.LDB_Record.DataPages">
            <summary>
            Gets data pages held by this row.
            </summary>
        </member>
        <member name="T:LumiSoft.Data.lsDB.lsDB_FixedLengthRecord">
            <summary>
            lsDB_FixedLengthTable table record.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthRecord.#ctor(LumiSoft.Data.lsDB.lsDB_FixedLengthTable,System.Int64,System.Byte[])">
            <summary>
            Default constructor.
            </summary>
            <param name="ownerDb">Table that owns this row.</param>
            <param name="pointer">Row start offset in data base file.</param>
            <param name="rowData">Row data.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthRecord.ReuseRecord(LumiSoft.Data.lsDB.lsDB_FixedLengthTable,System.Int64,System.Byte[])">
            <summary>
            Reuses lsDB_FixedLengthRecord object,
            </summary>
            <param name="ownerDb">Table that owns this row.</param>
            <param name="pointer">Row start offset in data base file.</param>
            <param name="rowData">Row data.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthRecord.ConvertFromInternalData(LumiSoft.Data.lsDB.LDB_DataType,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts internal data to .NET data type.
            </summary>
            <param name="dataType">Data type.</param>
            <param name="val">Data buffer.</param>
            <param name="offset">Offset in data buffer where to start reading data.</param>
            <param name="length">Lenght of data to read from data buffer.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Data.lsDB.lsDB_FixedLengthRecord.Item(System.Int32)">
            <summary>
            Gets or sets specified data column value.
            </summary>
            <param name="columnIndex">Zero based column index.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Data.lsDB.lsDB_FixedLengthRecord.Pointer">
            <summary>
            Gets row pointer.
            </summary>
        </member>
        <member name="T:LumiSoft.Data.lsDB.lsDB_FixedLengthTable">
            <summary>
            Table what all columns are with fixed length.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.Open(System.String)">
            <summary>
            Opens specified data file.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.Open(System.String,System.Int32)">
            <summary>
            Opens specified data file.
            </summary>
            <param name="fileName">File name.</param>
            <param name="waitTime">If data base file is exclusively locked, then how many seconds to wait file to unlock before raising a error.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.Close">
            <summary>
            Closes database file.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.Create(System.String)">
            <summary>
            Creates new database file.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.LockTable(System.Int32)">
            <summary>
            Locks table.
            </summary>
            <param name="waitTime">If table is locked, then how many sconds to wait table to unlock, before teturning error.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.UnlockTable">
            <summary>
            Unlock table.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.MoveFirstRecord">
            <summary>
            Moves to first record.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.NextRecord">
            <summary>
            Gets next record. Returns true if end of file reached and there are no more records.
            </summary>
            <returns>Returns true if end of file reached and there are no more records.</returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.AppendRecord(System.Object[])">
            <summary>
            Appends new record to table.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.DeleteCurrentRecord">
            <summary>
            Deletes current record.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.AddColumn(LumiSoft.Data.lsDB.LDB_DataColumn)">
            <summary>
            Adds column to db file.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.RemoveColumn(LumiSoft.Data.lsDB.LDB_DataColumn)">
            <summary>
            Removes specified column from database file.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.ReadFromFile(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from file.
            </summary>
            <param name="readOffset">Offset in database file from where to start reading data.</param>
            <param name="data">Buffer where to store readed data.</param>
            <param name="offset">Offset in array to where to start storing readed data.</param>
            <param name="count">Number of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.WriteToFile(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to file.
            </summary>
            <param name="writeOffset">Offset in database file from where to start writing data.</param>
            <param name="data">Data to write.</param>
            <param name="offset">Offset in array from where to start writing data.</param>
            <param name="count">Number of bytes to write.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.AppendToFile(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends specified data at the end of file.
            </summary>
            <param name="data">Data to write.</param>
            <param name="offset">Offset in array from where to start writing data.</param>
            <param name="count">Number of bytes to write.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.GetFilePosition">
            <summary>
            Gets current position in file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.SetFilePosition(System.Int64)">
            <summary>
            Sets file position.
            </summary>
            <param name="position">Position in file.</param>
        </member>
        <member name="P:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.IsDatabaseOpen">
            <summary>
            Gets if there is active database file.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.FileName">
            <summary>
            Gets open database file name. Throws exception if database isn't open.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.Columns">
            <summary>
            Gets table columns. Throws exception if database isn't open.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.CurrentRecord">
            <summary>
            Gets current record. Returns null if there isn't current record.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.TableLocked">
            <summary>
            Gets table is locked.
            </summary>
        </member>
        <member name="T:LumiSoft.Data.lsDB.DataPage">
            <summary>
            Data page.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DataPage.#ctor(System.Int32,LumiSoft.Data.lsDB.DbFile,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="dataPageDataAreaSize">Specifies how much data data page can store.</param>
            <param name="ownerDB">Owner DB file..</param>
            <param name="startOffset">Data page start offset pointer.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DataPage.CreateDataPage(System.Int32,System.Boolean,System.Int64,System.Int64,System.Int64,System.Byte[])">
            <summary>
            Creates new data page structure.
            </summary>
            <param name="dataPageDataAreaSize">Specifies how much data can data page store.</param>
            <param name="used">Specifies if data page is used or free space. If this value is false, all toher parameters aren't stored.</param>
            <param name="ownerID">Owner data object ID.</param>
            <param name="ownerDataPagePointer">This data page owner data page pointer. This value can be 0, if no owner.</param>
            <param name="nextDataPagePointer">Data page pointer, what continues this data page. This value can be 0 if, data page won't spread to multiple data pages.</param>
            <param name="data">Data what data page stores. Maximum length is dataPageDataAreaSize.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DataPage.ReadData(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads specified amount data to buffer.
            </summary>
            <param name="buffer">Buffer where to store data.</param>
            <param name="startIndexInBuffer">Start index in buffer where data storing begins. Start index is included.</param>
            <param name="length">Number of bytes to read.</param>
            <param name="startOffset">Zero based offset of data area.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DataPage.ReadData(System.Int32,System.Int32)">
            <summary>
            Reads data page data. Offset byte is included.
            </summary>
            <param name="startOffset">Zero based offset of data area.</param>
            <param name="length">Specifies how much data to read.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DataPage.WriteData(System.Byte[])">
            <summary>
            Writed data to data page.
            </summary>
            <param name="data">Data to write.</param>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DataPage.DataPageSize">
            <summary>
            Gets data page size on disk in bytes.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DataPage.Pointer">
            <summary>
            Gets this data page address (offset in database file).
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DataPage.Used">
            <summary>
            Gets or sets if data page used or free space.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DataPage.OwnerID">
            <summary>
            Gets owner object id what owns this data page.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DataPage.OwnerDataPagePointer">
            <summary>
            Gets or sets owner data page pointer.
            Returns 0 if this is first data page of multiple data pages or only data page.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DataPage.NextDataPagePointer">
            <summary>
            Gets or sets pointer to data page what continues this data page.
            Returns 0 if data page has enough room for data and there isn't continuing data page.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DataPage.DataAreaSize">
            <summary>
            Gets how many data data page can store.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DataPage.StoredDataLength">
            <summary>
            Gets stored data length.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DataPage.SpaceAvailable">
            <summary>
            Gets how much free data space is availabe in data page.
            </summary>
        </member>
        <member name="T:LumiSoft.Data.lsDB.ldb_Utils">
             <summary>
            LDB utility methods.
             </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.ldb_Utils.LongToByte(System.Int64)">
            <summary>
            Convert long value to byte[8].
            </summary>
            <param name="val">Long value.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.ldb_Utils.ByteToLong(System.Byte[],System.Int32)">
            <summary>
            Converts 8 bytes to long value. Offset byte is included.
            </summary>
            <param name="array">Data array.</param>
            <param name="offset">Offset where 8 bytes long value starts. Offset byte is included.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.ldb_Utils.IntToByte(System.Int32)">
            <summary>
            Convert int value to byte[4].
            </summary>
            <param name="val">Int value.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.ldb_Utils.ByteToInt(System.Byte[],System.Int32)">
            <summary>
            Converts 4 bytes to int value.  Offset byte is included.
            </summary>
            <param name="array">Data array.</param>
            <param name="offset">Offset where 4 bytes int value starts. Offset byte is included.</param>
            <returns></returns>
        </member>
        <member name="T:LumiSoft.Net.Log_EventArgs">
            <summary>
            Provides data for the SessionLog event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log_EventArgs.#ctor(LumiSoft.Net.SocketLogger,System.Boolean,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="logger">Socket logger.</param>
            <param name="firstLogPart">Specifies if first log part of multipart log.</param>
            <param name="lastLogPart">Specifies if last log part (logging ended).</param>
        </member>
        <member name="P:LumiSoft.Net.Log_EventArgs.LogText">
            <summary>
            Gets log text.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log_EventArgs.Logger">
            <summary>
            Gets logger.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.Address">
            <summary>
            Rfc 2822 3.4 Address class. This class is base class for MailboxAddress and GroupAddress.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.Address.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="groupAddress">Spcified is address is group or mailbox address.</param>
        </member>
        <member name="P:LumiSoft.Net.Mime.Address.IsGroupAddress">
            <summary>
            Gets if address is group address or mailbox address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.Address.Owner">
            <summary>
            Gets or sets owner of this address.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.AddressList">
            <summary>
            Rfc 2822 3.4 address-list. Rfc defines two types of addresses mailbox and group.
            <p/>
            <p style="margin-top: 0; margin-bottom: 0"/><b>address-list</b> syntax: address *("," address).
            <p style="margin-top: 0; margin-bottom: 0"/><b>address</b> syntax: mailbox / group.
            <p style="margin-top: 0; margin-bottom: 0"/><b>mailbox</b> syntax: ['"'dispaly-name'"' ]&lt;localpart@domain&gt;.
            <p style="margin-top: 0; margin-bottom: 0"/><b>group</b> syntax: '"'dispaly-name'":' [mailbox *(',' mailbox)]';'.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.Add(LumiSoft.Net.Mime.Address)">
            <summary>
            Adds a new address to the end of the collection.
            </summary>
            <param name="address">Address to add.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.Insert(System.Int32,LumiSoft.Net.Mime.Address)">
            <summary>
            Inserts a new address into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the address.</param>
            <param name="address">Address to add.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.Remove(System.Int32)">
            <summary>
            Removes address at the specified index from the collection.
            </summary>
            <param name="index">Index of the address which to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.Remove(LumiSoft.Net.Mime.Address)">
            <summary>
            Removes specified address from the collection.
            </summary>
            <param name="address">Address to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.Clear">
            <summary>
            Clears the collection of all addresses.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.Parse(System.String)">
            <summary>
            Parses address-list from string.
            </summary>
            <param name="addressList">Address list string.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.ToAddressListString">
            <summary>
            Convert addresses to Rfc 2822 address-list string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.OnCollectionChanged">
            <summary>
            This called when collection has changed. Item is added,deleted,changed or collection cleared.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.AddressList.Mailboxes">
            <summary>
            Gets all mailbox addresses. Note: group address mailbox addresses are also included.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.AddressList.Item(System.Int32)">
            <summary>
            Gets address from specified index.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.AddressList.Count">
            <summary>
            Gets address count in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.AddressList.BoundedHeaderField">
            <summary>
            Bound address-list to specified header field.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.ContentDisposition_enum">
            <summary>
            Rfc 2183 Content-Disposition.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentDisposition_enum.Attachment">
            <summary>
            Content is attachment.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentDisposition_enum.Inline">
            <summary>
            Content is embbed resource.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentDisposition_enum.NotSpecified">
            <summary>
            Content-Disposition header field isn't available or isn't written to mime message.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentDisposition_enum.Unknown">
            <summary>
            Content is unknown.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.ContentTransferEncoding_enum">
            <summary>
            Rfc 2045 6. Content-Transfer-Encoding. Specified how entity data is encoded.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentTransferEncoding_enum._7bit">
            <summary>
            Rfc 2045 2.7. 7bit data.
            "7bit data" refers to data that is all represented as relatively
            short lines with 998 octets or less between CRLF line separation
            sequences [RFC-821].  No octets with decimal values greater than 127
            are allowed and neither are NULs (octets with decimal value 0).  CR
            (decimal value 13) and LF (decimal value 10) octets only occur as
            part of CRLF line separation sequences.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentTransferEncoding_enum._8bit">
            <summary>
            Rfc 2045 2.8. 8bit data.
            "8bit data" refers to data that is all represented as relatively
            short lines with 998 octets or less between CRLF line separation
            sequences [RFC-821]), but octets with decimal values greater than 127
            may be used.  As with "7bit data" CR and LF octets only occur as part
            of CRLF line separation sequences and no NULs are allowed.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentTransferEncoding_enum.Binary">
            <summary>
            Rfc 2045 2.9. Binary data.
            "Binary data" refers to data where any sequence of octets whatsoever is allowed.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentTransferEncoding_enum.QuotedPrintable">
            <summary>
            Rfc 2045 6.7 Quoted-Printable Content-Transfer-Encoding.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentTransferEncoding_enum.Base64">
            <summary>
            Rfc 2045 6.8 Base64 Content-Transfer-Encoding.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentTransferEncoding_enum.NotSpecified">
            <summary>
            Content-Transfer-Encoding field isn't available(doesn't exist).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentTransferEncoding_enum.Unknown">
            <summary>
            Content transfer encoding is unknown.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.GroupAddress">
            <summary>
            RFC 2822 3.4. (Address Specification) Group address.
            <p/>
            Syntax: display-name':'[mailbox *(',' mailbox)]';'
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.GroupAddress.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.GroupAddress.Parse(System.String)">
            <summary>
            Parses Rfc 2822 3.4 group address from group address string. Syntax: display-name':'[mailbox *(',' mailbox)]';'
            </summary>
            <param name="group">Group address string.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.GroupAddress.OnChanged">
            <summary>
            This called when group address has changed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.GroupAddress.GroupString">
            <summary>
            Gets Group as RFC 2822(3.4. Address Specification) string. Syntax: display-name':'[mailbox *(',' mailbox)]';'
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.GroupAddress.DisplayName">
            <summary>
            Gets or sets display name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.GroupAddress.GroupMembers">
            <summary>
            Gets group members collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.HeaderField">
            <summary>
            Mime entity header field.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderField.#ctor">
            <summary>
            Default construtor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderField.#ctor(System.String,System.String)">
            <summary>
            Creates new header field with specified name and value.
            </summary>
            <param name="name">Header field name. Header field name must end with colon(:) and may contain US-ASCII character values between 33 and 126.</param>
            <param name="value">Header field value.</param>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderField.Name">
            <summary>
            Gets or sets header field name. Header field name must end with colon(:) and may contain US-ASCII character values between 33 and 126.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderField.Value">
            <summary>
            Gets or sets header field value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderField.EncodedValue">
            <summary>
            Gets header field encoded value.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.HeaderFieldCollection">
            <summary>
            Mime entity header fields collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Add(System.String,System.String)">
            <summary>
            Adds a new header field with specified name and value to the end of the collection.
            </summary>
            <param name="fieldName">Header field name.</param>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Add(LumiSoft.Net.Mime.HeaderField)">
            <summary>
            Adds specified header field to the end of the collection.
            </summary>
            <param name="headerField">Header field.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Insert(System.Int32,System.String,System.String)">
            <summary>
            Inserts a new header field into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the header field.</param>
            <param name="fieldName">Header field name.</param>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Remove(System.Int32)">
            <summary>
            Removes header field at the specified index from the collection.
            </summary>
            <param name="index">The index of the header field to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Remove(LumiSoft.Net.Mime.HeaderField)">
            <summary>
            Removes specified header field from the collection.
            </summary>
            <param name="field">Header field to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.RemoveAll(System.String)">
            <summary>
            Removes all header fields with specified name from the collection.
            </summary>
            <param name="fieldName">Header field name.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Clear">
            <summary>
            Clears the collection of all header fields.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Contains(System.String)">
            <summary>
            Gets if collection contains specified header field.
            </summary>
            <param name="fieldName">Header field name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Contains(LumiSoft.Net.Mime.HeaderField)">
            <summary>
            Gets if collection contains specified header field.
            </summary>
            <param name="headerField">Header field.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.GetFirst(System.String)">
            <summary>
            Gets first header field with specified name, returns null if specified field doesn't exist.
            </summary>
            <param name="fieldName">Header field name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Get(System.String)">
            <summary>
            Gets header fields with specified name, returns null if specified field doesn't exist.
            </summary>
            <param name="fieldName">Header field name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Parse(System.String)">
            <summary>
            Parses header fields from string.
            </summary>
            <param name="headerString">Header string.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Parse(System.IO.Stream)">
            <summary>
            Parses header fields from stream. Stream position stays where header reading ends.
            </summary>
            <param name="stream">Stream from where to parse.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Parse(LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses header fields from stream. Stream position stays where header reading ends.
            </summary>
            <param name="stream">Stream from where to parse.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.ToHeaderString(System.String)">
            <summary>
            Converts header fields to rfc 2822 message header string.
            </summary>
            <param name="encodingCharSet">CharSet to use for non ASCII header field values. Utf-8 is recommended value, if you explicity don't need other.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderFieldCollection.Item(System.Int32)">
            <summary>
            Gets header field from specified index.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderFieldCollection.Count">
            <summary>
            Gets header fields count in the collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.HeaderFieldParameter">
            <summary>
            Header field parameter.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldParameter.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="parameterName">Header field parameter name.</param>
            <param name="parameterValue">Header field parameter value.</param>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderFieldParameter.Name">
            <summary>
            Gets header field parameter name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderFieldParameter.Value">
            <summary>
            Gets header field parameter name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.HeaderFieldParameterCollection">
            <summary>
            Header field parameters collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldParameterCollection.#ctor(LumiSoft.Net.Mime.ParametizedHeaderField)">
            <summary>
            Default constructor.
            </summary>
            <param name="headerField">Header field.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldParameterCollection.Add(System.String,System.String)">
            <summary>
            Adds a new header field parameter with specified name and value to the end of the collection.
            </summary>
            <param name="parameterName">Parameter name.</param>
            <param name="parameterValue">Parameter value.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldParameterCollection.Remove(System.String)">
            <summary>
            Removes specified header field parameter from the collection.
            </summary>
            <param name="parameterName">The name of the header field parameter to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldParameterCollection.Clear">
            <summary>
            Clears the collection of all header field parameters.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldParameterCollection.Contains(System.String)">
            <summary>
            Gets if collection contains specified parameter.
            </summary>
            <param name="parameterName">Parameter name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldParameterCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderFieldParameterCollection.Item(System.String)">
            <summary>
            Gets or sets specified parameter value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderFieldParameterCollection.Count">
            <summary>
            Gets header field parameters count in the collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.MailboxAddress">
            <summary>
            RFC 2822 3.4. (Address Specification) Mailbox address. 
            <p/>
            Syntax: ["display-name"&lt;SP&gt;]&lt;local-part@domain&gt;.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddress.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddress.#ctor(System.String)">
            <summary>
            Creates new mailbox from specified email address.
            </summary>
            <param name="emailAddress">Email address.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddress.#ctor(System.String,System.String)">
            <summary>
            Creates new mailbox from specified name and email address.
            </summary>
            <param name="displayName">Display name.</param>
            <param name="emailAddress">Email address.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddress.Parse(System.String)">
            <summary>
            Parses mailbox from mailbox address string.
            </summary>
            <param name="mailbox">Mailbox string. Format: ["diplay-name"&lt;SP&gt;]&lt;local-part@domain&gt;.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddress.ToMailboxAddressString">
            <summary>
            Converts this to valid mailbox address string.
            Defined in RFC 2822(3.4. Address Specification) string. Format: ["display-name"&lt;SP&gt;]&lt;local-part@domain&gt;.
            For example, "Ivar Lumi" &lt;ivar@lumisoft.ee&gt;.
            If display name contains unicode chrs, display name will be encoded with canonical encoding in utf-8 charset.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddress.OnChanged">
            <summary>
            This called when mailox address has changed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddress.MailboxString">
            <summary>
            Gets Mailbox as RFC 2822(3.4. Address Specification) string. Format: ["display-name"&lt;SP&gt;]&lt;local-part@domain&gt;.
            For example, "Ivar Lumi" &lt;ivar@lumisoft.ee&gt;.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddress.DisplayName">
            <summary>
            Gets or sets display name. 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddress.EmailAddress">
            <summary>
            Gets or sets email address. For example ivar@lumisoft.ee.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddress.LocalPart">
            <summary>
            Gets local-part from email address. For example mailbox is "ivar" from "ivar@lumisoft.ee".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddress.Domain">
            <summary>
            Gets domain from email address. For example domain is "lumisoft.ee" from "ivar@lumisoft.ee".
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.MailboxAddressCollection">
            <summary>
            Rfc 2822 3.4 mailbox-list. Syntax: mailbox *(',' mailbox).
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.Add(LumiSoft.Net.Mime.MailboxAddress)">
            <summary>
            Adds a new mailbox to the end of the collection.
            </summary>
            <param name="mailbox">Mailbox to add.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.Insert(System.Int32,LumiSoft.Net.Mime.MailboxAddress)">
            <summary>
            Inserts a new mailbox into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the mailbox.</param>
            <param name="mailbox">Mailbox to add.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.Remove(System.Int32)">
            <summary>
            Removes header field at the specified index from the collection.
            </summary>
            <param name="index">Index of the mailbox which to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.Remove(LumiSoft.Net.Mime.MailboxAddress)">
            <summary>
            Removes specified mailbox from the collection.
            </summary>
            <param name="mailbox">Mailbox to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.Clear">
            <summary>
            Clears the collection of all mailboxes.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.Parse(System.String)">
            <summary>
            Parses mailboxes from Rfc 2822 3.4 mailbox-list string. Syntax: mailbox *(',' mailbox).
            </summary>
            <param name="mailboxList">Mailbox list string.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.ToMailboxListString">
            <summary>
            Convert addresses to Rfc 2822 mailbox-list string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.OnCollectionChanged">
            <summary>
            This called when collection has changed. Item is added,deleted,changed or collection cleared.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddressCollection.Item(System.Int32)">
            <summary>
            Gets mailbox from specified index.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddressCollection.Count">
            <summary>
            Gets mailboxes count in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddressCollection.Owner">
            <summary>
            Gets or sets owner of this collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.MediaType_enum">
            <summary>
            Rfc 2046,2387 Media Types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Text">
            <summary>
            Text data.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Text_plain">
            <summary>
            Simple text data. Defined in Rfc 1521.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Text_html">
            <summary>
            Html data. Defined in Rfc 2854.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Text_xml">
            <summary>
            Xml data. Defined in Rfc 3023 3.1.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Text_rtf">
            <summary>
            Rich text (RTF) data.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Image">
            <summary>
            Image data.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Image_gif">
            <summary>
            Gif image. Defined in Rfc 1521.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Image_tiff">
            <summary>
            Tiff image.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Image_jpeg">
            <summary>
            Jpeg image. Defined in Rfc 1521.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Audio">
            <summary>
            Audio data.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Video">
            <summary>
            Video data.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Application">
            <summary>
            Some other kind of data, typically either uninterpreted binary data or information to be processed by an application.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Application_octet_stream">
            <summary>
            The "octet-stream" subtype is used to indicate that a body contains	arbitrary binary data. Defined in Rfc 4046 4.5.1.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Multipart">
            <summary>
            Data consisting of multiple entities of	independent data types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Multipart_mixed">
            <summary>
            Data consisting of multiple entities of	independent data types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Multipart_alternative">
            <summary>
            Data consisting of multiple entities of	independent data types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Multipart_parallel">
            <summary>
            Data consisting of multiple entities of	independent data types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Multipart_related">
            <summary>
            Data consisting of multiple entities of	independent data types. (Rfc 2387)
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Multipart_signed">
            <summary>
            Multipart signed. Defined in Rfc 1847.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Message">
            <summary>
            Message -- an encapsulated message.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Message_rfc822">
            <summary>
            Rfc 822 encapsulated message.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.NotSpecified">
            <summary>
            Media type isn't specified.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Unknown">
            <summary>
            Media type is unknown.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.Mime">
            <summary>
            Class for creating,parsing,modifing rfc 2822 mime messages.
            </summary>
            <remarks>
            <code>
            
            Message examples:
            
            <B>Simple message:</B>
            
            //--- Beginning of message
            From: sender@domain.com
            To: recipient@domain.com
            Subject: Message subject.
            Content-Type: text/plain
            
            Message body text. Bla blaa
            blaa,blaa.
            //--- End of message
            
            
            In simple message MainEntity is whole message.
            
            <B>Message with attachments:</B>
            
            //--- Beginning of message
            From: sender@domain.com
            To: recipient@domain.com
            Subject: Message subject.
            Content-Type: multipart/mixed; boundary="multipart_mixed"
            
            --multipart_mixed	/* text entity */
            Content-Type: text/plain
            
            Message body text. Bla blaa
            blaa,blaa.	
            --multipart_mixed	/* attachment entity */
            Content-Type: application/octet-stream
            
            attachment_data
            --multipart_mixed--
            //--- End of message
            
            MainEntity is multipart_mixed entity and text and attachment entities are child entities of MainEntity.
            </code>
            </remarks>
            <example>
            <code>
            // Parsing example:
            Mime m = Mime.Parse("message.eml");
            // Do your stuff with mime
            </code>
            <code>
            // Create simple message with simple way:
            AddressList from = new AddressList();
            from.Add(new MailboxAddress("dispaly name","user@domain.com"));
            AddressList to = new AddressList();
            to.Add(new MailboxAddress("dispaly name","user@domain.com"));
            
            Mime m = Mime.CreateSimple(from,to,"test subject","test body text","");
            </code>
            <code>
            // Creating a new simple message
            Mime m = new Mime();
            MimeEntity mainEntity = m.MainEntity;
            // Force to create From: header field
            mainEntity.From = new AddressList();
            mainEntity.From.Add(new MailboxAddress("dispaly name","user@domain.com"));
            // Force to create To: header field
            mainEntity.To = new AddressList();
            mainEntity.To.Add(new MailboxAddress("dispaly name","user@domain.com"));
            mainEntity.Subject = "subject";
            mainEntity.ContentType = MediaType_enum.Text_plain;
            mainEntity.ContentTransferEncoding = ContentTransferEncoding_enum.QuotedPrintable;
            mainEntity.DataText = "Message body text.";
            
            m.ToFile("message.eml");
            </code>
            <code>
            // Creating message with text and attachments
            Mime m = new Mime();
            MimeEntity mainEntity = m.MainEntity;
            // Force to create From: header field
            mainEntity.From = new AddressList();
            mainEntity.From.Add(new MailboxAddress("dispaly name","user@domain.com"));
            // Force to create To: header field
            mainEntity.To = new AddressList();
            mainEntity.To.Add(new MailboxAddress("dispaly name","user@domain.com"));
            mainEntity.Subject = "subject";
            mainEntity.ContentType = MediaType_enum.Multipart_mixed;
            
            MimeEntity textEntity = mainEntity.ChildEntities.Add();
            textEntity.ContentType = MediaType_enum.Text_plain;
            textEntity.ContentTransferEncoding = ContentTransferEncoding_enum.QuotedPrintable;
            textEntity.DataText = "Message body text.";
            
            MimeEntity attachmentEntity = mainEntity.ChildEntities.Add();
            attachmentEntity.ContentType = MediaType_enum.Application_octet_stream;
            attachmentEntity.ContentDisposition = ContentDisposition_enum.Attachment;
            attachmentEntity.ContentTransferEncoding = ContentTransferEncoding_enum.Base64;
            attachmentEntity.ContentDisposition_FileName = "yourfile.xxx";
            attachmentEntity.DataFromFile("yourfile.xxx");
            // or
            attachmentEntity.Data = your_attachment_data;
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.Parse(System.Byte[])">
            <summary>
            Parses mime message from byte[] data.
            </summary>
            <param name="data">Mime message data.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.Parse(System.String)">
            <summary>
            Parses mime message from file.
            </summary>
            <param name="fileName">Mime message file.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.Parse(System.IO.Stream)">
            <summary>
            Parses mime message from stream.
            </summary>
            <param name="stream">Mime message stream.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.CreateSimple(LumiSoft.Net.Mime.AddressList,LumiSoft.Net.Mime.AddressList,System.String,System.String,System.String)">
            <summary>
            Creates simple mime message.
            </summary>
            <param name="from">Header field From: value.</param>
            <param name="to">Header field To: value.</param>
            <param name="subject">Header field Subject: value.</param>
            <param name="bodyText">Body text of message. NOTE: Pass null is body text isn't wanted.</param>
            <param name="bodyHtml">Body HTML text of message. NOTE: Pass null is body HTML text isn't wanted.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.CreateSimple(LumiSoft.Net.Mime.AddressList,LumiSoft.Net.Mime.AddressList,System.String,System.String,System.String,System.String[])">
            <summary>
            Creates simple mime message with attachments.
            </summary>
            <param name="from">Header field From: value.</param>
            <param name="to">Header field To: value.</param>
            <param name="subject">Header field Subject: value.</param>
            <param name="bodyText">Body text of message. NOTE: Pass null is body text isn't wanted.</param>
            <param name="bodyHtml">Body HTML text of message. NOTE: Pass null is body HTML text isn't wanted.</param>
            <param name="attachmentFileNames">Attachment file names. Pass null if no attachments. NOTE: File name must contain full path to file, for example: c:\test.pdf.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.ToStringData">
            <summary>
            Stores mime message to string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.ToByteData">
            <summary>
            Stores mime message to byte[].
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.ToFile(System.String)">
            <summary>
            Stores mime message to specified file.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.ToStream(System.IO.Stream)">
            <summary>
            Stores mime message to specified stream. Stream position stays where mime writing ends.
            </summary>
            <param name="storeStream">Stream where to store mime message.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.GetEntities(LumiSoft.Net.Mime.MimeEntityCollection,System.Collections.Generic.List{LumiSoft.Net.Mime.MimeEntity})">
            <summary>
            Gets mime entities, including nested entries. 
            </summary>
            <param name="entities"></param>
            <param name="allEntries"></param>
        </member>
        <member name="P:LumiSoft.Net.Mime.Mime.MainEntity">
            <summary>
            Message main(top-level) entity.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.Mime.MimeEntities">
            <summary>
            Gets all mime entities contained in message, including child entities.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.Mime.Attachments">
            <summary>
            Gets attachment entities. Entity is considered as attachmnet if:<p/>
                *) Content-Disposition: attachment (RFC 2822 message)<p/>
                *) Content-Disposition: filename = "" is specified  (RFC 2822 message)<p/>
                *) Content-Type: name = "" is specified  (old RFC 822 message)<p/>
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.Mime.BodyText">
            <summary>
            Gets message body text. Returns null if no body text specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.Mime.BodyHtml">
            <summary>
            Gets message body html. Returns null if no body html text specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.MimeEntity">
            <summary>
            Rfc 2822 Mime Entity.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.Parse(LumiSoft.Net.IO.SmartStream,System.String)">
            <summary>
            Parses mime entity from stream.
            </summary>
            <param name="stream">Data stream from where to read data.</param>
            <param name="toBoundary">Entity data is readed to specified boundary.</param>
            <returns>Returns false if last entity. Returns true for mulipart entity, if there are more entities.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.ToStream(System.IO.Stream)">
            <summary>
            Stores mime entity and it's child entities to specified stream.
            </summary>
            <param name="storeStream">Stream where to store mime entity.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.DataToFile(System.String)">
            <summary>
            Saves this.Data property value to specified file.
            </summary>
            <param name="fileName">File name where to store data.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.DataToStream(System.IO.Stream)">
            <summary>
            Saves this.Data property value to specified stream.
            </summary>
            <param name="stream">Stream where to store data.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.DataFromFile(System.String)">
            <summary>
            Loads MimeEntity.Data property from file.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.DataFromStream(System.IO.Stream)">
            <summary>
            Loads MimeEntity.Data property from specified stream. Note: reading starts from current position and stream isn't closed.
            </summary>
            <param name="stream">Data stream.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.EncodeData(System.Byte[],LumiSoft.Net.Mime.ContentTransferEncoding_enum)">
            <summary>
            Encodes data with specified content transfer encoding.
            </summary>
            <param name="data">Data to encode.</param>
            <param name="encoding">Encoding with what to encode data.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.FoldHeader(System.String)">
            <summary>
            Folds header.
            </summary>
            <param name="header">Header string.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.Header">
            <summary>
            Gets message header.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.HeaderString">
            <summary>
            Gets header as RFC 2822 message headers.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ParentEntity">
            <summary>
            Gets parent entity of this entity. If this entity is top level, then this property returns null.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ChildEntities">
            <summary>
            Gets child entities. This property is available only if ContentType = multipart/... .
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.MimeVersion">
            <summary>
            Gets or sets header field "<b>Mime-Version:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentClass">
            <summary>
            Gets or sets header field "<b>Content-class:</b>" value. Returns null if value isn't set.<br/>
            Additional property to support messages of CalendarItem type which have iCal/vCal entries.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentType">
            <summary>
            Gets or sets header field "<b>Content-Type:</b>" value. This property specifies what entity data is.
            NOTE: ContentType can't be changed while there is data specified(Exception is thrown) in this mime entity, because it isn't
            possible todo data conversion between different types. For example text/xx has charset parameter and other types don't,
            changing loses it and text data becomes useless.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentTypeString">
            <summary>
            Gets or sets header field "<b>Content-Type:</b>" value. Returns null if value isn't set. This property specifies what entity data is.
            This property is meant for advanced users, who needs other values what defined MediaType_enum provides.
            Example value: text/plain; charset="utf-8". 
            NOTE: ContentType can't be changed while there is data specified(Exception is thrown) in this mime entity, because it isn't
            possible todo data conversion between different types. For example text/xx has charset parameter and other types don't,
            changing loses it and text data becomes useless.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentTransferEncoding">
            <summary>
            Gets or sets header field "<b>Content-Transfer-Encoding:</b>" value. This property specifies how data is encoded/decoded.
            If you set this value, it's recommended that you use QuotedPrintable for text and Base64 for binary data.
            7bit,_8bit,Binary are today obsolete (used for parsing). 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentDisposition">
            <summary>
            Gets or sets header field "<b>Content-Disposition:</b>" value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentDescription">
            <summary>
            Gets or sets header field "<b>Content-Description:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentID">
            <summary>
            Gets or sets header field "<b>Content-ID:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentType_Name">
            <summary>
            Gets or sets "<b>Content-Type:</b>" header field "<b>name</b>" parameter.
            Returns null if Content-Type: header field value isn't set or Content-Type: header field "<b>name</b>" parameter isn't set.
            <p/>
            Note: Content-Type must be application/xxx or exception is thrown.
            This property is obsolete today, it's replaced with <b>Content-Disposition: filename</b> parameter.
            If possible always set FileName property instead of it. 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentType_CharSet">
            <summary>
            Gets or sets "<b>Content-Type:</b>" header field "<b>charset</b>" parameter.
            Returns null if Content-Type: header field value isn't set or Content-Type: header field "<b>charset</b>" parameter isn't set.
            If you don't know what charset to use then <b>utf-8</b> is recommended, most of times this is sufficient.
            Note: Content-Type must be text/xxx or exception is thrown.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentType_Boundary">
            <summary>
            Gets or sets "<b>Content-Type:</b>" header field "<b>boundary</b>" parameter.
            Returns null if Content-Type: header field value isn't set or Content-Type: header field "<b>boundary</b>" parameter isn't set.
            Note: Content-Type must be multipart/xxx or exception is thrown.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentDisposition_FileName">
            <summary>
            Gets or sets "<b>Content-Disposition:</b>" header field "<b>filename</b>" parameter.
            Returns null if Content-Disposition: header field value isn't set or Content-Disposition: header field "<b>filename</b>" parameter isn't set.
            Note: Content-Disposition must be attachment or inline.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.Date">
            <summary>
            Gets or sets header field "<b>Date:</b>" value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.MessageID">
            <summary>
            Gets or sets header field "<b>Message-ID:</b>" value. Returns null if value isn't set.
            Syntax: '&lt;'id-left@id-right'&gt;'. Example: &lt;621bs724bfs8@jnfsjaas4263&gt;
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.To">
            <summary>
            Gets or sets header field "<b>To:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.Cc">
            <summary>
            Gets or sets header field "<b>Cc:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.Bcc">
            <summary>
            Gets or sets header field "<b>Bcc:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.From">
            <summary>
            Gets or sets header field "<b>From:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.Sender">
            <summary>
            Gets or sets header field "<b>Sender:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ReplyTo">
            <summary>
            Gets or sets header field "<b>Reply-To:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.InReplyTo">
            <summary>
            Gets or sets header field "<b>In-Reply-To:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.DSN">
            <summary>
            Gets or sets header field "<b>Disposition-Notification-To:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.Subject">
            <summary>
            Gets or sets header field "<b>Subject:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.Data">
            <summary>
            Gets or sets entity data. Data is encoded/decoded with "<b>Content-Transfer-Encoding:</b>" header field value.
            Note: This property can be set only if Content-Type: isn't multipart.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.DataText">
            <summary>
            Gets or sets entity text data. Data is encoded/decoded with "<b>Content-Transfer-Encoding:</b>" header field value with this.Charset charset.
            Note: This property is available only if ContentType is Text/xxx... or no content type specified, othwerwise Excpetion is thrown.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.DataEncoded">
            <summary>
            Gets or sets entity encoded data. If you set this value, be sure that you encode this value as specified by Content-Transfer-Encoding: header field.
            Set this value only if you need custom Content-Transfer-Encoding: what current Mime class won't support, other wise set data through this.Data property. 
            Note: This property can be set only if Content-Type: isn't multipart.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.MimeEntityCollection">
            <summary>
            Mime entity collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.#ctor(LumiSoft.Net.Mime.MimeEntity)">
            <summary>
            Default constructor.
            </summary>
            <param name="ownerEntity">Mime entity what owns this collection.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.Add">
            <summary>
            Creates a new mime entity to the end of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.Add(LumiSoft.Net.Mime.MimeEntity)">
            <summary>
            Adds specified mime entity to the end of the collection.
            </summary>
            <param name="entity">Mime entity to add to the collection.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.Insert(System.Int32,LumiSoft.Net.Mime.MimeEntity)">
            <summary>
            Inserts a new mime entity into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the mime entity.</param>
            <param name="entity">Mime entity.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.Remove(System.Int32)">
            <summary>
            Removes mime entity at the specified index from the collection.
            </summary>
            <param name="index">Index of mime entity to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.Remove(LumiSoft.Net.Mime.MimeEntity)">
            <summary>
            Removes specified mime entity from the collection.
            </summary>
            <param name="entity">Mime entity to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.Clear">
            <summary>
            Clears the collection of all mome entities.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.Contains(LumiSoft.Net.Mime.MimeEntity)">
            <summary>
            Gets if collection contains specified mime entity.
            </summary>
            <param name="entity">Mime entity.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntityCollection.Item(System.Int32)">
            <summary>
            Gets mime entity at specified index.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntityCollection.Count">
            <summary>
            Gets mime entities count in the collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.MimeUtils">
            <summary>
            Provides mime related utility methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseDate(System.String)">
            <summary>
            Parses rfc 2822 datetime.
            </summary>
            <param name="date">Date string.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.DateTimeToRfc2822(System.DateTime)">
            <summary>
            Converts date to rfc 2822 date time string.
            </summary>
            <param name="dateTime">Date time value.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseHeaders(System.IO.Stream)">
            <summary>
            Parses headers from message or mime entry.
            </summary>
            <param name="entryStrm">Stream from where to read headers.</param>
            <returns>Returns header lines.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseHeaderField(System.String,System.IO.Stream)">
            <summary>
            Parse header specified header field value.
            
            Use this method only if you need to get only one header field, otherwise use
            MimeParser.ParseHeaderField(string fieldName,string headers).
            This avoid parsing headers multiple times.
            </summary>
            <param name="fieldName">Header field which to parse. Eg. Subject: .</param>
            <param name="entryStrm">Stream from where to read headers.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseHeaderField(System.String,System.String)">
            <summary>
            Parse header specified header field value.
            </summary>
            <param name="fieldName">Header field which to parse. Eg. Subject: .</param>
            <param name="headers">Full headers string. Use MimeParser.ParseHeaders() to get this value.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseHeaderFiledParameter(System.String,System.String,System.String)">
            <summary>
            Parses header field parameter value. 
            For example: CONTENT-TYPE: application\octet-stream; name="yourFileName.xxx",
            fieldName="CONTENT-TYPE:" and subFieldName="name".
            </summary>
            <param name="fieldName">Main header field name.</param>
            <param name="parameterName">Header field's parameter name.</param>
            <param name="headers">Full headrs string.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseMediaType(System.String)">
            <summary>
            Parses MediaType_enum from <b>Content-Type:</b> header field value.
            </summary>
            <param name="headerFieldValue"><b>Content-Type:</b> header field value. This value can be null, then MediaType_enum.NotSpecified.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.MediaTypeToString(LumiSoft.Net.Mime.MediaType_enum)">
            <summary>
            Converts MediaType_enum to string. NOTE: Returns null for MediaType_enum.NotSpecified.
            </summary>
            <param name="mediaType">MediaType_enum value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseContentTransferEncoding(System.String)">
            <summary>
            Parses ContentTransferEncoding_enum from <b>Content-Transfer-Encoding:</b> header field value.
            </summary>
            <param name="headerFieldValue"><b>Content-Transfer-Encoding:</b> header field value. This value can be null, then ContentTransferEncoding_enum.NotSpecified.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ContentTransferEncodingToString(LumiSoft.Net.Mime.ContentTransferEncoding_enum)">
            <summary>
            Converts ContentTransferEncoding_enum to string. NOTE: Returns null for ContentTransferEncoding_enum.NotSpecified.
            </summary>
            <param name="encoding">ContentTransferEncoding_enum value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseContentDisposition(System.String)">
            <summary>
            Parses ContentDisposition_enum from <b>Content-Disposition:</b> header field value.
            </summary>
            <param name="headerFieldValue"><b>Content-Disposition:</b> header field value. This value can be null, then ContentDisposition_enum.NotSpecified.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ContentDispositionToString(LumiSoft.Net.Mime.ContentDisposition_enum)">
            <summary>
            Converts ContentDisposition_enum to string. NOTE: Returns null for ContentDisposition_enum.NotSpecified.
            </summary>
            <param name="disposition">ContentDisposition_enum value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.EncodeWord(System.String)">
            <summary>
            Encodes specified text as "encoded-word" if encode is required. For more information see RFC 2047.
            </summary>
            <param name="text">Text to encode.</param>
            <returns>Returns encoded word.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.DecodeWords(System.String)">
            <summary>
            Decodes "encoded-word"'s from the specified text. For more information see RFC 2047.
            </summary>
            <param name="text">Text to decode.</param>
            <returns>Returns decoded text.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.EncodeHeaderField(System.String)">
            <summary>
            Encodes header field with quoted-printable encoding, if value contains ANSI or UNICODE chars.
            </summary>
            <param name="text">Text to encode.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.CreateMessageID">
            <summary>
            Creates Rfc 2822 3.6.4 message-id. Syntax: '&lt;' id-left '@' id-right '&gt;'.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.FoldData(System.String)">
            <summary>
            Folds long data line to folded lines.
            </summary>
            <param name="data">Data to fold.</param>
            <returns></returns>
        </member>
        <member name="T:LumiSoft.Net.Mime.ParametizedHeaderField">
            <summary>
            Parametized header field. 
            <p/>
            Syntax: value;parameterName=parameterValue;parameterName=parameterValue;... .
            Example: (Content-Type:) text/html; charset="ascii".
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.ParametizedHeaderField.#ctor(LumiSoft.Net.Mime.HeaderField)">
            <summary>
            Default constructor.
            </summary>
            <param name="headerField">Source header field.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.ParametizedHeaderField.ParseParameters">
            <summary>
            Parses parameters from header field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.ParametizedHeaderField.StoreParameters(System.String,System.Collections.Hashtable)">
            <summary>
            Stores parameters to header field Value property.
            </summary>
            <param name="value"></param>
            <param name="parameters"></param>
        </member>
        <member name="P:LumiSoft.Net.Mime.ParametizedHeaderField.Name">
            <summary>
            Gets header field name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.ParametizedHeaderField.Value">
            <summary>
            Gets or sets header field value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.ParametizedHeaderField.Parameters">
            <summary>
            Gets header field parameters.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AuthType">
            <summary>
            Authentication type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AuthType.Plain">
            <summary>
            Plain username/password authentication.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AuthType.APOP">
            <summary>
            APOP
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AuthType.LOGIN">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AuthType.CRAM_MD5">
            <summary>
            Cram-md5 authentication.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AuthType.DIGEST_MD5">
            <summary>
            DIGEST-md5 authentication.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Core">
            <summary>
            Provides net core utility methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Core.GetHostName(System.Net.IPAddress)">
            <summary>
            Gets host name. If fails returns ip address.
            </summary>
            <param name="ip">IP address which to reverse lookup.</param>
            <returns>Returns host name of specified IP address.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.Core.GetArgsText(System.String,System.String)">
            <summary>
            Gets argument part of command text.
            </summary>
            <param name="input">Input srting from where to remove value.</param>
            <param name="cmdTxtToRemove">Command text which to remove.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.IsNumber(System.String)">
            <summary>
            Checks if specified string is number(long).
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.ReverseArray(System.Array)">
            <summary>
            Reverses the specified array elements.
            </summary>
            <param name="array">Array elements to reverse.</param>
            <returns>Returns array with reversed items.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>array</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.Core.Base64Encode(System.Byte[])">
            <summary>
            Encodes specified data with base64 encoding.
            </summary>
            <param name="data">Data to encode.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.Base64EncodeEx(System.Byte[],System.Char[],System.Boolean)">
            <summary>
            Encodes specified data with bas64 encoding.
            </summary>
            <param name="data">Data to to encode.</param>
            <param name="base64Chars">Custom base64 chars (64 chars) or null if default chars used.</param>
            <param name="padd">Padd missing block chars. Normal base64 must be 4 bytes blocks, if not 4 bytes in block, 
            missing bytes must be padded with '='. Modified base64 just skips missing bytes.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.Base64Decode(System.Byte[])">
            <summary>
            Decodes base64 data. Defined in RFC 2045 6.8.  Base64 Content-Transfer-Encoding.
            </summary>
            <param name="base64Data">Base64 decoded data.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.Base64DecodeEx(System.Byte[],System.Char[])">
            <summary>
            Decodes base64 data. Defined in RFC 2045 6.8.  Base64 Content-Transfer-Encoding.
            </summary>
            <param name="base64Data">Base64 decoded data.</param>
            <param name="base64Chars">Custom base64 chars (64 chars) or null if default chars used.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.QuotedPrintableEncode(System.Byte[])">
            <summary>
            Encodes data with quoted-printable encoding.
            </summary>
            <param name="data">Data to encode.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.QuotedPrintableDecode(System.Byte[])">
            <summary>
            quoted-printable decoder. Defined in RFC 2045 6.7.
            </summary>
            <param name="data">Data which to encode.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.QDecode(System.Text.Encoding,System.String)">
            <summary>
            "Q" decoder. This is same as quoted-printable, except '_' is converted to ' '.
            Defined in RFC 2047 4.2.
            </summary>
            <param name="encoding">Input string encoding.</param>
            <param name="data">String which to encode.</param>
            <returns>Returns decoded string.</returns>	
        </member>
        <member name="M:LumiSoft.Net.Core.CanonicalDecode(System.String)">
            <summary>
            Canonical decoding. Decodes all canonical encoding occurences in specified text.
            Usually mime message header unicode/8bit values are encoded as Canonical.
            Format: =?charSet?type[Q or B]?encoded_string?= .
            Defined in RFC 2047.
            </summary>
            <param name="text">Text to decode.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.CanonicalEncode(System.String,System.String)">
            <summary>
            Canonical encoding.
            </summary>
            <param name="str">String to encode.</param>
            <param name="charSet">With what charset to encode string. If you aren't sure about it, utf-8 is suggested.</param>
            <returns>Returns encoded text.</returns>
        </member>
        <member name="M:LumiSoft.Net.Core.Encode_IMAP_UTF7_String(System.String)">
            <summary>
            Encodes specified data with IMAP modified UTF7 encoding. Defined in RFC 3501 5.1.3.  Mailbox International Naming Convention.
            Example: öö is encoded to &amp;APYA9g-.
            </summary>
            <param name="text">Text to encode.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.Decode_IMAP_UTF7_String(System.String)">
            <summary>
            Decodes IMAP modified UTF7 encoded data. Defined in RFC 3501 5.1.3.  Mailbox International Naming Convention.
            Example: &amp;APYA9g- is decoded to öö.
            </summary>
            <param name="text">Text to encode.</param>
            <returns></returns>        
        </member>
        <member name="M:LumiSoft.Net.Core.IsAscii(System.String)">
            <summary>
            Checks if specified string data is acii data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.GetFileNameFromPath(System.String)">
            <summary>
            Gets file name from path.
            </summary>
            <param name="filePath">File file path with file name. For examples: c:\fileName.xxx, aaa\fileName.xxx.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.IsIP(System.String)">
            <summary>
            Gets if specified value is IP address.
            </summary>
            <param name="value">String value.</param>
            <returns>Returns true if specified value is IP address.</returns>
        </member>
        <member name="M:LumiSoft.Net.Core.CompareIP(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Compares 2 IP addresses. Returns 0 if IPs are equal, 
            returns positive value if destination IP is bigger than source IP,
            returns negative value if destination IP is smaller than source IP.
            </summary>
            <param name="source">Source IP address.</param>
            <param name="destination">Destination IP address.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.IsPrivateIP(System.String)">
            <summary>
            Gets if specified IP address is private LAN IP address. For example 192.168.x.x is private ip.
            </summary>
            <param name="ip">IP address to check.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
            <returns>Returns true if IP is private IP.</returns>        
        </member>
        <member name="M:LumiSoft.Net.Core.IsPrivateIP(System.Net.IPAddress)">
            <summary>
            Gets if specified IP address is private LAN IP address. For example 192.168.x.x is private ip.
            </summary>
            <param name="ip">IP address to check.</param>
            <returns>Returns true if IP is private IP.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>             
        </member>
        <member name="M:LumiSoft.Net.Core.CreateSocket(System.Net.IPEndPoint,System.Net.Sockets.ProtocolType)">
            <summary>
            Creates new socket for the specified end point.
            </summary>
            <param name="localEP">Local end point.</param>
            <param name="protocolType">Protocol type.</param>
            <returns>Retruns newly created socket.</returns>                   
        </member>
        <member name="M:LumiSoft.Net.Core.ToHexString(System.String)">
            <summary>
            Converts string to hex string.
            </summary>
            <param name="data">String to convert.</param>
            <returns>Returns data as hex string.</returns>
        </member>
        <member name="M:LumiSoft.Net.Core.ToHexString(System.Byte[])">
            <summary>
            Converts string to hex string.
            </summary>
            <param name="data">Data to convert.</param>
            <returns>Returns data as hex string.</returns>  
        </member>
        <member name="M:LumiSoft.Net.Core.ToHex(System.Byte)">
            <summary>
            Convert byte to hex data.
            </summary>
            <param name="byteValue">Byte to convert.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.ToHex(System.Byte[])">
            <summary>
            Converts data to hex data.
            </summary>
            <param name="data">Data to convert.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.FromHex(System.Byte[])">
            <summary>
            Converts hex byte data to normal byte data. Hex data must be in two bytes pairs, for example: 0F,FF,A3,... .
            </summary>
            <param name="hexData">Hex data.</param>
            <returns></returns>             
        </member>
        <member name="M:LumiSoft.Net.Core.ComputeMd5(System.String,System.Boolean)">
            <summary>
            Computes md5 hash.
            </summary>
            <param name="text">Text to hash.</param>
            <param name="hex">Specifies if md5 value is returned as hex string.</param>
            <returns>Resturns md5 value or md5 hex value.</returns>              
        </member>
        <member name="T:LumiSoft.Net.ReadReplyCode">
            <summary>
            Reply reading return codes.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.ReadReplyCode.Ok">
            <summary>
            Read completed successfully.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.ReadReplyCode.TimeOut">
            <summary>
            Read timed out.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.ReadReplyCode.LengthExceeded">
            <summary>
            Maximum allowed Length exceeded.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.ReadReplyCode.SocketClosed">
            <summary>
            Connected client closed connection.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.ReadReplyCode.UnKnownError">
            <summary>
            UnKnown error, eception raised.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ReadException">
            <summary>
            Summary description for ReadException.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.ReadException.#ctor(LumiSoft.Net.ReadReplyCode,System.String)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="P:LumiSoft.Net.ReadException.ReadReplyCode">
            <summary>
            Gets read error.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.ReadLine_EventArgs">
            <summary>
            This class proviedes data to asynchronous read line callback method.
            NOTE: ReadLine_EventArgs is reused for next read line call, so don't store references to this class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadLine_EventArgs.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadLine_EventArgs.#ctor(System.Exception,System.Int32,System.Byte[],System.Int32,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="exception">Exception what happened while reading data or null if read line was successfull.</param>
            <param name="readedCount">Specifies how many raw bytes was readed.</param>
            <param name="data">Line data buffer.</param>
            <param name="count">Specifies how many bytes stored to <b>data</b>.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadLine_EventArgs.DataToString(System.Text.Encoding)">
            <summary>
            Converts byte[] line data to the specified encoding string.
            </summary>
            <param name="encoding">Encoding to use for convert.</param>
            <returns>Returns line data as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.Exception">
            <summary>
            Gets exception what happened while reading line. Returns null if read line completed sucessfully.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.ReadedCount">
            <summary>
            Gets number of bytes actualy readed from source stream. Returns 0 if end of stream reached
            and no more data. This value includes any readed byte, including line feed, ... .
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.LineBuffer">
            <summary>
            Gets <b>buffer</b> argumnet what was passed to BeginReadLine mehtod.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.Count">
            <summary>
            Gets number of bytes stored to <b>LineBuffer</b>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.Data">
            <summary>
            Gets readed line data or null if end of stream reached and no more data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.DataStringDefault">
            <summary>
            Gets readed line data as string with system <b>default</b> encoding or returns null if end of stream reached and no more data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.DataStringAscii">
            <summary>
            Gets readed line data as string with <b>ASCII</b> encoding or returns null if end of stream reached and no more data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.DataStringUtf8">
            <summary>
            Gets readed line data as string with <b>UTF8</b> encoding or returns null if end of stream reached and no more data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.Tag">
            <summary>
            Gets <b>tag</b> argument what was pased to BeginReadLine method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.ReadToStream_EventArgs">
            <summary>
            This class provides data to asynchronous read to stream methods callback.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadToStream_EventArgs.#ctor(System.Exception,System.IO.Stream,System.Int32,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="exception">Exception what happened while reading data or null if data reading was successfull.</param>
            <param name="stream">Stream where data was stored.</param>
            <param name="count">Number of bytes readed.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadToStream_EventArgs.DataToString(System.Text.Encoding)">
            <summary>
            Converts byte[] line data to the specified encoding string.
            </summary>
            <param name="encoding">Encoding to use for convert.</param>
            <returns>Returns line data as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.Exception">
            <summary>
            Gets exception what happened while reading data. Returns null if data reading completed sucessfully.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.Stream">
            <summary>
            Gets stream where data is stored.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.Count">
            <summary>
            Gets number of bytes readed and written to <b>Stream</b>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.Data">
            <summary>
            Gets readed data. NOTE: This property is available only is Stream supports seeking !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.DataStringDefault">
            <summary>
            Gets readed line data as string with system <b>default</b> encoding. 
            NOTE: This property is available only is Stream supports seeking !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.DataStringAscii">
            <summary>
            Gets readed line data as string with <b>ASCII</b> encoding. 
            NOTE: This property is available only is Stream supports seeking !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.DataStringUtf8">
            <summary>
            Gets readed line data as string with <b>UTF8</b> encoding. 
            NOTE: This property is available only is Stream supports seeking !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.Tag">
            <summary>
            Gets or stes user data.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.SaslAuthTypes">
            <summary>
            SASL authentications
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AUTH.SaslAuthTypes.None">
            <summary>
            Non authentication
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AUTH.SaslAuthTypes.Plain">
            <summary>
            Plain text authentication. For POP3 USER/PASS commands, for IMAP LOGIN command.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AUTH.SaslAuthTypes.Login">
            <summary>
            LOGIN.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AUTH.SaslAuthTypes.Cram_md5">
            <summary>
            CRAM-MD5
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AUTH.SaslAuthTypes.Digest_md5">
            <summary>
            DIGEST-MD5.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AUTH.SaslAuthTypes.All">
            <summary>
            All authentications.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ErrorEventHandler">
            <summary>
            Represent the method what will handle Error event.
            </summary>
            <param name="sender">Delegate caller.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="T:LumiSoft.Net.LogEventHandler">
            <summary>
            To be supplied.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ValidateIPHandler">
            <summary>
            Represents the method that will handle the <see href="LumiSoftMailServerSMTPSMTP_ServerValidateIPAddressFieldOrEvent.html">SMTP_Server.ValidateIPAddress</see> and <see href="LumiSoftMailServerPOP3POP3_ServerValidateIPAddressFieldOrEvent.html">POP3_Server.ValidateIPAddress</see>event.
            </summary>
            <param name="sender">The source of the event. </param>
            <param name="e">A <see href="LumiSoftMailServerValidateIP_EventArgs.html">ValidateIP_EventArgs</see> that contains the event data.</param>
        </member>
        <member name="T:LumiSoft.Net.Error_EventArgs">
            <summary>
            Provides data for the SysError event for servers.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Error_EventArgs.#ctor(System.Exception,System.Diagnostics.StackTrace)">
            <summary>
            Default constructor.
            </summary>
            <param name="x"></param>
            <param name="stackTrace"></param>
        </member>
        <member name="P:LumiSoft.Net.Error_EventArgs.Exception">
            <summary>
            Occured error's exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Error_EventArgs.StackTrace">
            <summary>
            Occured error's stacktrace.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Error_EventArgs.Text">
            <summary>
            Gets comment text.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketBufferedWriter">
            <summary>
            Implements buffered writer for socket.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketBufferedWriter.#ctor(LumiSoft.Net.SocketEx)">
            <summary>
            Default constructor.
            </summary>
            <param name="socket">Socket where to write data.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketBufferedWriter.Flush">
            <summary>
            Forces to send all data in buffer to destination host.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketBufferedWriter.Write(System.String)">
            <summary>
            Queues specified data to write buffer. If write buffer is full, buffered data will be sent to detination host.
            </summary>
            <param name="data">Data to queue.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketBufferedWriter.Write(System.Byte[])">
            <summary>
            Queues specified data to write buffer. If write buffer is full, buffered data will be sent to detination host.
            </summary>
            <param name="data">Data to queue.</param>
        </member>
        <member name="T:LumiSoft.Net.ValidateIP_EventArgs">
            <summary>
            Provides data for the ValidateIPAddress event for servers.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.ValidateIP_EventArgs.#ctor(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Default constructor.
            </summary>
            <param name="localEndPoint">Server IP.</param>
            <param name="remoteEndPoint">Connected client IP.</param>
        </member>
        <member name="P:LumiSoft.Net.ValidateIP_EventArgs.ConnectedIP">
            <summary>
            IP address of computer, which is sending mail to here.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.ValidateIP_EventArgs.LocalEndPoint">
            <summary>
            Gets local endpoint.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.ValidateIP_EventArgs.RemoteEndPoint">
            <summary>
            Gets remote endpoint.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.ValidateIP_EventArgs.Validated">
            <summary>
            Gets or sets if IP is allowed access.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.ValidateIP_EventArgs.SessionTag">
            <summary>
            Gets or sets user data what is stored to session.Tag property.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.ValidateIP_EventArgs.ErrorText">
            <summary>
            Gets or sets error text what is sent to connected socket. NOTE: This is only used if Validated = false.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Client.CommadCompleted">
            <summary>
            Is called when asynchronous command had completed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Client.SmtpClientEx">
            <summary>
            SMTP client.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Dispose">
            <summary>
            Cleasns up resources and disconnect smtp client if open.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Connect(System.String,System.Int32)">
            <summary>
            Connects to sepcified host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Connect(System.String,System.Int32,System.Boolean)">
            <summary>
            Connects to sepcified host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect. Default SMTP port is 25 and SSL port is 465.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Connect(System.Net.IPEndPoint,System.String,System.Int32)">
            <summary>
            Connects to sepcified host.
            </summary>
            <param name="localEndpoint">Sets local endpoint. Pass null, to use default.</param>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Connect(System.Net.IPEndPoint,System.String,System.Int32,System.Boolean)">
            <summary>
            Connects to sepcified host.
            </summary>
            <param name="localEndpoint">Sets local endpoint. Pass null, to use default.</param>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect.</param>
            <param name="ssl">Specifies if to connected via SSL. Default SMTP port is 25 and SSL port is 465.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginConnect(System.String,System.Int32,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Starts connection to specified host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect.</param>
            <param name="callback">Callback to be called if connect ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginConnect(System.String,System.Int32,System.Boolean,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Starts connection to specified host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
            <param name="callback">Callback to be called if connect ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginConnect(System.Net.IPEndPoint,System.String,System.Int32,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Starts connection to specified host.
            </summary>
            <param name="localEndpoint">Sets local endpoint. Pass null, to use default.</param>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect.</param>
            <param name="callback">Callback to be called if connect ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginConnect(System.Net.IPEndPoint,System.String,System.Int32,System.Boolean,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Starts connection to specified host.
            </summary>
            <param name="localEndpoint">Sets local endpoint. Pass null, to use default.</param>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
            <param name="callback">Callback to be called if connect ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginConnect_workerThread(System.Object)">
            <summary>
            Is called from ThreadPool Thread. This method just call synchrounous Connect.
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Disconnect">
            <summary>
            Disconnects smtp client from server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.StartTLS">
            <summary>
            Switches SMTP connection to SSL.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginStartTLS(LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Start TLS(SSL) negotiation asynchronously.
            </summary>
            <param name="callback">The method to be called when the asynchronous StartTLS operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginStartTLS_workerThread(System.Object)">
            <summary>
            Is called from ThreadPool Thread. This method just call synchrounous StartTLS.
            </summary>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Ehlo(System.String)">
            <summary>
            Does EHLO command. If server don't support EHLO, tries HELO.
            </summary>
            <param name="hostName">Host name which is reported to SMTP server.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginEhlo(System.String,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Begins EHLO command.
            </summary>
            <param name="hostName">Host name which is reported to SMTP server.</param>
            <param name="callback">Callback to be called if command ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnEhloSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished EHLO command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnEhloReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading EHLO command server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnHeloSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished HELO command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnHeloReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading EHLO command server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Authenticate(System.String,System.String)">
            <summary>
            Does AUTH command.
            </summary>
            <param name="userName">Uesr name.</param>
            <param name="password">Password.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginAuthenticate(System.String,System.String,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Begins authenticate.
            </summary>
            <param name="userName">Uesr name.</param>
            <param name="password">Password.</param> 
            <param name="callback">Callback to be called if command ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthCramMd5SendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished AUTH CRAM-MD5 command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthCramMd5ReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading AUTH CRAM-MD% server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param> 
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthCramMd5UserPwdSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished sending username and password to smtp server.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthCramMd5UserPwdReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading user name and password send server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param> 
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthLoginSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished AUTH LOGIN command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthLoginReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading MAIL FROM: command server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param> 
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthLoginUserSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished sending user name to SMTP server.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthLoginUserReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading AUTH LOGIN user send server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param> 
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthLoginPasswordSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished sending password to SMTP server.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthLoginPwdReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading AUTH LOGIN password send server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param> 
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.SetSender(System.String,System.Int64)">
            <summary>
            Does MAIL FROM: command.
            </summary>
            <param name="senderEmail">Sender email address what is reported to smtp server</param>
            <param name="messageSize">Message size in bytes or -1 if message size isn't known.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginSetSender(System.String,System.Int64,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Begin setting sender.
            </summary>
            <param name="senderEmail">Sender email address what is reported to smtp server.</param>
            <param name="messageSize">Message size in bytes or -1 if message size isn't known.</param>
            <param name="callback">Callback to be called if command ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnMailSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished MAIL FROM: command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnMailReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading MAIL FROM: command server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param> 
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.AddRecipient(System.String)">
            <summary>
            Does RCPT TO: command.
            </summary>
            <param name="recipientEmail">Recipient email address.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginAddRecipient(System.String,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Begin adding recipient.
            </summary>
            <param name="recipientEmail">Recipient email address.</param>
            <param name="callback">Callback to be called if command ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnRcptSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished RCPT TO: command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnRcptReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading RCPT TO: command server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.SendMessage(System.IO.Stream)">
            <summary>
            Sends message to server. NOTE: Message sending starts from message stream current posision.
            </summary>
            <param name="message">Message what will be sent to server. NOTE: Message sending starts from message stream current posision.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginSendMessage(System.IO.Stream,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Starts sending message.
            </summary>
            <param name="message">Message what will be sent to server. NOTE: Message sending starts from message stream current posision.</param>
            <param name="callback">Callback to be called if command ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnBdatSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished BDAT command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnBdatDataSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished sending BDAT message data to smtp server.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnBdatReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading BDAT: command server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnDataSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished DATA command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnDataReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading DATA command server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnDataMessageSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has sending MESSAGE to smtp server.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnDataMessageSendReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading MESSAGE send smtp server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Reset">
            <summary>
            Send RSET command to SMTP server, resets SMTP session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.HandleSocketError(LumiSoft.Net.SocketCallBackResult,System.Exception)">
            <summary>
            Handles socket errors.
            </summary>
            <param name="result"></param>
            <param name="x"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.GetDestinations(System.String)">
            <summary>
            Gets specified email domain possible connect points. Values are in priority descending order.
            </summary>
            <param name="domain">Email address or domain name.</param>
            <returns>Returns possible email server connection points.</returns>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.QuickSendSmartHost(System.String,System.Int32,System.String,LumiSoft.Net.Mime.Mime)">
            <summary>
            Sends specified message to specified smart host.
            </summary>
            <param name="smartHost">Smarthost name or IP.</param>
            <param name="port">SMTP port number. Normally this is 25.</param>
            <param name="hostName">Host name reported to SMTP server.</param>
            <param name="message">Mime message to send.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.QuickSendSmartHost(System.String,System.Int32,System.String,System.String,System.String,LumiSoft.Net.Mime.Mime)">
            <summary>
            Sends specified message to specified smart host.
            </summary>
            <param name="smartHost">Smarthost name or IP.</param>
            <param name="port">SMTP port number. Normally this is 25.</param>
            <param name="hostName">Host name reported to SMTP server.</param>
            <param name="userName">SMTP user name. Note: Pass empty string if no authentication wanted.</param>
            <param name="password">SMTP password.</param>
            <param name="message">Mime message to send.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.QuickSendSmartHost(System.String,System.Int32,System.Boolean,System.String,System.String,System.String,LumiSoft.Net.Mime.Mime)">
            <summary>
            Sends specified message to specified smart host.
            </summary>
            <param name="smartHost">Smarthost name or IP.</param>
            <param name="port">SMTP port number. Default SMTP port is 25 and SSL port is 465.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
            <param name="hostName">Host name reported to SMTP server.</param>
            <param name="userName">SMTP user name. Note: Pass empty string if no authentication wanted.</param>
            <param name="password">SMTP password.</param>
            <param name="message">Mime message to send.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.QuickSendSmartHost(System.String,System.Int32,System.String,System.String,System.String[],System.IO.Stream)">
            <summary>
            Sends specified message to specified smart host. NOTE: Message sending starts from message stream current posision.
            </summary>
            <param name="smartHost">Smarthost name or IP.</param>
            <param name="port">SMTP port number. Normally this is 25.</param>
            <param name="hostName">Host name reported to SMTP server.</param>
            <param name="from">From address reported to SMTP server.</param>
            <param name="to">Message recipients.</param>
            <param name="messageStream">Message stream. NOTE: Message sending starts from message stream current posision.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.QuickSendSmartHost(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String[],System.IO.Stream)">
            <summary>
            Sends specified message to specified smart host. NOTE: Message sending starts from message stream current posision.
            </summary>
            <param name="smartHost">Smarthost name or IP.</param>
            <param name="port">SMTP port number. Normally this is 25.</param>
            <param name="hostName">Host name reported to SMTP server.</param>
            <param name="userName">SMTP user name. Note: Pass empty string if no authentication wanted.</param>
            <param name="password">SMTP password.</param>
            <param name="from">From address reported to SMTP server.</param>
            <param name="to">Message recipients.</param>
            <param name="messageStream">Message stream. NOTE: Message sending starts from message stream current posision.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.QuickSendSmartHost(System.String,System.Int32,System.Boolean,System.String,System.String,System.String,System.String,System.String[],System.IO.Stream)">
            <summary>
            Sends specified message to specified smart host. NOTE: Message sending starts from message stream current posision.
            </summary>
            <param name="smartHost">Smarthost name or IP.</param>
            <param name="port">SMTP port number. Default SMTP port is 25 and SSL port is 465.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
            <param name="hostName">Host name reported to SMTP server.</param>
            <param name="userName">SMTP user name. Note: Pass empty string if no authentication wanted.</param>
            <param name="password">SMTP password.</param>
            <param name="from">From address reported to SMTP server.</param>
            <param name="to">Message recipients.</param>
            <param name="messageStream">Message stream. NOTE: Message sending starts from message stream current posision.</param>
        </member>
        <member name="E:LumiSoft.Net.SMTP.Client.SmtpClientEx.SessionLog">
            <summary>
            Occurs when SMTP session has finished and session log is available.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.LocalEndpoint">
            <summary>
            Gets local endpoint. Returns null if smtp client isn't connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.RemoteEndPoint">
            <summary>
            Gets remote endpoint. Returns null if smtp client isn't connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.DnsServers">
            <summary>
            Gets or sets dns servers.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.Connected">
            <summary>
            Gets if smtp client is connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.Authenticated">
            <summary>
            Gets if pop3 client is authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.LastDataTime">
            <summary>
            Gets when was last activity.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.SessionActiveLog">
            <summary>
            Gets log entries that are currently in log buffer. Returns null if socket not connected or no logging enabled.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.ReadedCount">
            <summary>
            Gets how many bytes are readed through smtp client.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.WrittenCount">
            <summary>
            Gets how many bytes are written through smtp client.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.IsSecureConnection">
            <summary>
            Gets if the connection is an SSL connection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Client.SmtpClientEx.Auth_state_data">
            <summary>
            Provides state date for BeginAuthenticate method.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Auth_state_data.#ctor(System.String,System.String,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Default constructor.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <param name="callback">Callback what must be called when aynchrounous execution completes.</param>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.Auth_state_data.UserName">
            <summary>
            Gets user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.Auth_state_data.Password">
            <summary>
            Gets user password.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.Auth_state_data.Callback">
            <summary>
            Gets callback what must be called when aynchrounous execution completes.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.Auth_state_data.Tag">
            <summary>
            Gets or sets user data.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketCallBack">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketCallBackResult">
            <summary>
            Asynchronous command execute result.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SocketCallBackResult.Ok">
            <summary>
            Operation was successfull.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SocketCallBackResult.LengthExceeded">
            <summary>
            Exceeded maximum allowed size.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SocketCallBackResult.SocketClosed">
            <summary>
            Connected client closed connection.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SocketCallBackResult.Exception">
            <summary>
            Exception happened.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketEx">
            <summary>
            This class implements extended socket, provides usefull methods for reading and writing data to socket.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Socket wrapper. NOTE: You must pass connected socket here !
            </summary>
            <param name="socket">Socket.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Dispose">
            <summary>
            Clean up any resouces being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Connect(System.Net.IPEndPoint)">
            <summary>
            Connects to the specified host.
            </summary>
            <param name="endpoint">IP endpoint where to connect.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Connect(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Connects to the specified host.
            </summary>
            <param name="endpoint">IP endpoint where to connect.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Connect(System.String,System.Int32)">
            <summary>
            Connects to the specified host.
            </summary>
            <param name="host">Host name or IP where to connect.</param>
            <param name="port">TCP port number where to connect.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Connect(System.String,System.Int32,System.Boolean)">
            <summary>
            Connects to the specified host.
            </summary>
            <param name="host">Host name or IP where to connect.</param>
            <param name="port">TCP port number where to connect.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Disconnect">
            <summary>
            Disconnects socket.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Shutdown(System.Net.Sockets.SocketShutdown)">
            <summary>
            Shutdowns socket.
            </summary>
            <param name="how"></param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Bind(System.Net.EndPoint)">
            <summary>
            Associates a Socket with a local endpoint.
            </summary>
            <param name="loaclEP"></param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Listen(System.Int32)">
            <summary>
            Places a Socket in a listening state.
            </summary>
            <param name="backlog">The maximum length of the pending connections queue. </param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Accept(System.Boolean)">
            <summary>
            TODO:
            </summary>
            <param name="ssl"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.SwitchToSSL(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Switches socket to SSL mode. Throws excpetion is socket is already in SSL mode.
            </summary>
            <param name="certificate">Certificate to use for SSL.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.SwitchToSSL_AsClient">
            <summary>
            Switches socket to SSL mode. Throws excpetion is socket is already in SSL mode.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadByte">
            <summary>
            Reads byte from socket. Returns readed byte or -1 if socket is shutdown and tehre is no more data available.
            </summary>
            <returns>Returns readed byte or -1 if socket is shutdown and tehre is no more data available.</returns>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadLine">
            <summary>
            Reads line from socket. Maximum line length is 4000 bytes. NOTE: CRLF isn't written to destination stream.
            If maximum allowed line length is exceeded line is read to end, but isn't stored to buffer and exception
            is thrown after line reading.
            </summary>
            <returns>Returns readed line.</returns>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadLine(System.Int32)">
            <summary>
            Reads line from socket.NOTE: CRLF isn't written to destination stream.
            If maximum allowed line length is exceeded line is read to end, but isn't stored to buffer and exception
            is thrown after line reading.
            </summary>
            <param name="maxLineLength">Maximum line length in bytes.</param>
            <returns>Returns readed line.</returns>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadLineByte(System.Int32)">
            <summary>
            Reads line from socket.NOTE: CRLF isn't written to destination stream.
            If maximum allowed line length is exceeded line is read to end, but isn't stored to buffer and exception
            is thrown after line reading.
            </summary>
            <param name="maxLineLength">Maximum line length in bytes.</param>
            <returns>Returns readed line.</returns>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadLine(System.IO.Stream,System.Int32)">
            <summary>
            Reads line from socket and stores it to specified stream. NOTE: CRLF isn't written to destination stream.
            If maximum allowed line length is exceeded line is read to end, but isn't stored to buffer and exception
            is thrown after line reading.
            </summary>
            <param name="stream">Stream where to store readed line.</param>
            <param name="maxLineLength">Maximum line length in bytes.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadSpecifiedLength(System.Int32,System.IO.Stream)">
            <summary>
            Reads specified length of data from socket and store to specified stream.
            </summary>
            <param name="lengthToRead">Specifies how much data to read from socket.</param>
            <param name="storeStream">Stream where to store data.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadPeriodTerminated(System.Int32)">
            <summary>
            Reads period terminated string. The data is terminated by a line containing only a period, that is,
            the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;".
            When a line of text is received, it checks the line. If the line is composed of a single period,
            it is treated as the end of data indicator.  If the first character is a period and there are 
            other characters on the line, the first character is deleted.
            If maximum allowed data length is exceeded data is read to end, but isn't stored to buffer and exception
            is thrown after data reading.
            </summary>
            <param name="maxLength">Maximum data length in bytes.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadPeriodTerminated(System.IO.Stream,System.Int32)">
            <summary>
            Reads period terminated data. The data is terminated by a line containing only a period, that is,
            the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;".
            When a line of text is received, it checks the line. If the line is composed of a single period,
            it is treated as the end of data indicator.  If the first character is a period and there are 
            other characters on the line, the first character is deleted.
            If maximum allowed data length is exceeded data is read to end, but isn't stored to stream and exception
            is thrown after data reading.
            </summary>
            <param name="stream">Stream where to store readed data.</param>
            <param name="maxLength">Maximum data length in bytes.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Write(System.String)">
            <summary>
            Writes specified data to socket.
            </summary>
            <param name="data">Data to write to socket.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Write(System.Byte[])">
            <summary>
            Writes specified data to socket.
            </summary>
            <param name="data">Data to to wite to socket.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes specified data to socket.
            </summary>
            <param name="data">Data to to wite to socket.</param>
            <param name="offset">Offset in data from where to start sending data.</param>
            <param name="length">Lengh of data to send.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Write(System.IO.Stream)">
            <summary>
            Writes specified data to socket.
            </summary>
            <param name="stream">Stream which data to write to socket. Reading starts from stream current position and will be readed to EOS.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Write(System.IO.Stream,System.Int64)">
            <summary>
            Writes specified data to socket.
            </summary>
            <param name="stream">Stream which data to write to socket. Reading starts from stream current position and specified count will be readed.</param>
            <param name="count">Number of bytes to read from stream and write to socket.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.WriteLine(System.String)">
            <summary>
            Writes specified line to socket. If line isn't CRLF terminated, CRLF is added automatically.
            </summary>
            <param name="line">Line to write to socket.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.WriteLine(System.Byte[])">
            <summary>
            Writes specified line to socket. If line isn't CRLF terminated, CRLF is added automatically.
            </summary>
            <param name="line">Line to write to socket.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.WritePeriodTerminated(System.String)">
            <summary>
            Writes period terminated string to socket. The data is terminated by a line containing only a period, that is,
            the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;". Before sending a line of text, check the first
            character of the line.If it is a period, one additional period is inserted at the beginning of the line.
            </summary>
            <param name="data">String data to write.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.WritePeriodTerminated(System.IO.Stream)">
            <summary>
            Writes period terminated data to socket. The data is terminated by a line containing only a period, that is,
            the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;". Before sending a line of text, check the first
            character of the line.If it is a period, one additional period is inserted at the beginning of the line.
            </summary>
            <param name="stream">Stream which data to write. Reading begins from stream current position and is readed to EOS.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginReadLine(System.IO.Stream,System.Int32,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins reading line from socket asynchrounously.
            If maximum allowed line length is exceeded line is read to end, but isn't stored to buffer and exception
            is thrown after line reading.
            </summary>
            <param name="stream">Stream where to store readed line.</param>
            <param name="maxLineLength">Maximum line length in bytes.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous line read operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.TryToReadLine(LumiSoft.Net.SocketCallBack,System.Object,System.IO.Stream,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tries to read line from socket data buffer. If buffer doesn't contain line, 
            next buffer data block is getted asynchronously and this method is called again.
            </summary>
            <param name="callback">The method to be called when the asynchronous line read operation is completed.</param>
            <param name="tag">User data.</param>
            <param name="stream">Stream where to store readed data.</param>
            <param name="maxLineLength">Specifies maximum line legth.</param>
            <param name="lastByte">Last byte what was readed pevious method call or -1 if first method call.</param>
            <param name="readedCount">Specifies count of bytes readed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.OnBeginReadLineBufferingCompleted(System.Exception,System.Object)">
            <summary>
            This method is called after asynchronous data buffering is completed.
            </summary>
            <param name="x">Exception what happened on method execution or null, if operation completed sucessfully.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginReadSpecifiedLength(System.IO.Stream,System.Int32,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins reading specified amount of data from socket asynchronously.
            </summary>
            <param name="stream">Stream where to store readed data.</param>
            <param name="lengthToRead">Specifies number of bytes to read from socket.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous read operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.TryToReadReadSpecifiedLength(System.IO.Stream,System.Int32,System.Object,LumiSoft.Net.SocketCallBack,System.Int32)">
            <summary>
            Tries to read specified length of data from socket data buffer. If buffer doesn't contain data, 
            next buffer data block is getted asynchronously and this method is called again.
            </summary>
            <param name="stream">Stream where to store readed data.</param>
            <param name="lengthToRead">Specifies number of bytes to read from socket.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous read operation is completed.</param>
            <param name="readedCount">Specifies count of bytes readed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.OnBeginReadSpecifiedLengthBufferingCompleted(System.Exception,System.Object)">
            <summary>
            This method is called after asynchronous data buffering is completed.
            </summary>
            <param name="x">Exception what happened on method execution or null, if operation completed sucessfully.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginReadPeriodTerminated(System.IO.Stream,System.Int32,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins reading period terminated data. The data is terminated by a line containing only a period, that is,
            the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;".
            When a line of text is received, it checks the line. If the line is composed of a single period,
            it is treated as the end of data indicator.  If the first character is a period and there are 
            other characters on the line, the first character is deleted.
            If maximum allowed data length is exceeded data is read to end, but isn't stored to stream and exception
            is thrown after data reading.
            </summary>
            <param name="stream">Stream where to store readed data.</param>
            <param name="maxLength">Maximum data length in bytes.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous read operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.TryToReadPeriodTerminated(LumiSoft.Net.SocketCallBack,System.Object,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Tries to read period terminated data from socket data buffer. If buffer doesn't contain 
            period terminated data,next buffer data block is getted asynchronously and this method is called again.
            </summary>
            <param name="callback">The method to be called when the asynchronous period terminated read operation is completed.</param>
            <param name="tag">User data.</param>
            <param name="stream">Stream where to store readed data.</param>
            <param name="maxLength">Specifies maximum data legth in bytes.</param>
            <param name="readedCount">Specifies count of bytes readed.</param>
            <param name="lastByte">Last byte what was readed pevious method call or -1 if first method call.</param>
            <param name="lineBreak">Specifies if there is active line break.</param>
            <param name="expectCRLF">Specifies if terminating CRLF is expected.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.OnBeginReadPeriodTerminatedBufferingCompleted(System.Exception,System.Object)">
            <summary>
            This method is called after asynchronous data buffering is completed.
            </summary>
            <param name="x">Exception what happened on method execution or null, if operation completed sucessfully.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginWrite(System.IO.Stream,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins writing specified data to socket.
            </summary>
            <param name="stream">Stream which data to write to socket. Reading starts from stream current position and will be readed to EOS.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginProcessingWrite(System.IO.Stream,System.Object,LumiSoft.Net.SocketCallBack,System.Int32)">
            <summary>
            Starts sending data block to socket.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed</param>
            <param name="countSent">Specifies how many data is sent.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.OnBeginWriteCallback(System.IAsyncResult)">
            <summary>
            This method is called after asynchronous datablock send is completed.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginWriteLine(System.String,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins specified line sending to socket asynchronously.
            </summary>
            <param name="line">Line to send.</param>
            <param name="callback">The method to be called when the asynchronous line write operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginWriteLine(System.String,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins specified line sending to socket asynchronously.
            </summary>
            <param name="line">Line to send.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous line write operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.OnBeginWriteLineCallback(System.IAsyncResult)">
            <summary>
            This method is called after asynchronous WriteLine is completed.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginWritePeriodTerminated(System.IO.Stream,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins writing period terminated data to socket. The data is terminated by a line containing only a period, that is,
            the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;". Before sending a line of text, check the first
            character of the line.If it is a period, one additional period is inserted at the beginning of the line.
            </summary>
            <param name="stream">Stream which data to write. Reading begins from stream current position and is readed to EOS.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginWritePeriodTerminated(System.IO.Stream,System.Boolean,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins writing period terminated data to socket. The data is terminated by a line containing only a period, that is,
            the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;". Before sending a line of text, check the first
            character of the line.If it is a period, one additional period is inserted at the beginning of the line.
            </summary>
            <param name="stream">Stream which data to write. Reading begins from stream current position and is readed to EOS.</param>
            <param name="closeStream">Specifies if stream is closed after write operation has completed.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginProcessingWritePeriodTerminated(LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State)">
            <summary>
            Reads data block from state.Stream and begins writing it to socket.
            This method is looped while all data has been readed from state.Stream, then sate.Callback is called.
            </summary>
            <param name="state">State info.</param>        
        </member>
        <member name="M:LumiSoft.Net.SocketEx.OnBeginWritePeriodTerminatedCallback(System.IAsyncResult)">
            <summary>
            This method is called after asynchronous datablock send is completed.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.SendTo(System.Byte[],System.Net.EndPoint)">
            <summary>
            Sends data to the specified end point.
            </summary>
            <param name="data">Data to send.</param>
            <param name="remoteEP">Remote endpoint where to send data.</param>
            <returns>Returns number of bytes actualy sent.</returns>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BufferDataBlock">
            <summary>
            Buffers data from socket if needed. If there is data in buffer, no buffering is done.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginBufferDataBlock(LumiSoft.Net.SocketEx.BufferDataBlockCompleted,System.Object)">
            <summary>
            Start buffering data from socket asynchronously.
            </summary>
            <param name="callback">The method to be called when the asynchronous data buffering operation is completed.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.OnBeginBufferDataBlockCallback(System.IAsyncResult)">
            <summary>
            This method is called after asynchronous BeginBufferDataBlock is completed.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.Encoding">
            <summary>
            Gets or sets socket default encoding. 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.Logger">
            <summary>
            Gets or sets logging source. If this is setted, reads/writes are logged to it.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.RawSocket">
            <summary>
            Gets raw uderlaying socket.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.Connected">
            <summary>
            Gets if socket is connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.LocalEndPoint">
            <summary>
            Gets the local endpoint.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.RemoteEndPoint">
            <summary>
            Gets the remote endpoint.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.SSL">
            <summary>
            Gets if socket is connected via SSL.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.ReadedCount">
            <summary>
            Gets how many bytes are readed through this socket.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.WrittenCount">
            <summary>
            Gets how many bytes are written through this socket.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.LastActivity">
            <summary>
            Gets when was last socket(read or write) activity.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State">
            <summary>
            BeginWritePeriodTerminated state obejct.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.#ctor(System.IO.Stream,System.Boolean,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="closeStream">Specifies if stream must be closed after reading is completed.</param>
            <param name="tag">User data.</param>
            <param name="callback">Callback what to call if asynchronous data writing completes.</param>
        </member>
        <member name="P:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.Stream">
            <summary>
            Gets source stream.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.CloseStream">
            <summary>
            Gets if stream must be closed if reading completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.Tag">
            <summary>
            Gets user data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.Callback">
            <summary>
            Gets callback what must be called if asynchronous write ends.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.HasCRLF">
            <summary>
            Gets or sets if last sent data ends with CRLF.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.LastByte">
            <summary>
            Gets or sets what is last sent byte.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.CountSent">
            <summary>
            Gets or sets how many bytes has written to socket.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketLogEntry">
            <summary>
            Socket log entry.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketLogEntry.#ctor(System.String,System.Int64,LumiSoft.Net.SocketLogEntryType)">
            <summary>
            Default constructor.
            </summary>
            <param name="text">Log text.</param>
            <param name="size">Data size.</param>
            <param name="type">Log entry type</param>
        </member>
        <member name="P:LumiSoft.Net.SocketLogEntry.Text">
            <summary>
            Gets log text.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketLogEntry.Size">
            <summary>
            Gets size of data readed or sent.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketLogEntry.Type">
            <summary>
            Gets log entry type.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketLogEntryType">
            <summary>
            Log entry type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SocketLogEntryType.ReadFromRemoteEP">
            <summary>
            Data is readed from remote endpoint.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SocketLogEntryType.SendToRemoteEP">
            <summary>
            Data is sent to remote endpoint.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SocketLogEntryType.FreeText">
            <summary>
            Comment log entry.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketLogger">
            <summary>
            Socket logger.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketLogger.#ctor(System.Net.Sockets.Socket,LumiSoft.Net.LogEventHandler)">
            <summary>
            Default constructor.
            </summary>
            <param name="socket"></param>
            <param name="logHandler"></param>
        </member>
        <member name="M:LumiSoft.Net.SocketLogger.LogEntriesToString(LumiSoft.Net.SocketLogger,System.Boolean,System.Boolean)">
            <summary>
            Converts log entries to string.
            </summary>
            <param name="logger">Socket logger.</param>
            <param name="firstLogPart">Specifies if first log part of multipart log.</param>
            <param name="lastLogPart">Specifies if last log part (logging ended).</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SocketLogger.AddReadEntry(System.String,System.Int64)">
            <summary>
            Adds data read(from remoteEndpoint) entry.
            </summary>
            <param name="text">Log text.</param>
            <param name="size">Readed text size.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketLogger.AddSendEntry(System.String,System.Int64)">
            <summary>
            Adds data send(to remoteEndpoint) entry.
            </summary>
            <param name="text">Log text.</param>
            <param name="size">Sent text size.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketLogger.AddTextEntry(System.String)">
            <summary>
            Adds free text entry.
            </summary>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketLogger.Flush">
            <summary>
            Requests to write all in memory log entries to log log file.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketLogger.OnEntryAdded">
            <summary>
            This method is called when new loge entry has added.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketLogger.SessionID">
            <summary>
            Gets or sets session ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketLogger.UserName">
            <summary>
            Gets or sets authenticated user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketLogger.LogEntries">
            <summary>
            Gets current cached log entries.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketLogger.LocalEndPoint">
            <summary>
            Gets local endpoint.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketLogger.RemoteEndPoint">
            <summary>
            Gets remote endpoint.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketServer">
            <summary>
            This is base class for Socket and Session based servers.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.Dispose">
            <summary>
            Clean up any resources being used and stops server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.StartServer">
            <summary>
            Starts server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.StopServer">
            <summary>
            Stops server. NOTE: Active sessions aren't cancled.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.StartProcCons">
            <summary>
            Starts proccessiong incoming connections (Accepts and queues connections).
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.StartProcQueuedCons">
            <summary>
            Starts queueed connections proccessing (Creates and starts session foreach queued connection).
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.AddSession(LumiSoft.Net.SocketServerSession)">
            <summary>
            Adds specified session to sessions collection.
            </summary>
            <param name="session">Session to add.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.RemoveSession(LumiSoft.Net.SocketServerSession)">
            <summary>
            Removes specified session from sessions collection.
            </summary>
            <param name="session">Session to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.OnSysError(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="x"></param>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.OnSessionTimeoutTimer">
            <summary>
            This method must get timedout sessions and end them.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.InitNewSession(System.Net.Sockets.Socket,LumiSoft.Net.IPBindInfo)">
            <summary>
            Initialize and start new session here. Session isn't added to session list automatically, 
            session must add itself to server session list by calling AddSession().
            </summary>
            <param name="socket">Connected client socket.</param>
            <param name="bindInfo">BindInfo what accepted socket.</param>
        </member>
        <member name="E:LumiSoft.Net.SocketServer.SysError">
            <summary>
            Occurs when server or session has system error(unhandled error).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.BindInfo">
            <summary>
            Gets or set socket binding info. Use this property to specify on which IP,port server 
            listnes and also if is SSL or STARTTLS support.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.MaxConnections">
            <summary>
            Gets or sets maximum allowed connections.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.Enabled">
            <summary>
            Runs and stops server.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.LogCommands">
            <summary>
            Gets or sets if to log commands.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.SessionIdleTimeOut">
            <summary>
            Session idle timeout in milliseconds.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.MaxBadCommands">
            <summary>
            Gets or sets maximum bad commands allowed to session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.Sessions">
            <summary>
            Gets active sessions.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketServer.QueuedConnection">
            <summary>
            This struct holds queued connection info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.QueuedConnection.#ctor(System.Net.Sockets.Socket,LumiSoft.Net.IPBindInfo)">
            <summary>
            Default constructor.
            </summary>
            <param name="socket">Socket.</param>
            <param name="bindInfo">Bind info.</param>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.QueuedConnection.Socket">
            <summary>
            Gets socket.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.QueuedConnection.BindInfo">
            <summary>
            Gets bind info.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketServerSession">
            <summary>
            This is base class for SocketServer sessions.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServerSession.#ctor(System.String,LumiSoft.Net.SocketEx,LumiSoft.Net.IPBindInfo,LumiSoft.Net.SocketServer)">
            <summary>
            Default constructor.
            </summary>
            <param name="sessionID">Session ID.</param>
            <param name="socket">Server connected socket.</param>
            <param name="bindInfo">BindInfo what accepted socket.</param>
            <param name="server">Reference to server.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketServerSession.Kill">
            <summary>
            Kills session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServerSession.OnSessionTimeout">
            <summary>
            Times session out.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServerSession.SetUserName(System.String)">
            <summary>
            Sets property UserName value.
            </summary>
            <param name="userName">User name.</param>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.SessionID">
            <summary>
            Gets session ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.SessionStartTime">
            <summary>
            Gets session start time.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.Authenticated">
            <summary>
            Gets if session is authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.UserName">
            <summary>
            Gets authenticated user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.ExpectedTimeout">
            <summary>
            Gets how many seconds has left before timout is triggered.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.SessionLastDataTime">
            <summary>
            Gets last data activity time.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.LocalEndPoint">
            <summary>
            Gets EndPoint which accepted conection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.RemoteEndPoint">
            <summary>
            Gets connected Host(client) EndPoint.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.Tag">
            <summary>
            Gets or sets custom user data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.SessionActiveLog">
            <summary>
            Gets log entries that are currently in log buffer.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.ReadedCount">
            <summary>
            Gets how many bytes are readed through this session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.WrittenCount">
            <summary>
            Gets how many bytes are written through this session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.IsSecureConnection">
            <summary>
            Gets if the connection is an SSL connection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.Socket">
            <summary>
            Gets access to SocketEx.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.BindInfo">
            <summary>
            Gets access to BindInfo what accepted socket.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.StreamLineReader">
            <summary>
            Stream line reader.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.StreamLineReader.#ctor(System.IO.Stream)">
            <summary>
            Default constructor.
            </summary>
            <param name="strmSource">Source stream from where to read data. Reading begins from stream current position.</param>
        </member>
        <member name="M:LumiSoft.Net.StreamLineReader.ReadLine">
            <summary>
            Reads byte[] line from stream. NOTE: Returns null if end of stream reached.
            </summary>
            <returns>Return null if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.StreamLineReader.ReadLineString">
            <summary>
            Reads string line from stream. String is converted with specified Encoding property from byte[] line. NOTE: Returns null if end of stream reached.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.StreamLineReader.Encoding">
            <summary>
            Gets or sets charset encoding to use for string based methods. Default("") encoding is system default encoding.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.StreamLineReader.CRLF_LinesOnly">
            <summary>
            Gets or sets if lines must be CRLF terminated or may be only LF terminated too.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.WriteStream_EventArgs">
            <summary>
            This class provides data to asynchronous write from stream methods callback.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.WriteStream_EventArgs.#ctor(System.Exception,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="exception">Exception happened during write or null if operation was successfull.</param>
            <param name="stream">Stream which data was written.</param>
            <param name="countReaded">Number of bytes readed from <b>stream</b>.</param>
            <param name="countWritten">Number of bytes written to source stream.</param>
        </member>
        <member name="P:LumiSoft.Net.IO.WriteStream_EventArgs.Exception">
            <summary>
            Gets exception happened during write or null if operation was successfull.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.WriteStream_EventArgs.Stream">
            <summary>
            Gets stream what data was written.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.WriteStream_EventArgs.CountReaded">
            <summary>
            Gets number of bytes readed from <b>Stream</b>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.WriteStream_EventArgs.CountWritten">
            <summary>
            Gets number of bytes written to source stream.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.Write_EventArgs">
            <summary>
            This class provides data for BeginWriteCallback delegate.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.Write_EventArgs.#ctor(System.Exception)">
            <summary>
            Default constructor.
            </summary>
            <param name="exception">Exception happened during write or null if operation was successfull.</param>
        </member>
        <member name="P:LumiSoft.Net.IO.Write_EventArgs.Exception">
            <summary>
            Gets exception happened during write or null if operation was successfull.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AsyncOP">
            <summary>
            This is base class for asynchronous operation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AsyncOP.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AuthHelper">
            <summary>
            Provides helper methods for authentications(APOP,CRAM-MD5,DIGEST-MD5).
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Apop(System.String,System.String)">
            <summary>
            Calculates APOP authentication compare value.
            </summary>
            <param name="password">Password.</param>
            <param name="passwordTag">Password tag.</param>
            <returns>Returns value what must be used for comparing passwords.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Cram_Md5(System.String,System.String)">
            <summary>
            Calculates CRAM-MD5 authentication compare value.
            </summary>
            <param name="password">Password.</param>
            <param name="hashKey">Hash calculation key</param>
            <returns>Returns value what must be used for comparing passwords.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Digest_Md5(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Calculates DIGEST-MD5 authentication compare value.
            </summary>
            <param name="client_server">Specifies if client or server value calculated. 
            Client and server has diffrent calculation method.</param>
            <param name="realm">Use domain or machine name for this.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <param name="nonce">Server password tag.</param>
            <param name="cnonce">Client password tag.</param>
            <param name="digest_uri"></param>
            <returns>Returns value what must be used for comparing passwords.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Create_Digest_Md5_ServerResponse(System.String,System.String)">
            <summary>
            Creates AUTH Digest-md5 server response what server must send to client.
            </summary>
            <param name="realm">Use domain or machine name for this.</param>
            <param name="nonce">Server password tag. Random hex string is suggested.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.GenerateNonce">
            <summary>
            Generates random nonce value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.HmacMd5(System.String,System.String)">
            <summary>
            Calculates keyed md5 hash from specifieed text and with specified hash key.
            </summary>
            <param name="hashKey"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Md5(System.String)">
            <summary>
            Calculates md5 hash from specified string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Hex(System.String)">
            <summary>
            Converts specified string to hexa string.
            </summary>
            <param name="text"></param>
            <returns></returns> 
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Base64en(System.String)">
            <summary>
            Encodes specified string to base64 string.
            </summary>
            <param name="text">Text to encode.</param>
            <returns>Returns encoded string.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Base64de(System.String)">
            <summary>
            Decodes specified base64 string.
            </summary>
            <param name="text">Base64 string to decode.</param>
            <returns>Returns decoded string.</returns>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_e_Authenticate">
            <summary>
            This class provides data for server userName/password authentications.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_e_Authenticate.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="authorizationID">Authorization ID.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the argumnets has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_e_Authenticate.IsAuthenticated">
            <summary>
            Gets or sets if specified user is authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_e_Authenticate.AuthorizationID">
            <summary>
            Gets authorization ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_e_Authenticate.UserName">
            <summary>
            Gets user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_e_Authenticate.Password">
            <summary>
            Gets password.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_e_UserInfo">
            <summary>
            This class provides data for server authentication mechanisms <b>GetUserInfo</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_e_UserInfo.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="userName">User name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_e_UserInfo.UserExists">
            <summary>
            Gets or sets if specified user exists.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_e_UserInfo.UserName">
            <summary>
            Gets user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_e_UserInfo.Password">
            <summary>
            Gets or sets user password.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.Auth_HttpDigest">
            <summary>
            Implements http digest access authentication. Defined in RFC 2617.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="digestResponse">Server/Client returned digest response.</param>
            <param name="requestMethod">Request method.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Client constructor. This is used to build valid Authorization response to server.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <param name="cnonce">Client nonce value.</param>
            <param name="uri">Request URI.</param>
            <param name="digestResponse">Server authenticate resposne.</param>
            <param name="requestMethod">Request method.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.#ctor(System.String,System.String,System.String)">
            <summary>
            Server constructor. This is used to build valid Authenticate response to client.
            </summary>
            <param name="realm">Realm(domain).</param>
            <param name="nonce">Nonce value.</param>
            <param name="opaque">Opaque value.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.Authenticate(System.String,System.String)">
            <summary>
            Authenticates specified user and password using this class parameters.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns true if authenticated, otherwise false.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.Parse(System.String)">
            <summary>
            Parses authetication info from client digest response.
            </summary>
            <param name="digestResponse">Client returned digest response.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.CalculateRspAuth(System.String,System.String)">
            <summary>
            Calculates 'rspauth' value.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns 'rspauth' value.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.CalculateResponse(System.String,System.String)">
            <summary>
            Calculates response value.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">User password.</param>
            <returns>Returns calculated rsponse value.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.ToString">
            <summary>
            Converts this to valid digest string.
            </summary>
            <returns>Returns digest string.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.ToChallange">
            <summary>
            Creates 'Challange' data using this class info. 
            </summary>
            <returns>Returns Challange data.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.ToChallange(System.Boolean)">
            <summary>
            Creates 'Challange' data using this class info. 
            </summary>
            <param name="addAuthMethod">Specifies if 'digest ' authe method string constant is added.</param>
            <returns>Returns Challange data.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.ToAuthorization">
            <summary>
            Creates 'Authorization' data using this class info.
            </summary>
            <returns>Return Authorization data.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.ToAuthorization(System.Boolean)">
            <summary>
            Creates 'Authorization' data using this class info.
            </summary>
            <param name="addAuthMethod">Specifies if 'digest ' authe method string constant is added.</param>
            <returns>Return Authorization data.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.CreateNonce">
            <summary>
            Creates valid nonce value.
            </summary>
            <returns>Returns nonce value.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.CreateOpaque">
            <summary>
            Creates valid opaque value.
            </summary>
            <returns>Renturn opaque value.</returns>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.RequestMethod">
            <summary>
            Gets or sets request method.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Realm">
            <summary>
            Gets or sets a string to be displayed to users so they know which username and password 
            to use. This string should contain at least the name of the host performing the 
            authentication and might additionally indicate the collection of users who might have access.
            An example might be "registered_users@gotham.news.com".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Nonce">
            <summary>
            Gets or sets a server-specified unique data string. It is recommended that this 
            string be base64 or hexadecimal data. 
            Suggested value: base64(time-stamp hex(time-stamp ":" ETag ":" private-key)).
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is specified.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Opaque">
            <summary>
            Gets or sets string of data, specified by the server, which should be returned by the client unchanged.
            It is recommended that this string be base64 or hexadecimal data.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is specified.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Algorithm">
            <summary>
            Gets or sets algorithm to use to produce the digest and a checksum.
            This is normally MD5 or MD5-sess.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Response">
            <summary>
            Gets a string of 32 hex digits computed by HTTP digest algorithm, 
            which proves that the user knows a password.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.UserName">
            <summary>
            Gets or sets user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Password">
            <summary>
            Gets or sets password.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Uri">
            <summary>
            Gets the URI from Request-URI.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Qop">
            <summary>
            Gets or sets value what indicates "quality of protection" the client has applied to
            the message. If present, its value MUST be one of the alternatives the server indicated
            it supports in the WWW-Authenticate header. This directive is optional in order to preserve 
            backward compatibility.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.CNonce">
            <summary>
            Gets or sets Client nonce value. This MUST be specified if a qop directive is sent (see above), and
            MUST NOT be specified if the server did not send a qop directive in the WWW-Authenticate header field.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.NonceCount">
            <summary>
            Gets or stets nonce count. This MUST be specified if a qop directive is sent (see above), and
            MUST NOT be specified if the server did not send a qop directive in the WWW-Authenticate 
            header field.  The nc-value is the hexadecimal count of the number of requests.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager">
            <summary>
            HTTP digest authentication nonce manager.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.Dispose">
            <summary>
            Cleans up nay resource being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.CreateNonce">
            <summary>
            Creates new nonce and adds it to active nonces collection.
            </summary>
            <returns>Returns new created nonce.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.NonceExists(System.String)">
            <summary>
            Checks if specified nonce exists in active nonces collection.
            </summary>
            <param name="nonce">Nonce to check.</param>
            <returns>Returns true if nonce exists in active nonces collection, otherwise returns false.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.RemoveNonce(System.String)">
            <summary>
            Removes specified nonce from active nonces collection.
            </summary>
            <param name="nonce">Nonce to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.RemoveExpiredNonces">
            <summary>
            Removes not used nonces what has expired.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.ExpireTime">
            <summary>
            Gets or sets nonce expire time in seconds.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.NonceEntry">
            <summary>
            This class represents nonce entry in active nonces collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.NonceEntry.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="nonce"></param>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.NonceEntry.Nonce">
            <summary>
            Gets nonce value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.NonceEntry.CreateTime">
            <summary>
            Gets time when this nonce entry was created.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism">
            <summary>
            This base class for server SASL authentication mechanisms.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.Continue(System.String)">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientRespone</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.Name">
            <summary>
            Gets IANA-registered SASL authentication mechanism name.
            </summary>
            <remarks>The registered list is available from: http://www.iana.org/assignments/sasl-mechanisms .</remarks>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.Tags">
            <summary>
            Gets user data items collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5">
            <summary>
            Implements "CRAM-MD5" authenticaiton. Defined in RFC 2195.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="requireSSL">Specifies if this mechanism is available to SSL connections only.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.Continue(System.String)">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientResponse</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.HmacMd5(System.String,System.String)">
            <summary>
            Calculates keyed md5 hash from specifieed text and with specified hash key.
            </summary>
            <param name="hashKey">MD5 key.</param>
            <param name="text">Text to hash.</param>
            <returns>Returns MD5 hash.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.OnGetUserInfo(System.String)">
            <summary>
            Raises <b>GetUserInfo</b> event.
            </summary>
            <param name="userName">User name.</param>
            <returns>Returns specified user info.</returns>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.Name">
            <summary>
            Returns always "CRAM-MD5".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.GetUserInfo">
            <summary>
            Is called when authentication mechanism needs to get user info to complete atuhentication.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5">
            <summary>
            Implements "DIGEST-MD5" authenticaiton. Defined in RFC 2831.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="requireSSL">Specifies if this mechanism is available to SSL connections only.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.Continue(System.String)">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientResponse</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.OnGetUserInfo(System.String)">
            <summary>
            Raises <b>GetUserInfo</b> event.
            </summary>
            <param name="userName">User name.</param>
            <returns>Returns specified user info.</returns>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.Name">
            <summary>
            Returns always "DIGEST-MD5".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.Realm">
            <summary>
            Gets or sets realm value.
            </summary>
            <remarks>Normally this is host or domain name.</remarks>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.GetUserInfo">
            <summary>
            Is called when authentication mechanism needs to get user info to complete atuhentication.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login">
            <summary>
            Implements "LOGIN" authenticaiton.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="requireSSL">Specifies if this mechanism is available to SSL connections only.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.Continue(System.String)">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientResponse</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.OnAuthenticate(System.String,System.String,System.String)">
            <summary>
            Raises <b>Authenticate</b> event.
            </summary>
            <param name="authorizationID">Authorization ID.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns authentication result.</returns>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.Name">
            <summary>
            Returns always "LOGIN".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.Authenticate">
            <summary>
            Is called when authentication mechanism needs to authenticate specified user.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain">
            <summary>
            Implements "PLAIN" authenticaiton. Defined in RFC 4616.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="requireSSL">Specifies if this mechanism is available to SSL connections only.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.Continue(System.String)">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientResponse</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.OnAuthenticate(System.String,System.String,System.String)">
            <summary>
            Raises <b>Authenticate</b> event.
            </summary>
            <param name="authorizationID">Authorization ID.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns authentication result.</returns>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.Name">
            <summary>
            Returns always "PLAIN".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.Authenticate">
            <summary>
            Is called when authentication mechanism needs to authenticate specified user.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DnsCacheEntry">
            <summary>
            Dns cache entry.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsCacheEntry.#ctor(LumiSoft.Net.Dns.Client.DnsServerResponse,System.DateTime)">
            <summary>
            Default constructor.
            </summary>
            <param name="answers">Dns answers.</param>
            <param name="addTime">Entry add time.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsCacheEntry.Answers">
            <summary>
            Gets dns answers.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsCacheEntry.Time">
            <summary>
            Gets entry add time.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DnsCache">
            <summary>
            This class implements dns query cache.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsCache.#cctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsCache.GetFromCache(System.String,System.Int32)">
            <summary>
            Tries to get dns records from cache, if any.
            </summary>
            <param name="qname"></param>
            <param name="qtype"></param>
            <returns>Returns null if not in cache.</returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsCache.AddToCache(System.String,System.Int32,LumiSoft.Net.Dns.Client.DnsServerResponse)">
            <summary>
            Adds dns records to cache. If old entry exists, it is replaced.
            </summary>
            <param name="qname"></param>
            <param name="qtype"></param>
            <param name="answers"></param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsCache.ClearCache">
            <summary>
            Clears DNS cache.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsCache.SerializeCache">
            <summary>
            Serializes current cache.
            </summary>
            <returns>Return serialized cache.</returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsCache.DeSerializeCache(System.Byte[])">
            <summary>
            DeSerializes stored cache.
            </summary>
            <param name="cacheData">This value must be DnsCache.SerializeCache() method value.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsCache.CacheTime">
            <summary>
            Gets or sets how long(seconds) to cache dns query.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DnsServerResponse">
            <summary>
            This class represents dns server response.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetARecords">
            <summary>
            Gets IPv4 host addess records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetNSRecords">
            <summary>
            Gets name server records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetCNAMERecords">
            <summary>
            Gets CNAME records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetSOARecords">
            <summary>
            Gets SOA records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetPTRRecords">
            <summary>
            Gets PTR records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetHINFORecords">
            <summary>
            Gets HINFO records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetMXRecords">
            <summary>
            Gets MX records.(MX records are sorted by preference, lower array element is prefered)
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetTXTRecords">
            <summary>
            Gets text records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetAAAARecords">
            <summary>
            Gets IPv6 host addess records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetSRVRecords">
            <summary>
            Gets SRV resource records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetNAPTRRecords">
            <summary>
            Gets NAPTR resource records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.FilterRecordsX(System.Collections.Generic.List{LumiSoft.Net.Dns.Client.DNS_rr_base},LumiSoft.Net.Dns.Client.QTYPE)">
            <summary>
            Filters out specified type of records from answer.
            </summary>
            <param name="answers"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsServerResponse.ConnectionOk">
            <summary>
            Gets if connection to dns server was successful.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsServerResponse.ID">
            <summary>
            Gets DNS transaction ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsServerResponse.ResponseCode">
            <summary>
            Gets dns server response code.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsServerResponse.AllAnswers">
            <summary>
            Gets all resource records returned by server (answer records section + authority records section + additional records section). 
            NOTE: Before using this property ensure that ConnectionOk=true and ResponseCode=RCODE.NO_ERROR.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsServerResponse.Answers">
            <summary>
            Gets dns server returned answers. NOTE: Before using this property ensure that ConnectionOk=true and ResponseCode=RCODE.NO_ERROR.
            </summary>
            <code>
            // NOTE: DNS server may return diffrent record types even if you query MX.
            //       For example you query lumisoft.ee MX and server may response:	
            //		 1) MX - mail.lumisoft.ee
            //		 2) A  - lumisoft.ee
            // 
            //       Before casting to right record type, see what type record is !
            			
            
            foreach(DnsRecordBase record in Answers){
            	// MX record, cast it to MX_Record
            	if(record.RecordType == QTYPE.MX){
            		MX_Record mx = (MX_Record)record;
            	}
            }
            </code>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsServerResponse.AuthoritiveAnswers">
            <summary>
            Gets name server resource records in the authority records section. NOTE: Before using this property ensure that ConnectionOk=true and ResponseCode=RCODE.NO_ERROR.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsServerResponse.AdditionalAnswers">
            <summary>
            Gets resource records in the additional records section. NOTE: Before using this property ensure that ConnectionOk=true and ResponseCode=RCODE.NO_ERROR.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.Dns_Client">
            <summary>
            Dns client.
            </summary>
            <example>
            <code>
            // Set dns servers
            Dns_Client.DnsServers = new string[]{"194.126.115.18"};
            
            Dns_Client dns = Dns_Client();
            
            // Get MX records.
            DnsServerResponse resp = dns.Query("lumisoft.ee",QTYPE.MX);
            if(resp.ConnectionOk &amp;&amp; resp.ResponseCode == RCODE.NO_ERROR){
            	MX_Record[] mxRecords = resp.GetMXRecords();
            	
            	// Do your stuff
            }
            else{
            	// Handle error there, for more exact error info see RCODE 
            }	 
            
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.Query(System.String,LumiSoft.Net.Dns.Client.QTYPE)">
            <summary>
            Queries server with specified query.
            </summary>
            <param name="queryText">Query text. It depends on queryType.</param>
            <param name="queryType">Query type.</param>
            <returns>Returns DSN server response.</returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.Query(System.String,LumiSoft.Net.Dns.Client.QTYPE,System.Int32)">
            <summary>
            Queries server with specified query.
            </summary>
            <param name="queryText">Query text. It depends on queryType.</param>
            <param name="queryType">Query type.</param>
            <param name="timeout">Query timeout in milli seconds.</param>
            <returns>Returns DSN server response.</returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.GetHostAddresses(System.String)">
            <summary>
            Gets specified host IP addresses(A and AAAA).
            </summary>
            <param name="host">Host name.</param>
            <returns>Returns specified host IP addresses.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>host</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.Resolve(System.String[])">
            <summary>
            Resolves host names to IP addresses.
            </summary>
            <param name="hosts">Host names to resolve.</param>
            <returns>Returns specified hosts IP addresses.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>hosts</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.Resolve(System.String)">
            <summary>
            Resolves host name to IP addresses.
            </summary>
            <param name="host">Host name or IP address.</param>
            <returns>Return specified host IP addresses.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>host</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.StartWaitingIPv4Packet">
            <summary>
            Starts waiting DNS server response.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.StartWaitingIPv6Packet">
            <summary>
            Starts waiting DNS server response.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.IPv4ReceiveCompleted(System.IAsyncResult)">
            <summary>
            Is called when IPv4 socket has received data.
            </summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.IPv6ReceiveCompleted(System.IAsyncResult)">
            <summary>
            Is called when IPv6 socket has received data.
            </summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.QueryServer(System.Int32,System.String,LumiSoft.Net.Dns.Client.QTYPE,System.Int32)">
            <summary>
            Sends query to server.
            </summary>
            <param name="timeout">Query timeout in milli seconds.</param>
            <param name="qname">Query text.</param>
            <param name="qtype">Query type.</param>
            <param name="qclass">Query class.</param>
            <returns>Returns DNS server response.</returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.CreateQuery(System.Int32,System.String,LumiSoft.Net.Dns.Client.QTYPE,System.Int32)">
            <summary>
            Creates new query.
            </summary>
            <param name="ID">Query ID.</param>
            <param name="qname">Query text.</param>
            <param name="qtype">Query type.</param>
            <param name="qclass">Query class.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.ParseQuery(System.Byte[])">
            <summary>
            Parses query.
            </summary>
            <param name="reply">Dns server reply.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.ParseAnswers(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Parses specified count of answers from query.
            </summary>
            <param name="reply">Server returned query.</param>
            <param name="answerCount">Number of answers to parse.</param>
            <param name="offset">Position from where to start parsing answers.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.ReadCharacterString(System.Byte[],System.Int32@)">
            <summary>
            Reads character-string from spefcified data and offset.
            </summary>
            <param name="data">Data from where to read.</param>
            <param name="offset">Offset from where to start reading.</param>
            <returns>Returns readed string.</returns>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.Dns_Client.DnsServers">
            <summary>
            Gets or sets dns servers.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.Dns_Client.UseDnsCache">
            <summary>
            Gets or sets if to use dns caching.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.Dns_Client.ID">
            <summary>
            Get next query ID.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.Dns_Client.DnsTransaction">
            <summary>
            This class represents DNS client transaction.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.DnsTransaction.#ctor(LumiSoft.Net.Dns.Client.Dns_Client,System.Int32,System.String,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner DNS client.</param>
            <param name="id">Transaction ID.</param>
            <param name="qname">QNAME value.</param>
            <param name="qtype">QTYPE value.</param>
            <param name="timeout">Timeout in milliseconds.</param>
            <param name="query">Raw DNS query.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> or <b>query</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.DnsTransaction.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.DnsTransaction.Start">
            <summary>
            Starts DNS transaction processing.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.DnsTransaction.ProcessResponse(LumiSoft.Net.Dns.Client.DnsServerResponse)">
            <summary>
            Processes DNS server response through this transaction.
            </summary>
            <param name="response">DNS server response.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>response</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.DnsTransaction.OnTimeout">
            <summary>
            Raises <b>Timeout</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.DnsTransaction.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.Dns_Client.DnsTransaction.ID">
            <summary>
            Gets DNS transaction ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.Dns_Client.DnsTransaction.QName">
            <summary>
            Gets QNAME value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.Dns_Client.DnsTransaction.QType">
            <summary>
            Gets QTYPE value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.Dns_Client.DnsTransaction.Response">
            <summary>
            Gets DNS server response. Value null means no response received yet.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.Dns.Client.Dns_Client.DnsTransaction.Timeout">
            <summary>
            This event is raised when DNS transaction times out.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.Dns.Client.Dns_Client.DnsTransaction.Completed">
            <summary>
            This event is raised when DNS server response received.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_ClientException">
            <summary>
            DNS client exception.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_ClientException.#ctor(LumiSoft.Net.Dns.Client.RCODE)">
            <summary>
            Default constructor.
            </summary>
            <param name="rcode">DNS server returned error code.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_ClientException.ErrorCode">
            <summary>
            Gets DNS server returned error code.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_A">
            <summary>
            A record class.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_base">
            <summary>
            Base class for DNS records.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_base.#ctor(LumiSoft.Net.Dns.Client.QTYPE,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="recordType">Record type (A,MX, ...).</param>
            <param name="ttl">TTL (time to live) value in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_base.RecordType">
            <summary>
            Gets record type (A,MX,...).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_base.TTL">
            <summary>
            Gets TTL (time to live) value in seconds.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_A.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="ip">IP address.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_A.Parse(System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_A.IP">
            <summary>
            Gets host IP address.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_AAAA">
            <summary>
            DNS AAAA resource record.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_AAAA.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="ip">IP address.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_AAAA.Parse(System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_AAAA.IP">
            <summary>
            Gets host IP address.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_CNAME">
            <summary>
            CNAME record class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_CNAME.#ctor(System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="alias">Alias.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_CNAME.Parse(System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_CNAME.Alias">
            <summary>
            Gets alias.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_HINFO">
            <summary>
            HINFO record.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_HINFO.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="cpu">Host CPU.</param>
            <param name="os">Host OS.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_HINFO.Parse(System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_HINFO.CPU">
            <summary>
            Gets host's CPU.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_HINFO.OS">
            <summary>
            Gets host's OS.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_MX">
            <summary>
            MX record class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_MX.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="preference">MX record preference.</param>
            <param name="host">Mail host dns name.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_MX.Parse(System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_MX.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type. 
            </summary>
            <param name="obj">An object to compare with this instance. </param>
            <returns>Returns 0 if two objects are equal, returns negative value if this object is less,
            returns positive value if this object is grater.</returns>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_MX.Preference">
            <summary>
            Gets MX record preference. The lower number is the higher priority server.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_MX.Host">
            <summary>
            Gets mail host dns name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_NAPTR">
            <summary>
            NAPRT(Naming Authority Pointer) resource record. Defined in RFC 3403.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_NAPTR.#ctor(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="order">Oorder in which the NAPTR records MUST be processed.</param>
            <param name="preference">Order in which NAPTR records with equal Order values SHOULD be processed.</param>
            <param name="flags">Flags which control the rewriting and interpretation of the fields in the record.</param>
            <param name="services">Services related to this record.</param>
            <param name="regexp">Regular expression that is applied to the original string.</param>
            <param name="replacement">Regular expressions replacement value.</param>
            <param name="ttl">Time to live value in seconds.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_NAPTR.Parse(System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_NAPTR.Order">
            <summary>
            Gets order in which the NAPTR records MUST be processed in order to accurately 
            represent the ordered list of Rules.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_NAPTR.Preference">
            <summary>
            Gets the order in which NAPTR records with equal Order values SHOULD be processed, 
            low numbers being processed before high numbers.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_NAPTR.Flags">
            <summary>
            Gets flags which control the rewriting and interpretation of the fields in the record.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_NAPTR.Services">
            <summary>
            Gets services related to this record. Known values can be get from: http://www.iana.org/assignments/enum-services.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_NAPTR.Regexp">
            <summary>
            Gets regular expression that is applied to the original string held by the client in order to 
            construct the next domain name to lookup.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_NAPTR.Replacement">
            <summary>
            Gets regular expressions replacement value.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_NS">
            <summary>
            NS record class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_NS.#ctor(System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="nameServer">Name server name.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_NS.Parse(System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_NS.NameServer">
            <summary>
            Gets name server name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_PTR">
            <summary>
            PTR record class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_PTR.#ctor(System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="domainName">DomainName.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_PTR.Parse(System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_PTR.DomainName">
            <summary>
            Gets domain name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_SOA">
            <summary>
            SOA record class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_SOA.#ctor(System.String,System.String,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="nameServer">Name server.</param>
            <param name="adminEmail">Zone administrator email.</param>
            <param name="serial">Version number of the original copy of the zone.</param>
            <param name="refresh">Time interval(in seconds) before the zone should be refreshed.</param>
            <param name="retry">Time interval(in seconds) that should elapse before a failed refresh should be retried.</param>
            <param name="expire">Time value(in seconds) that specifies the upper limit on the time interval that can elapse before the zone is no longer authoritative.</param>
            <param name="minimum">Minimum TTL(in seconds) field that should be exported with any RR from this zone.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_SOA.Parse(System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_SOA.NameServer">
            <summary>
            Gets name server.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_SOA.AdminEmail">
            <summary>
            Gets zone administrator email.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_SOA.Serial">
            <summary>
            Gets version number of the original copy of the zone.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_SOA.Refresh">
            <summary>
            Gets time interval(in seconds) before the zone should be refreshed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_SOA.Retry">
            <summary>
            Gets time interval(in seconds) that should elapse before a failed refresh should be retried.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_SOA.Expire">
            <summary>
            Gets time value(in seconds) that specifies the upper limit on the time interval that can elapse before the zone is no longer authoritative.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_SOA.Minimum">
            <summary>
            Gets minimum TTL(in seconds) field that should be exported with any RR from this zone. 
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_SRV">
            <summary>
            DNS SRV record. SRV record specifies the location of services. Defined in RFC 2782.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_SRV.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="priority">Service priority.</param>
            <param name="weight">Weight value.</param>
            <param name="port">Service port.</param>
            <param name="target">Service provider host name or IP address.</param>
            <param name="ttl">Time to live value in seconds.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_SRV.Parse(System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_SRV.Priority">
            <summary>
            Gets service priority. Lowest value means greater priority.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_SRV.Weight">
            <summary>
            Gets weight. The weight field specifies a relative weight for entries with the same priority. 
            Larger weights SHOULD be given a proportionately higher probability of being selected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_SRV.Port">
            <summary>
            Port where service runs.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_SRV.Target">
            <summary>
            Service provider host name or IP address.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_TXT">
            <summary>
            TXT record class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_TXT.#ctor(System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="text">Text.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_TXT.Parse(System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_TXT.Text">
            <summary>
            Gets text.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.QTYPE">
            <summary>
            Query type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.A">
            <summary>
            IPv4 host address
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.NS">
            <summary>
            An authoritative name server.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.CNAME">
            <summary>
            The canonical name for an alias.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.SOA">
            <summary>
            Marks the start of a zone of authority.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.PTR">
            <summary>
            A domain name pointer.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.HINFO">
            <summary>
            Host information.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.MX">
            <summary>
            Mail exchange.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.TXT">
            <summary>
            Text strings.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.AAAA">
            <summary>
            IPv6 host address.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.SRV">
            <summary>
            SRV record specifies the location of services.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.NAPTR">
            <summary>
            NAPTR(Naming Authority Pointer) record.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.ANY">
            <summary>
            All records what server returns.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.RCODE">
            <summary>
            Dns server reply codes.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.RCODE.NO_ERROR">
            <summary>
            No error condition.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.RCODE.FORMAT_ERRROR">
            <summary>
            Format error - The name server was unable to interpret the query.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.RCODE.SERVER_FAILURE">
            <summary>
            Server failure - The name server was unable to process this query due to a problem with the name server.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.RCODE.NAME_ERROR">
            <summary>
            Name Error - Meaningful only for responses from an authoritative name server, this code signifies that the
            domain name referenced in the query does not exist.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.RCODE.NOT_IMPLEMENTED">
            <summary>
            Not Implemented - The name server does not support the requested kind of query.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.RCODE.REFUSED">
            <summary>
            Refused - The name server refuses to perform the specified operation for policy reasons.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.OPCODE">
            <summary>
            
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.OPCODE.QUERY">
            <summary>
            A standard query.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.OPCODE.IQUERY">
            <summary>
            An inverse query. Obsoleted by RFC 3425.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.OPCODE.STATUS">
            <summary>
            A server status request.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.DNS.DNS_QClass">
            <summary>
            This enum holds DNS QCLASS value. Defined in RFC 1035 3.2.4.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.DNS.DNS_QClass.IN">
            <summary>
            Internet class.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.DNS.DNS_QClass.Any">
            <summary>
            Any class.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.DNS.DNS_QType">
            <summary>
            This enum holds DNS query type. Defined in RFC 1035.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.DNS.DNS_QType.A">
            <summary>
            IPv4 host address
            </summary>
        </member>
        <member name="F:LumiSoft.Net.DNS.DNS_QType.NS">
            <summary>
            An authoritative name server.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.DNS.DNS_QType.CNAME">
            <summary>
            The canonical name for an alias.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.DNS.DNS_QType.SOA">
            <summary>
            Marks the start of a zone of authority.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.DNS.DNS_QType.PTR">
            <summary>
            A domain name pointer.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.DNS.DNS_QType.HINFO">
            <summary>
            Host information.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.DNS.DNS_QType.MX">
            <summary>
            Mail exchange.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.DNS.DNS_QType.TXT">
            <summary>
            Text strings.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.DNS.DNS_QType.AAAA">
            <summary>
            IPv6 host address.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.DNS.DNS_QType.SRV">
            <summary>
            SRV record specifies the location of services.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.DNS.DNS_QType.NAPTR">
            <summary>
            NAPTR(Naming Authority Pointer) record.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.DNS.DNS_QType.ANY">
            <summary>
            All records what server returns.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.DNS.DNS_Query">
            <summary>
            This class represent DSN server query. Defined in RFC 1035.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.DNS.DNS_Query.#ctor(LumiSoft.Net.DNS.DNS_QType,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="qtype">Query type.</param>
            <param name="qname">Query text. It depends on query type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>qname</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.DNS.DNS_Query.#ctor(LumiSoft.Net.DNS.DNS_QClass,LumiSoft.Net.DNS.DNS_QType,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="qclass">Query class.</param>
            <param name="qtype">Query type.</param>
            <param name="qname">Query text. It depends on query type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>qname</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.DNS.DNS_Query.QueryClass">
            <summary>
            Gets DNS query class.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.DNS.DNS_Query.QueryType">
            <summary>
            Gets DNS query type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.DNS.DNS_Query.QueryName">
            <summary>
            Gets query text.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.DNS.DNS_RCode">
            <summary>
            This class holds DNS server responce code. Defined in RFC 1035.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.DNS.DNS_RCode.NO_ERROR">
            <summary>
            No error condition.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.DNS.DNS_RCode.FORMAT_ERRROR">
            <summary>
            Format error - The name server was unable to interpret the query.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.DNS.DNS_RCode.SERVER_FAILURE">
            <summary>
            Server failure - The name server was unable to process this query due to a problem with the name server.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.DNS.DNS_RCode.NAME_ERROR">
            <summary>
            Name Error - Meaningful only for responses from an authoritative name server, this code signifies that the
            domain name referenced in the query does not exist.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.DNS.DNS_RCode.NOT_IMPLEMENTED">
            <summary>
            Not Implemented - The name server does not support the requested kind of query.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.DNS.DNS_RCode.REFUSED">
            <summary>
            Refused - The name server refuses to perform the specified operation for policy reasons.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.Base64">
            <summary>
            This class implements base64 encoder/decoder.  Defined in RFC 4648.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64.Encode(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Encodes bytes.
            </summary>
            <param name="buffer">Data buffer.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes available in the buffer.</param>
            <param name="last">Last data block.</param>
            <returns>Returns encoded data.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64.Decode(System.String,System.Boolean)">
            <summary>
            Decodes specified base64 string.
            </summary>
            <param name="value">Base64 string.</param>
            <param name="ignoreNonBase64Chars">If true all invalid base64 chars ignored. If false, FormatException is raised.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:System.FormatException">Is raised when <b>value</b> contains invalid base64 data.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64.Decode(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Decodes specified base64 data.
            </summary>
            <param name="data">Base64 encoded data buffer.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes available in the buffer.</param>
            <param name="ignoreNonBase64Chars">If true all invalid base64 chars ignored. If false, FormatException is raised.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
            <exception cref="T:System.FormatException">Is raised when <b>value</b> contains invalid base64 data.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Decodes base64 encoded bytes.
            </summary>
            <param name="encBuffer">Base64 encoded data buffer.</param>
            <param name="encOffset">Offset in the encBuffer.</param>
            <param name="encCount">Number of bytes available in the encBuffer.</param>
            <param name="buffer">Buffer where to decode data.</param>
            <param name="offset">Offset int the buffer.</param>
            <param name="ignoreNonBase64Chars">If true all invalid base64 chars ignored. If false, FormatException is raised.</param>
            <returns>Returns number of bytes decoded.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>encBuffer</b> or <b>encBuffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
            <exception cref="T:System.FormatException">Is raised when <b>encBuffer</b> contains invalid base64 data.</exception>
        </member>
        <member name="T:LumiSoft.Net.IO.FifoBuffer">
            <summary>
            Implements FIFO(first in - first out) buffer.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.FifoBuffer.#ctor(System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="maxSize">Maximum number of bytes can buffer in FIFO.</param>
            <exception cref="T:System.ArgumentException">Is raised when </exception>
        </member>
        <member name="M:LumiSoft.Net.IO.FifoBuffer.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads up to specified count of bytes from the FIFO buffer.
            </summary>
            <param name="buffer">Buffer where to store data.</param>
            <param name="offset">Index in the buffer.</param>
            <param name="count">Maximum number of bytes to read.</param>
            <returns>Returns number of bytes readed. Returns 0 if no data in the buffer.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of allowed range.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.FifoBuffer.Write(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes specified number of bytes to the FIFO buffer.
            </summary>
            <param name="buffer">Data buffer.</param>
            <param name="offset">Index in the buffer.</param>
            <param name="count">Number of bytes to wrtite.</param>
            <param name="ignoreBufferFull">If true, disables excption raising when FIFO full.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of allowed range.</exception>
            <exception cref="T:LumiSoft.Net.IO.DataSizeExceededException">Is raised when ignoreBufferFull = false and FIFO buffer has no room to store data.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.FifoBuffer.Clear">
            <summary>
            Clears buffer data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.FifoBuffer.TrimStart">
            <summary>
            Removes unused space from the buffer beginning.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.FifoBuffer.MaxSize">
            <summary>
            Gets maximum number of bytes can buffer in FIFO.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.FifoBuffer.Available">
            <summary>
            Gets number of bytes avialable in FIFO.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.QuotedPrintableStream">
            <summary>
            Implements RFC 2045 6.7. Quoted-Printable stream.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.QuotedPrintableStream.#ctor(LumiSoft.Net.IO.SmartStream,System.IO.FileAccess)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="access">Specifies stream access mode.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.QuotedPrintableStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.QuotedPrintableStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.QuotedPrintableStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.QuotedPrintableStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.QuotedPrintableStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes a sequence of bytes, writes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.QuotedPrintableStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.QuotedPrintableStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.QuotedPrintableStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.QuotedPrintableStream.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.QuotedPrintableStream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.IO.ReadWriteControlledStream">
            <summary>
            This class implements read,write or read-write access stream.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadWriteControlledStream.#ctor(System.IO.Stream,System.IO.FileAccess)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="access">This stream access mode.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadWriteControlledStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadWriteControlledStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadWriteControlledStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadWriteControlledStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadWriteControlledStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadWriteControlledStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadWriteControlledStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadWriteControlledStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadWriteControlledStream.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadWriteControlledStream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.KeyValueCollection`2">
            <summary>
            Represents a collection that can be accessed either with the key or with the index. 
            </summary>
        </member>
        <member name="M:LumiSoft.Net.KeyValueCollection`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.KeyValueCollection`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the collection.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:LumiSoft.Net.KeyValueCollection`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from the collection.
            </summary>
            <param name="key">Key.</param>
            <returns>Returns if key found and removed, otherwise false.</returns>
        </member>
        <member name="M:LumiSoft.Net.KeyValueCollection`2.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.KeyValueCollection`2.ContainsKey(`0)">
            <summary>
            Gets if the collection contains the specified key.
            </summary>
            <param name="key">Key.</param>
            <returns>Returns true if the collection contains specified key.</returns>
        </member>
        <member name="M:LumiSoft.Net.KeyValueCollection`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">Key.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found.</param>
            <returns>Returns true if the collection contains specified key and value stored to <b>value</b> argument.</returns>
        </member>
        <member name="M:LumiSoft.Net.KeyValueCollection`2.TryGetValueAt(System.Int32,`1@)">
            <summary>
            Gets the value at the specified index.
            </summary>
            <param name="index">Zero based item index.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found.</param>
            <returns>Returns true if the collection contains specified key and value stored to <b>value</b> argument.</returns>
        </member>
        <member name="M:LumiSoft.Net.KeyValueCollection`2.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns>Returns IEnumerator interface.</returns>
        </member>
        <member name="P:LumiSoft.Net.KeyValueCollection`2.Count">
            <summary>
            Gets number of items int he collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.KeyValueCollection`2.Item(`0)">
            <summary>
            Gets item with the specified key.
            </summary>
            <param name="key">Key.</param>
            <returns>Returns item with the specified key. If the specified key is not found, a get operation throws a KeyNotFoundException.</returns>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_h_AddressList">
            <summary>
            This class represent generic <b>address-list</b> header fields. For example: To header.
            </summary>
            <example>
            <code>
            RFC 5322.
                header       = "FiledName:" address-list CRLF
                address-list = (address *("," address))
                address      = mailbox / group
            </code>
            </example>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_h">
            <summary>
            This is base class for MIME header fields. Defined in RFC 2045 3.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h.ToString">
            <summary>
            Returns header field as string.
            </summary>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.
            If encoding needed, UTF-8 is strongly reccomended if not sure.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h.ValueToString">
            <summary>
            Returns header field value as string.
            </summary>
            <returns>Returns header field value as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h.ValueToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field value as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.
            If encoding needed, UTF-8 is strongly reccomended if not sure.</param>
            <returns>Returns header field value as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h.Name">
            <summary>
            Gets header field name. For example "Content-Type".
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_AddressList.#ctor(System.String,LumiSoft.Net.Mail.Mail_t_AddressList)">
            <summary>
            Default constructor.
            </summary>
            <param name="fieldName">Header field name. For example: "To".</param>
            <param name="values">Addresses collection.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>filedName</b> or <b>values</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_AddressList.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_AddressList.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_AddressList.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_AddressList.Name">
            <summary>
            Gets header field name. For example "To".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_AddressList.Addresses">
            <summary>
            Gets addresses collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_h_DispositionNotificationOptions">
            <summary>
            Represents "Disposition-Notification-Options:" header. Defined in RFC 2298 2.2.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_DispositionNotificationOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_DispositionNotificationOptions.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_DispositionNotificationOptions.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_DispositionNotificationOptions.Name">
            <summary>
            Gets header field name. For example "Sender".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_DispositionNotificationOptions.Address">
            <summary>
            Gets or sets mailbox address.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_h_Mailbox">
            <summary>
            This class represent generic <b>mailbox</b> header fields. For example: Sender: header.
            </summary>
            <example>
            <code>
            RFC 5322.
                header = "FiledName:" mailbox CRLF
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_Mailbox.#ctor(System.String,LumiSoft.Net.Mail.Mail_t_Mailbox)">
            <summary>
            Default constructor.
            </summary>
            <param name="fieldName">Header field name. For example: "Sender".</param>
            <param name="mailbox">Mailbox value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>filedName</b> or <b>mailbox</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_Mailbox.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Sender: john.doe@domain.com'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_Mailbox.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Mailbox.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Mailbox.Name">
            <summary>
            Gets header field name. For example "Sender".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Mailbox.Address">
            <summary>
            Gets mailbox address.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_h_MailboxList">
            <summary>
            This class represent generic <b>mailbox-list</b> header fields. For example: From header.
            </summary>
            <example>
            <code>
            RFC 5322.
                header       = "FiledName:" mailbox-list CRLF
                mailbox-list =  (mailbox *("," mailbox)) / obs-mbox-list
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_MailboxList.#ctor(System.String,LumiSoft.Net.Mail.Mail_t_MailboxList)">
            <summary>
            Default constructor.
            </summary>
            <param name="filedName">Header field name. For example: "To".</param>
            <param name="values">Addresses collection.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>filedName</b> or <b>values</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_MailboxList.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_MailboxList.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_MailboxList.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_MailboxList.Name">
            <summary>
            Gets header field name. For example "From".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_MailboxList.Addresses">
            <summary>
            Gets addresses collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_h_ReturnPath">
            <summary>
            Represents "Return-Path:" header. Defined in RFC 5322 3.6.7.
            </summary>
            <example>
            <code>
            RFC 5322 3.6.7.
                return     = "Return-Path:" path CRLF
                path       = angle-addr / ([CFWS] "&lt;" [CFWS] "&gt;" [CFWS])
                angle-addr = [CFWS] "&lt;" addr-spec "&gt;" [CFWS]
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_ReturnPath.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="address">Address. Value null means null-path.</param>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_ReturnPath.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Return-Path: &lt;jhon.doe@domain.com&gt;'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_ReturnPath.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_ReturnPath.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_ReturnPath.Name">
            <summary>
            Gets header field name. For example "Sender".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_ReturnPath.Address">
            <summary>
            Gets mailbox address. Value null means null-path.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_t_Address">
            <summary>
            This class represents RFC 5322 3.4 Address class. 
            This class is base class for <see cref="T:LumiSoft.Net.Mail.Mail_t_Mailbox">mailbox address</see> and <see cref="T:LumiSoft.Net.Mail.Mail_t_Group">group address</see>.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_Address.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_Address.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord)">
            <summary>
            Returns address as string value.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <returns>Returns address as string value.</returns>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_t_AddressList">
            <summary>
            This class represents <b>address-list</b>. Defined in RFC 5322 3.4.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_AddressList.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_AddressList.Insert(System.Int32,LumiSoft.Net.Mail.Mail_t_Address)">
            <summary>
            Inserts a address into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the item.</param>
            <param name="value">Address to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_AddressList.Add(LumiSoft.Net.Mail.Mail_t_Address)">
            <summary>
            Adds specified address to the end of the collection.
            </summary>
            <param name="value">Address to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_AddressList.Remove(LumiSoft.Net.Mail.Mail_t_Address)">
            <summary>
            Removes specified item from the collection.
            </summary>
            <param name="value">Address to remove.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_AddressList.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_AddressList.ToArray">
            <summary>
            Copies addresses to new array.
            </summary>
            <returns>Returns addresses array.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_AddressList.ToString">
            <summary>
            Returns address-list as string.
            </summary>
            <returns>Returns address-list as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_AddressList.AcceptChanges">
            <summary>
            Resets IsModified property to false.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_AddressList.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_AddressList.IsModified">
            <summary>
            Gets if list has modified since it was loaded.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_AddressList.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_AddressList.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>Returns the element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_AddressList.Mailboxes">
            <summary>
            Gets this address list mailboxes(group address mailboxes + mailboxes).
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_t_Group">
            <summary>
            This class represents "group" address. Defined in RFC 5322 3.4.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_Group.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="displayName">Display name. Value null means not specified.</param>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_Group.ToString">
            <summary>
            Returns mailbox as string.
            </summary>
            <returns>Returns mailbox as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_Group.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord)">
            <summary>
            Returns address as string value.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <returns>Returns address as string value.</returns>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_Group.DisplayName">
            <summary>
            Gets or sets diplay name. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_Group.Members">
            <summary>
            Gets groiup address members collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_t_Mailbox">
            <summary>
            This class represents "mailbox" address. Defined in RFC 5322 3.4.
            </summary>
            <example>
            <code>
            RFC 5322 3.4.
                mailbox    = name-addr / addr-spec
                name-addr  = [display-name] angle-addr
                angle-addr = [CFWS] "&lt;" addr-spec "&gt;" [CFWS]
                addr-spec  = local-part "@" domain
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_Mailbox.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="displayName">Display name. Value null means not specified.</param>
            <param name="address">Email address.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>address</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_Mailbox.ToString">
            <summary>
            Returns mailbox as string.
            </summary>
            <returns>Returns mailbox as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_Mailbox.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord)">
            <summary>
            Returns address as string value.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <returns>Returns address as string value.</returns>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_Mailbox.DisplayName">
            <summary>
            Gets display name. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_Mailbox.Address">
            <summary>
            Gets address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_Mailbox.LocalPart">
            <summary>
            Gets local-part of address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_Mailbox.Domain">
            <summary>
            Gets domain part of address.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_t_MailboxList">
            <summary>
            This class represents <b>mailbox-list</b>. Defined in RFC 5322 3.4.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_MailboxList.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_MailboxList.Insert(System.Int32,LumiSoft.Net.Mail.Mail_t_Mailbox)">
            <summary>
            Inserts a address into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the item.</param>
            <param name="value">Address to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_MailboxList.Add(LumiSoft.Net.Mail.Mail_t_Mailbox)">
            <summary>
            Adds specified address to the end of the collection.
            </summary>
            <param name="value">Address to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_MailboxList.Remove(LumiSoft.Net.Mail.Mail_t_Mailbox)">
            <summary>
            Removes specified item from the collection.
            </summary>
            <param name="value">Address to remove.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_MailboxList.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_MailboxList.ToArray">
            <summary>
            Copies addresses to new array.
            </summary>
            <returns>Returns addresses array.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_MailboxList.ToString">
            <summary>
            Returns address-list as string.
            </summary>
            <returns>Returns address-list as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_MailboxList.AcceptChanges">
            <summary>
            Resets IsModified property to false.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_MailboxList.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_MailboxList.IsModified">
            <summary>
            Gets if list has modified since it was loaded.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_MailboxList.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_MailboxList.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>Returns the element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_Utils">
            <summary>
            This class provides mail message related utility methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_Utils.SMTP_Mailbox(LumiSoft.Net.MIME.MIME_Reader)">
            <summary>
            Reads SMTP "Mailbox" from the specified MIME reader.
            </summary>
            <param name="reader">MIME reader.</param>
            <returns>Returns SMTP "Mailbox" or null if no SMTP mailbox available.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>reader</b> is null reference.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b">
            <summary>
            This class is base class for MIME entity bodies.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b.SetParent(LumiSoft.Net.MIME.MIME_Entity,System.Boolean)">
            <summary>
            Sets body parent.
            </summary>
            <param name="entity">Owner entity.</param>
            <param name="setContentType">If true sets entity.ContentType header value.</param>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b.ToStream(System.IO.Stream,LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Stores MIME entity body to the specified stream.
            </summary>
            <param name="stream">Stream where to store body data.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b.IsModified">
            <summary>
            Gets if body has modified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b.Entity">
            <summary>
            Gets body owner entity. Returns null if body not bounded to any entity yet.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b.MediaType">
            <summary>
            Gets body media type. For example: 'text/plain'.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_Application">
            <summary>
            This class represents MIME application/xxx bodies. Defined in RFC 2046 4.2.
            </summary>
            <remarks>
            The "application" media type is to be used for discrete data which do
            not fit in any of the other categories, and particularly for data to
            be processed by some type of application program.
            </remarks>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_SinglepartBase">
            <summary>
            This class is base class for singlepart media bodies like: text,video,audio,image.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_SinglepartBase.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_SinglepartBase.SetParent(LumiSoft.Net.MIME.MIME_Entity,System.Boolean)">
            <summary>
            Sets body parent.
            </summary>
            <param name="entity">Owner entity.</param>
            <param name="setContentType">If true sets entity.ContentType header value.</param>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_SinglepartBase.ToStream(System.IO.Stream,LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Stores MIME entity body to the specified stream.
            </summary>
            <param name="stream">Stream where to store body data.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_SinglepartBase.SetModified(System.Boolean)">
            <summary>
            Sets IsModified property value.
            </summary>
            <param name="isModified">Modified flag.</param>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_SinglepartBase.GetEncodedDataStream">
            <summary>
            Gets body encoded data stream.
            </summary>
            <returns>Returns body encoded data stream.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_SinglepartBase.SetEncodedData(System.String,System.IO.Stream)">
            <summary>
            Sets body encoded data from specified stream.
            </summary>
            <param name="contentTransferEncoding">Content-Transfer-Encoding in what encoding <b>stream</b> data is.</param>
            <param name="stream">Stream data to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentTransferEncoding</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the argumennts has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_SinglepartBase.GetDataStream">
            <summary>
            Gets body decoded data stream.
            </summary>
            <returns>Returns body decoded data stream.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when body contains not supported Content-Transfer-Encoding.</exception>
            <remarks>The returned stream should be closed/disposed as soon as it's not needed any more.</remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_SinglepartBase.SetData(System.IO.Stream,System.String)">
            <summary>
            Sets body data from the specified stream.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="transferEncoding">Specifies content-transfer-encoding to use to encode data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>transferEncoding</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_SinglepartBase.SetDataFromFile(System.String,System.String)">
            <summary>
            Sets body data from the specified file.
            </summary>
            <param name="file">File name with optional path.</param>
            <param name="transferEncoding">Specifies content-transfer-encoding to use to encode data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_SinglepartBase.IsModified">
            <summary>
            Gets if body has modified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_SinglepartBase.EncodedDataSize">
            <summary>
            Gets encoded body data size in bytes.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_SinglepartBase.EncodedData">
            <summary>
            Gets body encoded data. 
            </summary>
            <remarks>NOTE: Use this property with care, because body data may be very big and you may run out of memory.
            For bigger data use <see cref="M:LumiSoft.Net.MIME.MIME_b_SinglepartBase.GetEncodedDataStream"/> method instead.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_SinglepartBase.Data">
            <summary>
            Gets body decoded data.
            </summary>
            <remarks>NOTE: Use this property with care, because body data may be very big and you may run out of memory.
            For bigger data use <see cref="M:LumiSoft.Net.MIME.MIME_b_SinglepartBase.GetDataStream"/> method instead.</remarks>
            <exception cref="T:System.NotSupportedException">Is raised when body contains not supported Content-Transfer-Encoding.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_SinglepartBase.EncodedStream">
            <summary>
            Gets encoded data stream.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Application.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Application.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>strean</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_Audio">
            <summary>
            This class represents MIME audio/xxx bodies. Defined in RFC 2046 4.3.
            </summary>
            <remarks>A media type of "audio" indicates that the body contains audio data.</remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Audio.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Audio.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_Image">
            <summary>
            This class represents MIME image/xxx bodies. Defined in RFC 2046 4.2.
            </summary>
            <remarks>
            A media type of "image" indicates that the body contains an image.
            The subtype names the specific image format.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Image.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Image.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_Message">
            <summary>
            This class represents MIME message/xxx bodies. Defined in RFC 2046 5.2.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Message.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Message.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_MessageDeliveryStatus">
            <summary>
            This class represents MIME <b>message/delivery-status</b> body. Defined in RFC 3464.
            </summary>
            <remarks>
            <code>
            delivery-status-content =  per-message-fields 1*( CRLF per-recipient-fields )
            
            per-message-fields =
                       [ original-envelope-id-field CRLF ]
                       reporting-mta-field CRLF
                       [ dsn-gateway-field CRLF ]
                       [ received-from-mta-field CRLF ]
                       [ arrival-date-field CRLF ]
                       *( extension-field CRLF )
                       
            per-recipient-fields =
                     [ original-recipient-field CRLF ]
                     final-recipient-field CRLF
                     action-field CRLF
                     status-field CRLF
                     [ remote-mta-field CRLF ]
                     [ diagnostic-code-field CRLF ]
                     [ last-attempt-date-field CRLF ]
                     [ final-log-id-field CRLF ]
                     [ will-retry-until-field CRLF ]
                    *( extension-field CRLF )
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MessageDeliveryStatus.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MessageDeliveryStatus.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MessageDeliveryStatus.ToStream(System.IO.Stream,LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Stores MIME entity body to the specified stream.
            </summary>
            <param name="stream">Stream where to store body data.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_MessageDeliveryStatus.IsModified">
            <summary>
            Gets if body has modified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_MessageDeliveryStatus.MessageFields">
            <summary>
            Gets per-message fields collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_MessageDeliveryStatus.RecipientBlocks">
            <summary>
            Gets reciepent report blocks collection.
            </summary>
            <remarks>Each block contains per-recipient-fields.</remarks>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_MessageRfc822">
            <summary>
            This class represents MIME message/rfc822 body. Defined in RFC 2046 5.2.1.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MessageRfc822.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MessageRfc822.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MessageRfc822.ToStream(System.IO.Stream,LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Stores MIME entity body to the specified stream.
            </summary>
            <param name="stream">Stream where to store body data.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_MessageRfc822.IsModified">
            <summary>
            Gets if body has modified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_MessageRfc822.Message">
            <summary>
            Gets embbed mail message.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_Multipart">
            <summary>
            This class represents MIME application/xxx bodies. Defined in RFC 2046 5.1.
            </summary>
            <remarks>
            The "multipart" represents single MIME body containing multiple child MIME entities.
            The "multipart" body must contain at least 1 MIME entity.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart.ParseInternal(LumiSoft.Net.MIME.MIME_Entity,System.String,LumiSoft.Net.IO.SmartStream,LumiSoft.Net.MIME.MIME_b_Multipart)">
            <summary>
            Internal body parsing.
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="mediaType">MIME media type. For example: text/plain.</param>
            <param name="stream">Stream from where to read body.</param>
            <param name="body">Multipart body instance.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>mediaType</b>, <b>stream</b> or <b>body</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart.SetParent(LumiSoft.Net.MIME.MIME_Entity,System.Boolean)">
            <summary>
            Sets body parent.
            </summary>
            <param name="entity">Owner entity.</param>
            <param name="setContentType">If true sets entity.ContentType header value.</param>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart.ToStream(System.IO.Stream,LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Stores MIME entity body to the specified stream.
            </summary>
            <param name="stream">Stream where to store body data.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart.IsModified">
            <summary>
            Gets if body has modified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart.DefaultBodyPartContentType">
            <summary>
            Gets default body part Content-Type. For more info see RFC 2046 5.1.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart.BodyParts">
            <summary>
            Gets multipart body body-parts collection.
            </summary>
            <remarks>Multipart entity child entities are called "body parts" in RFC 2045.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart.TextPreamble">
            <summary>
            Gets or sets "preamble" text. Defined in RFC 2046 5.1.1.
            </summary>
            <remarks>Preamble text is text between MIME entiy headers and first boundary.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart.TextEpilogue">
            <summary>
            Gets or sets "epilogue" text. Defined in RFC 2046 5.1.1.
            </summary>
            <remarks>Epilogue text is text after last boundary end.</remarks>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader">
            <summary>
            Implements  multipart "body parts" reader.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.#ctor(LumiSoft.Net.IO.SmartStream,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream from where to read body part.</param>
            <param name="boundary">Boundry ID what separates body parts.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>boundary</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.Next">
            <summary>
            Moves to next "body part". Returns true if moved to next "body part" or false if there are no more parts.
            </summary>
            <returns>Returns true if moved to next "body part" or false if there are no more body parts.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="M:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.TextPreamble">
            <summary>
            Gets "preamble" text. Defined in RFC 2046 5.1.1.
            </summary>
            <remarks>Preamble text is text between MIME entiy headers and first boundary.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.TextEpilogue">
            <summary>
            Gets "epilogue" text. Defined in RFC 2046 5.1.1.
            </summary>
            <remarks>Epilogue text is text after last boundary end.</remarks>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.State">
            <summary>
            This enum specified multipart reader sate.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.State.SeekFirst">
            <summary>
            First boundary must be seeked.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.State.ReadNext">
            <summary>
            Read next boundary. (Method Next must be called to continue next boundary reading)
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.State.InBoundary">
            <summary>
            Active boundary reading pending.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.State.Done">
            <summary>
            All boundraies readed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader._DataLine">
            <summary>
            This class holds readed data line info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader._DataLine.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader._DataLine.AssignFrom(LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP)">
            <summary>
            Assigns data line info from rea line operation.
            </summary>
            <param name="op">Read line operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader._DataLine.LineBuffer">
            <summary>
            Gets line data buffer.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader._DataLine.BytesInBuffer">
            <summary>
            Gets number of bytes used in <b>LineBuffer</b>.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_MultipartAlternative">
            <summary>
            This class represents MIME multipart/alternative body. Defined in RFC 2046 5.1.4.
            </summary>
            <remarks>
            The "multipart/alternative" is intended for use when each of the body parts is an "alternative" version of the same information.
            In general, user agents that compose "multipart/alternative" entities
            must place the body parts in increasing order of preference, that is,
            with the preferred format last.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartAlternative.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartAlternative.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_MultipartDigest">
            <summary>
            This class represents MIME multipart/digest body. Defined in RFC 2046 5.1.5.
            </summary>
            <remarks>
            The "multipart/digest" Content-Type is intended to be used to send collections of messages.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartDigest.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartDigest.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_MultipartDigest.DefaultBodyPartContentType">
            <summary>
            Gets default body part Content-Type. For more info see RFC 2046 5.1.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_MultipartEncrypted">
            <summary>
            This class represents MIME multipart/encrypted body. Defined in rfc 1847.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartEncrypted.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartEncrypted.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_MultipartFormData">
            <summary>
            This class represents MIME multipart/from-data body. Defined in RFC 2046.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartFormData.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartFormData.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_MultipartMixed">
            <summary>
            This class represents MIME multipart/mixed body. Defined in RFC 2046 5.1.3.
            </summary>
            <remarks>
            The "mixed" subtype of "multipart" is intended for use when the body
            parts are independent and need to be bundled in a particular order.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartMixed.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartMixed.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_MultipartParallel">
            <summary>
            This class represents MIME message/parallel bodies.  Defined in RFC 2046 5.1.6.
            </summary>
            <remarks>
            The "parallel" subtype of "multipart" is intended for use when the body
            parts are independent and their order is not important. Parts can be processed parallel.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartParallel.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartParallel.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_MultipartRelated">
            <summary>
            This class represents MIME multipart/related body. Defined in RFC 2387.
            </summary>
            <remarks>
             The Multipart/Related content-type provides a common mechanism for
             representing objects that are aggregates of related MIME body parts.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartRelated.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartRelated.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_MultipartReport">
            <summary>
            This class represents MIME multipart/report body. Defined in RFC 3462.
            </summary>
            <remarks>
            The Multipart/Report Multipurpose Internet Mail Extensions (MIME) content-type is a general "family" or 
            "container" type for electronic mail reports of any kind. The most used type is <b>delivery-status</b>.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartReport.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartReport.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_MultipartSigned">
            <summary>
            This class represents MIME multipart/signed body. Defined in rfc 1847.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartSigned.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartSigned.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>mediaTypedefaultContentTypeb&gt;</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_Provider">
            <summary>
            This class represent MIME entity body provider.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Provider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Provider.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.IO.SmartStream,LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Parses MIME entity body from specified stream.
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="stream">Stream from where to parse entity body.</param>
            <param name="defaultContentType">Default content type.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b>, <b>strean</b> or <b>defaultContentType</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_Text">
            <summary>
            This class represents MIME text/xxx bodies. Defined in RFC 2045.
            </summary>
            <remarks>
            The "text" media type is intended for sending material which is principally textual in form.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Text.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaSubType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Text.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>mediaType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Text.SetText(System.String,System.Text.Encoding,System.String)">
            <summary>
            Sets text.
            </summary>
            <param name="transferEncoding">Content transfer encoding.</param>
            <param name="charset">Charset to use to encode text. If not sure, utf-8 is recommended.</param>
            <param name="text">Text.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>transferEncoding</b>, <b>charset</b> or <b>text</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when body contains not supported Content-Transfer-Encoding.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Text.GetCharset">
            <summary>
            Gets charset from Content-Type. If char set isn't specified, "ascii" is defined as default and it will be returned.
            </summary>
            <returns>Returns content charset.</returns>
            <exception cref="T:System.ArgumentException">Is raised when Content-Type has not supported charset parameter value.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Text.Text">
            <summary>
            Gets body decoded text.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when not supported content-type charset or not supported content-transfer-encoding value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when body contains not supported Content-Transfer-Encoding.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_Unknown">
            <summary>
            This class represents MIME unknown bodies.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Unknown.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Unknown.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>strean</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_Video">
            <summary>
            This class represents MIME video/xxx bodies. Defined in RFC 2046 4.4.
            </summary>
            <remarks>
            A media type of "video" indicates that the body contains a time-
            varying-picture image, possibly with color and coordinated sound.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Video.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Video.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>mediaType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_Encoding_EncodedWord">
            <summary>
            Implements 'encoded-word' encoding. Defined in RFC 2047.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Encoding_EncodedWord.#ctor(LumiSoft.Net.MIME.MIME_EncodedWordEncoding,System.Text.Encoding)">
            <summary>
            Default constructor.
            </summary>
            <param name="encoding">Encoding to use to encode text.</param>
            <param name="charset">Charset to use for encoding. If not sure UTF-8 is strongly recommended.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>charset</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Encoding_EncodedWord.Encode(System.String)">
            <summary>
            Encodes specified text if it contains 8-bit chars, otherwise text won't be encoded.
            </summary>
            <param name="text">Text to encode.</param>
            <returns>Returns encoded text.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Encoding_EncodedWord.Decode(System.String)">
            <summary>
            Decodes specified encoded-word.
            </summary>
            <param name="text">Encoded-word value.</param>
            <returns>Returns decoded text.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Encoding_EncodedWord.MustEncode(System.String)">
            <summary>
            Checks if specified text must be encoded.
            </summary>
            <param name="text">Text to encode.</param>
            <returns>Returns true if specified text must be encoded, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Encoding_EncodedWord.EncodeS(LumiSoft.Net.MIME.MIME_EncodedWordEncoding,System.Text.Encoding,System.Boolean,System.String)">
            <summary>
            Encodes specified text if it contains 8-bit chars, otherwise text won't be encoded.
            </summary>
            <param name="encoding">Encoding to use to encode text.</param>
            <param name="charset">Charset to use for encoding. If not sure UTF-8 is strongly recommended.</param>
            <param name="split">If true, words are splitted after 75 chars.</param>
            <param name="text">Text to encode.</param>
            <returns>Returns encoded text.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>charset</b> or <b>text</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Encoding_EncodedWord.DecodeS(System.String)">
            <summary>
            Decodes non-ascii word with MIME <b>encoded-word</b> method. Defined in RFC 2047 2.
            </summary>
            <param name="word">MIME encoded-word value.</param>
            <returns>Returns decoded word.</returns>
            <remarks>If <b>word</b> is not encoded-word or has invalid syntax, <b>word</b> is leaved as is.</remarks>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>word</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Encoding_EncodedWord.Split">
            <summary>
            Gets or sets if long words(over 75 char) are splitted.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_h_Collection">
            <summary>
            This class represents MIME header fields collection. Defined in RFC 2045.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.#ctor(LumiSoft.Net.MIME.MIME_h_Provider)">
            <summary>
            Default constructor.
            </summary>
            <param name="provider">Header fields provider.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>provider</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.Insert(System.Int32,LumiSoft.Net.MIME.MIME_h)">
            <summary>
            Inserts a new header field into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the item.</param>
            <param name="field">Header field to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.Add(System.String)">
            <summary>
            Parses and adds specified header field to the end of the collection.
            </summary>
            <param name="field">Header field string (Name: value).</param>
            <returns>Retunrs added header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.Add(LumiSoft.Net.MIME.MIME_h)">
            <summary>
            Adds specified header field to the end of the collection.
            </summary>
            <param name="field">Header field to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.Remove(LumiSoft.Net.MIME.MIME_h)">
            <summary>
            Removes specified header field from the collection.
            </summary>
            <param name="field">Header field to remove.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.RemoveAll(System.String)">
            <summary>
            Removes all header fields with the specified name.
            </summary>
            <param name="name">Header field name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.Contains(System.String)">
            <summary>
            Gets if collection has item with the specified name.
            </summary>
            <param name="name">Header field name.</param>
            <returns>Returns true if specified item exists in the collection, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.Contains(LumiSoft.Net.MIME.MIME_h)">
            <summary>
            Gets if collection contains the specified item.
            </summary>
            <param name="field">Header field.</param>
            <returns>Returns true if specified item exists in the collection, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.GetFirst(System.String)">
            <summary>
            Gets first header field with the specified name. returns null if specified header field doesn't exist.
            </summary>
            <param name="name">Header field name.</param>
            <returns>Returns first header field with the specified name. returns null if specified header field doesn't exist.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.ReplaceFirst(LumiSoft.Net.MIME.MIME_h)">
            <summary>
            Replaces first header field with specified name with specified value.
            </summary>
            <param name="field">Hedaer field.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.ToArray">
            <summary>
            Copies header fields to new array.
            </summary>
            <returns>Returns header fields array.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.ToFile(System.String,LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Stores header to the specified file.
            </summary>
            <param name="fileName">File name with optional path.</param>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>fileName</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.ToByte(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header as byte[] data.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <returns>Returns header as byte[] data.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.ToStream(System.IO.Stream,LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Stores header to the specified stream.
            </summary>
            <param name="stream">Stream where to store header.</param>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.ToString">
            <summary>
            Returns MIME header as string.
            </summary>
            <returns>Returns MIME header as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns MIME header as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <returns>Returns MIME header as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.Parse(System.String)">
            <summary>
            Parses MIME header from the specified value.
            </summary>
            <param name="value">MIME header string.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.Parse(LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses MIME header from the specified stream.
            </summary>
            <param name="stream">MIME header stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.Parse(LumiSoft.Net.IO.SmartStream,System.Text.Encoding)">
            <summary>
            Parses MIME header from the specified stream.
            </summary>
            <param name="stream">MIME header stream.</param>
            <param name="encoding">Headers fields reading encoding. If not sure, UTF-8 is recommended.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>encoding</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Collection.IsModified">
            <summary>
            Gets if header has modified since it was loaded.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Collection.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Collection.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>Returns the element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Collection.Item(System.String)">
            <summary>
            Gets header fields with the specified name.
            </summary>
            <param name="name">Header field name.</param>
            <returns>Returns header fields with the specified name.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Collection.FieldsProvider">
            <summary>
            Gets header fields provider.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_h_ContentDisposition">
             <summary>
             Represents "Content-Disposition:" header. Defined in RFC 2183.
             </summary>
             <example>
             <code>
             RFC 2183.
                 In the extended BNF notation of [RFC 822], the Content-Disposition
                 header field is defined as follows:
            
                 disposition := "Content-Disposition" ":" disposition-type *(";" disposition-parm)
            
                 disposition-type := "inline" / "attachment" / extension-token
                                     ; values are not case-sensitive
            
                 disposition-parm := filename-parm 
                                     / creation-date-parm
                                     / modification-date-parm
                                     / read-date-parm
                                     / size-parm
                                     / parameter
            
                 filename-parm := "filename" "=" value
            
                 creation-date-parm := "creation-date" "=" quoted-date-time
             
                 modification-date-parm := "modification-date" "=" quoted-date-time
            
                 read-date-parm := "read-date" "=" quoted-date-time
            
                 size-parm := "size" "=" 1*DIGIT
            
                 quoted-date-time := quoted-string
                                     ; contents MUST be an RFC 822 `date-time'
                                     ; numeric timezones (+HHMM or -HHMM) MUST be used
             </code>
             </example>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ContentDisposition.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="dispositionType">The disposition-type. Known values are in <see cref="T:LumiSoft.Net.MIME.MIME_DispositionTypes">MIME_DispositionTypes</see>.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>dispositionType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ContentDisposition.#ctor">
            <summary>
            Internal parser constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ContentDisposition.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ContentDisposition.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentDisposition.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentDisposition.Name">
            <summary>
            Returns always "Content-Disposition".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentDisposition.DispositionType">
            <summary>
            Gets the disposition-type. Known values are in <see cref="T:LumiSoft.Net.MIME.MIME_DispositionTypes">MIME_DispositionTypes</see>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentDisposition.Parameters">
            <summary>
            Gets Content-Type parameters collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentDisposition.Param_FileName">
            <summary>
            Gets or sets the suggested file name. Value DateTime.MinValue means not specified. Defined in RFC 2183 2.3.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentDisposition.Param_CreationDate">
            <summary>
            Gets or sets the creation date for a file. Value DateTime.MinValue means not specified. Defined in RFC 2183 2.4.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentDisposition.Param_ModificationDate">
            <summary>
            Gets or sets the modification date of a file. Value DateTime.MinValue means not specified. Defined in RFC 2183 2.5.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentDisposition.Param_ReadDate">
            <summary>
            Gets or sets the last read date of a file. Value DateTime.MinValue means not specified. Defined in RFC 2183 2.6.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentDisposition.Param_Size">
            <summary>
            Gets or sets the size of a file. Value -1 means not specified. Defined in RFC 2183 2.7.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_h_ContentType">
             <summary>
             Represents "Content-Type:" header. Defined in RFC 2045 5.1.
             </summary>
             <remarks>
             <code>
             RFC 2045 5.1.
             In the Augmented BNF notation of RFC 822, a Content-Type header field
             value is defined as follows:
            
                 content := "Content-Type" ":" type "/" subtype
                            *(";" parameter)
                            ; Matching of media type and subtype
                            ; is ALWAYS case-insensitive.
            
                 type := discrete-type / composite-type
            
                 discrete-type := "text" / "image" / "audio" / "video" / "application" / extension-token
            
                 composite-type := "message" / "multipart" / extension-token
            
                 extension-token := ietf-token / x-token
            
                 ietf-token := (An extension token defined by a standards-track RFC and registered with IANA.)
            
                 x-token := (The two characters "X-" or "x-" followed, with no intervening white space, by any token)
            
                 subtype := extension-token / iana-token
            
                 iana-token := (A publicly-defined extension token. Tokens of this form must be registered with IANA as specified in RFC 2048.)
            
                 parameter := attribute "=" value
            
                 attribute := token
                              ; Matching of attributes
                              ; is ALWAYS case-insensitive.
            
                 value := token / quoted-string
            
                 token := 1*(any (US-ASCII) CHAR except SPACE, CTLs,or tspecials)
            
                 tspecials :=  "(" / ")" / "&lt;" / "&gt;" / "@" /
                               "," / ";" / ":" / "\" / "
                               "/" / "[" / "]" / "?" / "="
                               ; Must be in quoted-string,
                               ; to use within parameter values
             </code>
             </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ContentType.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">Media type with subtype. For example <b>text/plain</b>.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ContentType.#ctor">
            <summary>
            Internal parser constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ContentType.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ContentType.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentType.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentType.Name">
            <summary>
            Returns always "Content-Type".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentType.Type">
            <summary>
            Gets media type. For example: application,image,text, ... .
            </summary>
            <remarks>The official list of reggistered types are http://www.iana.org/assignments/media-types .</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentType.SubType">
            <summary>
            Gets media sub-type. For example for text/plain, sub-type is 'plain'.
            </summary>
            <remarks>The official list of reggistered types are http://www.iana.org/assignments/media-types .</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentType.TypeWithSubype">
            <summary>
            Gets media type with subtype as Type/SubType. Well known value are in <see cref="T:LumiSoft.Net.MIME.MIME_MediaTypes">MIME_MediaTypes</see>. For example: text/plain.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentType.Parameters">
            <summary>
            Gets Content-Type parameters collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentType.Param_Name">
            <summary>
            Gets or sets Content-Type <b>name</b> parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentType.Param_Charset">
            <summary>
            Gets or sets Content-Type <b>charset</b> parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentType.Param_Boundary">
            <summary>
            Gets or sets Content-Type <b>boundary</b> parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_h_Provider">
            <summary>
            This class represents MIME headers provider.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Provider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Provider.Parse(System.String)">
            <summary>
            Parses specified header field.
            </summary>
            <param name="field">Header field string (Name: value).</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Provider.DefaultHeaderField">
            <summary>
            Gets or sets default header field what is used to reperesent unknown header fields.
            </summary>
            <remarks>This property value value must be based on <see cref="T:LumiSoft.Net.MIME.MIME_h"/> class.</remarks>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Provider.HeaderFields">
            <summary>
            Gets header fields parsers collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_h_Parameter">
            <summary>
            Represents MIME header field parameter.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Parameter.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value. Value null means not specified.</param>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Parameter.IsModified">
            <summary>
            Gets if this header field parameter is modified since it has loaded.
            </summary>
            <remarks>All new added header fields parameters has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Parameter.Name">
            <summary>
            Gets parameter name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Parameter.Value">
            <summary>
            Gets or sets parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_h_ParameterCollection">
            <summary>
            Represents MIME header field parameters collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ParameterCollection.#ctor(LumiSoft.Net.MIME.MIME_h)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner MIME header field.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ParameterCollection.Remove(System.String)">
            <summary>
            Removes specified parametr from the collection.
            </summary>
            <param name="name">Parameter name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ParameterCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ParameterCollection.ToArray">
            <summary>
            Copies header fields parameters to new array.
            </summary>
            <returns>Returns header fields parameters array.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ParameterCollection.ToString">
            <summary>
            Returns header field parameters as string.
            </summary>
            <returns>Returns header field parameters as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ParameterCollection.ToString(System.Text.Encoding)">
            <summary>
            Returns header field parameters as string.
            </summary>
            <param name="charset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field parameters as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ParameterCollection.Parse(System.String)">
            <summary>
            Parses parameters from the specified value.
            </summary>
            <param name="value">Header field parameters string.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ParameterCollection.Parse(LumiSoft.Net.MIME.MIME_Reader)">
            <summary>
            Parses parameters from the specified reader.
            </summary>
            <param name="reader">MIME reader.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>reader</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ParameterCollection.DecodeExtOctet(System.String,System.Text.Encoding)">
            <summary>
            Decodes non-ascii text with MIME <b>ext-octet</b> method. Defined in RFC 2231 7.
            </summary>
            <param name="text">Text to decode,</param>
            <param name="charset">Charset to use.</param>
            <returns>Returns decoded text.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> or <b>charset</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ParameterCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ParameterCollection.IsModified">
            <summary>
            Gets if this header field parameters are modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ParameterCollection.Owner">
            <summary>
            Gets owner MIME header field.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ParameterCollection.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ParameterCollection.Item(System.String)">
            <summary>
            Gets or sets specified header field parameter value. Value null means not specified.
            </summary>
            <param name="name">Header field name.</param>
            <returns>Returns specified header field value or null if specified parameter doesn't exist.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_h_Unparsed">
            <summary>
            This class represent header field what parsing has failed.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Unparsed.#ctor(System.String,System.Exception)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <param name="exception">Parsing error.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Unparsed.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.InvalidOperationException">Is alwyas raised when this mewthod is accsessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Unparsed.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Unparsed.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Unparsed.Name">
            <summary>
            Gets header field name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Unparsed.Value">
            <summary>
            Gets header field value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Unparsed.Exception">
            <summary>
            Gets error happened during parse.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_h_Unstructured">
            <summary>
            This class represents normal unstructured text header field.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Unstructured.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Header field name.</param>
            <param name="value">Header field value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> or <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Unstructured.#ctor">
            <summary>
            Internal parser constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Unstructured.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Unstructured.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Unstructured.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Unstructured.Name">
            <summary>
            Gets header field name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Unstructured.Value">
            <summary>
            Gets or sets header field value.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when when null reference is passed.</exception>
        </member>
        <member name="T:LumiSoft.Net.ParseException">
            <summary>
            This exception is thrown when parse errors are encountered.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.ParseException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.POP3_e_Authenticate">
            <summary>
            This class provides data for <see cref="E:LumiSoft.Net.POP3.Server.POP3_Session.Authenticate"/> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_e_Authenticate.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="user">User name.</param>
            <param name="password">Password.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>user</b> or <b>password</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_e_Authenticate.IsAuthenticated">
            <summary>
            Gets or sets if session is authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_e_Authenticate.User">
            <summary>
            Gets user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_e_Authenticate.Password">
            <summary>
            Gets password.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.POP3_e_DeleteMessage">
            <summary>
            This class provides data for <see cref="E:LumiSoft.Net.POP3.Server.POP3_Session.DeleteMessage"/> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_e_DeleteMessage.#ctor(LumiSoft.Net.POP3.Server.POP3_ServerMessage)">
            <summary>
            Default constructor.
            </summary>
            <param name="message">Message to delete.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>message</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_e_DeleteMessage.Message">
            <summary>
            Gets message info.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.POP3_e_GetMessagesInfo">
            <summary>
            This class provides data for <see cref="E:LumiSoft.Net.POP3.Server.POP3_Session.GetMessagesInfo"/> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_e_GetMessagesInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_e_GetMessagesInfo.Messages">
            <summary>
            Gets POP3 messages info collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.POP3_e_GetMessageStream">
            <summary>
            This class provides data for <see cref="E:LumiSoft.Net.POP3.Server.POP3_Session.GetMessageStream"/> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_e_GetMessageStream.#ctor(LumiSoft.Net.POP3.Server.POP3_ServerMessage)">
            <summary>
            Default constructor.
            </summary>
            <param name="message">Message which top data to get.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>message</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_e_GetMessageStream.Message">
            <summary>
            Gets message info.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_e_GetMessageStream.CloseMessageStream">
            <summary>
            Gets or sets if message stream is closed after message sending has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_e_GetMessageStream.MessageStream">
            <summary>
            Gets or sets message stream.
            </summary>
            <remarks>POP3 server starts reading message from stream current position and reads while end of stream reached.</remarks>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.POP3_e_GetTopOfMessage">
            <summary>
            This class provides data for <see cref="E:LumiSoft.Net.POP3.Server.POP3_Session.GetTopOfMessage"/> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_e_GetTopOfMessage.#ctor(LumiSoft.Net.POP3.Server.POP3_ServerMessage,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="message">Message which top data to get.</param>
            <param name="lines">Number of message-body lines to get.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>message</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_e_GetTopOfMessage.Message">
            <summary>
            Gets message info.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_e_GetTopOfMessage.LineCount">
            <summary>
            Gets number message body lines should be included.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_e_GetTopOfMessage.Data">
            <summary>
            Gets or sets top of message data.
            </summary>
            <remarks>This value should contain message header + number of <b>lineCount</b> body lines.</remarks>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.POP3_e_Started">
            <summary>
            This class provides data for <b cref="E:LumiSoft.Net.POP3.Server.POP3_Session.Started">SMTP_Session.Started</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_e_Started.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="response">POP3 server response.</param>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_e_Started.Response">
            <summary>
            Gets or sets POP3 server response.
            </summary>
            <remarks>Response also MUST contain response code(+OK / -ERR). For example: "-ERR Session rejected."</remarks>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.POP3_Server">
            <summary>
            This class implements POP3 server. Defined RFC 1939.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.OnMaxConnectionsExceeded(LumiSoft.Net.POP3.Server.POP3_Session)">
            <summary>
            Is called when new incoming session and server maximum allowed connections exceeded.
            </summary>
            <param name="session">Incoming session.</param>
            <remarks>This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.OnMaxConnectionsPerIPExceeded(LumiSoft.Net.POP3.Server.POP3_Session)">
            <summary>
            Is called when new incoming session and server maximum allowed connections per connected IP exceeded.
            </summary>
            <param name="session">Incoming session.</param>
            <remarks>This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Server.GreetingText">
            <summary>
            Gets or sets server greeting text.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Server.MaxBadCommands">
            <summary>
            Gets or sets how many bad commands session can have before it's terminated. Value 0 means unlimited.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.POP3_ServerMessage">
            <summary>
            This class represents POP3 server message.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_ServerMessage.#ctor(System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="uid">Message UID value.</param>
            <param name="size">Message size in bytes.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>uid</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_ServerMessage.#ctor(System.String,System.Int32,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="uid">Message UID value.</param>
            <param name="size">Message size in bytes.</param>
            <param name="tag">User data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>uid</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_ServerMessage.SetIsMarkedForDeletion(System.Boolean)">
            <summary>
            Sets IsMarkedForDeletion proerty value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_ServerMessage.UID">
            <summary>
            Gets message UID. NOTE: Before accessing this property, check that server supports UIDL command.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_ServerMessage.Size">
            <summary>
            Gets message size in bytes.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_ServerMessage.IsMarkedForDeletion">
            <summary>
            Gets if message is marked for deletion.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_ServerMessage.Tag">
            <summary>
            Gets or sets user data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_ServerMessage.SequenceNumber">
            <summary>
            Gets message 1 based sequence number.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.POP3_Session">
            <summary>
            This class implements POP3 session. Defined RFC 1939.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.Start">
            <summary>
            Starts session processing.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.OnError(System.Exception)">
            <summary>
            Is called when session has processing error.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.OnTimeout">
            <summary>
            This method is called when specified session times out.
            </summary>
            <remarks>
            This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.BeginReadCmd">
            <summary>
            Starts reading incoming command from the connected client.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.ProcessCmd(LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP)">
            <summary>
            Completes command reading operation.
            </summary>
            <param name="op">Operation.</param>
            <returns>Returns true if server should start reading next command.</returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.WriteLine(System.String)">
            <summary>
            Sends and logs specified line to connected host.
            </summary>
            <param name="line">Line to send.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.LogAddText(System.String)">
            <summary>
            Logs specified text.
            </summary>
            <param name="text">text to log.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.OnStarted(System.String)">
            <summary>
            Raises <b>Started</b> event.
            </summary>
            <param name="reply">Default POP3 server reply.</param>
            <returns>Returns event args.</returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.OnAuthenticate(System.String,System.String)">
            <summary>
            Raises <b>Authenticate</b> event.
            </summary>
            <param name="user">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns event args.</returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.OnGetMessagesInfo">
            <summary>
            Raises <b>GetMessagesInfo</b> event.
            </summary>
            <returns>Returns event args.</returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.OnGetTopOfMessage(LumiSoft.Net.POP3.Server.POP3_ServerMessage,System.Int32)">
            <summary>
            Raises <b>GetTopOfMessage</b> event.
            </summary>
            <param name="message">Message which top data to get.</param>
            <param name="lines">Number of message-body lines to get.</param>
            <returns>Returns event args.</returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.OnGetMessageStream(LumiSoft.Net.POP3.Server.POP3_ServerMessage)">
            <summary>
            Raises <b>GetMessageStream</b> event.
            </summary>
            <param name="message">Message stream to get.</param>
            <returns>Returns event arguments.</returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.OnDeleteMessage(LumiSoft.Net.POP3.Server.POP3_ServerMessage)">
            <summary>
            Raises <b>DeleteMessage</b> event.
            </summary>
            <param name="message">Message to delete.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.OnReset">
            <summary>
            Raises <b>Reset</b> event.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Session.Server">
            <summary>
            Gets session owner SMTP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Session.Authentications">
            <summary>
            Gets supported SASL authentication methods collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Session.BadCommands">
            <summary>
            Gets number of bad commands happened on SMTP session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Session.AuthenticatedUserIdentity">
            <summary>
            Gets authenticated user identity or null if user has not authenticated.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Session.Started">
            <summary>
            Is raised when session has started processing and needs to send +OK greeting or -ERR error resposne to the connected client.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Session.Authenticate">
            <summary>
            This event is raised when session needs to authenticate session using USER/PASS POP3 authentication.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Session.GetMessagesInfo">
            <summary>
            This event is raised when session needs to get mailbox messsages info.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Session.GetTopOfMessage">
            <summary>
            This event is raised when session needs to get top of the specified message data.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Session.GetMessageStream">
            <summary>
            This event is raised when session needs to get specified message stream.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Session.DeleteMessage">
            <summary>
            This event is raised when session needs to delete specified message.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Session.Reset">
            <summary>
            This event is raised when session is reset by remote user.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.BalanceMode">
            <summary>
            This enum specified balance mode.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.BalanceMode.LoadBalance">
            <summary>
            Operation is load balanched by all workers.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.BalanceMode.FailOver">
            <summary>
            Operation will be handed over to next worker, if last one fails.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.EventArgs`1">
            <summary>
            This class universal event arguments for transporting single value.
            </summary>
            <typeparam name="T">Event data.</typeparam>
        </member>
        <member name="M:LumiSoft.Net.EventArgs`1.#ctor(`0)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Event data.</param>
        </member>
        <member name="P:LumiSoft.Net.EventArgs`1.Value">
            <summary>
            Gets event data.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ExceptionEventArgs">
            <summary>
            This class provides data for error events and methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Default constructor.
            </summary>
            <param name="exception">Exception.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>exception</b> is null reference value.</exception>
        </member>
        <member name="P:LumiSoft.Net.ExceptionEventArgs.Exception">
            <summary>
            Gets exception.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.HostEndPoint">
            <summary>
            Represents a network endpoint as an host(name or IP address) and a port number.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.HostEndPoint.#ctor(System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">The port number associated with the host. Value -1 means port not specified.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>host</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.HostEndPoint.#ctor(System.Net.IPEndPoint)">
            <summary>
            Default constructor.
            </summary>
            <param name="endPoint">Host IP end point.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>endPoint</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.HostEndPoint.Parse(System.String)">
            <summary>
            Parses HostEndPoint from the specified string.
            </summary>
            <param name="value">HostEndPoint value.</param>
            <returns>Returns parsed HostEndPoint value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.HostEndPoint.Parse(System.String,System.Int32)">
            <summary>
            Parses HostEndPoint from the specified string.
            </summary>
            <param name="value">HostEndPoint value.</param>
            <param name="defaultPort">If port isn't specified in value, specified port will be used.</param>
            <returns>Returns parsed HostEndPoint value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.HostEndPoint.ToString">
            <summary>
            Returns HostEndPoint as string.
            </summary>
            <returns>Returns HostEndPoint as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.HostEndPoint.IsIPAddress">
            <summary>
            Gets if <b>Host</b> is IP address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.HostEndPoint.Host">
            <summary>
            Gets host name or IP address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.HostEndPoint.Port">
            <summary>
            Gets the port number of the endpoint. Value -1 means port not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.Base64Stream">
            <summary>
            This class implements base64 encoder/decoder. Defined in RFC 4648.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream which to encode/decode.</param>
            <param name="owner">Specifies if Base64Stream is owner of <b>stream</b>.</param>
            <param name="addLineBreaks">Specifies if encoder inserts CRLF after each 76 bytes.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.#ctor(System.IO.Stream,System.Boolean,System.Boolean,System.IO.FileAccess)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream which to encode/decode.</param>
            <param name="owner">Specifies if Base64Stream is owner of <b>stream</b>.</param>
            <param name="addLineBreaks">Specifies if encoder inserts CRLF after each 76 bytes.</param>
            <param name="access">This stream access mode.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.Dispose">
            <summary>
            Celans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="M:LumiSoft.Net.IO.Base64Stream.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes a sequence of bytes, writes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this.Finish has been called and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.Finish">
            <summary>
            Completes encoding. Call this method if all data has written and no more data. 
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.Base64Stream.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.Base64Stream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.Base64Stream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.Base64Stream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.Base64Stream.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.Base64Stream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.IO.LineReader">
            <summary>
            This class implements "line" reader, LF and CRLF lines are supported.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.LineReader.#ctor(System.IO.Stream,System.Boolean,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream from where to read lines.</param>
            <param name="owner">Specifies if <b>LineReader</b> is owner of <b>stream</b>. 
            <param name="bufferSize">Read buffer size, value 1 means no buffering.</param>
            If this value is true, closing reader will close <b>stream</b>.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.LineReader.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.LineReader.ReadLine">
            <summary>
            Reads line from source stream. Returns null if end of stream(EOS) reached.
            </summary>
            <returns>Returns readed line or null if end of stream reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.LineReader.ReadLine(System.Byte[],System.Int32,System.Int32,LumiSoft.Net.IO.SizeExceededAction)">
            <summary>
            Reads binary line and stores it to the specified buffer.
            </summary>
            <param name="buffer">Buffer where to store line data.</param>
            <param name="offset">Start offset in the buffer.</param>
            <param name="count">Maximum number of bytes store to the buffer.</param>
            <param name="exceededAction">Specifies how reader acts when line buffer too small.</param>
            <returns>Returns number of bytes stored to <b>buffer</b> or -1 if end of stream reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Is raised when line is bigger than <b>buffer</b> can store.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.LineReader.ReadLine(System.Byte[],System.Int32,System.Int32,LumiSoft.Net.IO.SizeExceededAction,System.Int32@)">
            <summary>
            Reads binary line and stores it to the specified buffer.
            </summary>
            <param name="buffer">Buffer where to store line data.</param>
            <param name="offset">Start offset in the buffer.</param>
            <param name="count">Maximum number of bytes store to the buffer.</param>
            <param name="exceededAction">Specifies how reader acts when line buffer too small.</param>
            <param name="rawBytesReaded">Gets raw number of bytes readed from source.</param>
            <returns>Returns number of bytes stored to <b>buffer</b> or -1 if end of stream reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Is raised when line is bigger than <b>buffer</b> can store.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.LineReader.SyncStream">
            <summary>
            Sets stream position to the place we have consumed from stream and clears buffer data.
            For example if we have 10 byets in buffer, stream position is actually +10 bigger than 
            we readed, the result is that stream.Position -= 10 and buffer is cleared.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when source stream won't support seeking.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.LineReader.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.LineReader.Stream">
            <summary>
            Gets source stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.LineReader.IsStreamOwner">
            <summary>
            Gets if line reader is <b>Stream</b> owner.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.LineReader.Charset">
            <summary>
            Gets or sets charset to us for deocoding bytes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.LineReader.AvailableInBuffer">
            <summary>
            Gets number of bytes in read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.LineReader.CanSyncStream">
            <summary>
            Gets if line reader can synchronize source stream to actual readed data position.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.MultiStream">
            <summary>
            This class combines multiple stream into one stream for reading.
            The most common usage for that stream is when you need to insert some data to the beginning of some stream.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.AppendStream(System.IO.Stream)">
            <summary>
            Appends this stream to read queue.
            </summary>
            <param name="stream">Stream to add.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="M:LumiSoft.Net.IO.MultiStream.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.MultiStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.MultiStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.MultiStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.MultiStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when one of the source streams won't support <b>Length</b> property.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.MultiStream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.IO.PartialStream">
            <summary>
            Implements read-only stream what operates on specified range of source stream
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.PartialStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="start">Zero based start positon in source stream.</param>
            <param name="length">Length of stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.PartialStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.PartialStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.PartialStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.PartialStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.PartialStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.PartialStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.PartialStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.PartialStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.PartialStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.PartialStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="M:LumiSoft.Net.IO.PartialStream.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.PartialStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream">
            <summary>
            This class is wrapper to normal stream, provides most needed stream methods which are missing from normal stream.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream to wrap.</param>
            <param name="owner">Specifies if SmartStream is owner of <b>stream</b>.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BeginReadLine(System.Byte[],System.Int32,System.Int32,LumiSoft.Net.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous line reading from the source stream.
            </summary>
            <param name="buffer">Buffer where to store readed line data.</param>
            <param name="offset">The location in <b>buffer</b> to begin storing the data.</param>
            <param name="maxCount">Maximum number of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An IAsyncResult that represents the asynchronous call.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.EndReadLine(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous line reading.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
            <returns>Returns number of bytes stored to <b>buffer</b>. Returns -1 if no more data, end of stream reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndReadLine</b> has already been called for specified <b>asyncResult</b>.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Is raised when <b>maxCount</b> value is exceeded.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLine(LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP,System.Boolean)">
            <summary>
            Begins line reading.
            </summary>
            <param name="op">Read line opeartion.</param>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BeginReadHeader(System.IO.Stream,System.Int32,LumiSoft.Net.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous header reading from the source stream.
            </summary>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies action what is done if <b>maxCount</b> number of bytes has exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An IAsyncResult that represents the asynchronous call.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.EndReadHeader(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous header reading.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
            <returns>Returns number of bytes stored to <b>storeStream</b>.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndReadLine</b> has already been called for specified <b>asyncResult</b>.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Is raised when source stream has too big line.</exception>
            <exception cref="T:LumiSoft.Net.IO.DataSizeExceededException">Is raised when reading exceeds <b>maxCount</b> specified value.</exception>
            <exception cref="T:LumiSoft.Net.IO.IncompleteDataException">Is raised when source stream closed before header-terminator reached.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadHeader(System.IO.Stream,System.Int32,LumiSoft.Net.IO.SizeExceededAction)">
            <summary>
            Reads header from stream and stores to the specified <b>storeStream</b>.
            </summary>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies action what is done if <b>maxCount</b> number of bytes has exceeded.</param>
            <returns>Returns how many bytes readed from source stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Is raised when source stream has too big line.</exception>
            <exception cref="T:LumiSoft.Net.IO.DataSizeExceededException">Is raised when reading exceeds <b>maxCount</b> specified value.</exception>
            <exception cref="T:LumiSoft.Net.IO.IncompleteDataException">Is raised when source stream closed before header-terminator reached.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminated(LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP,System.Boolean)">
            <summary>
            Begins period-terminated data reading.
            </summary>
            <param name="op">Read period terminated opeartion.</param>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BeginReadFixedCount(System.IO.Stream,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous data reading from the source stream.
            </summary>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="count">Number of bytes to read.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An IAsyncResult that represents the asynchronous call.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.EndReadFixedCount(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous data reading.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndReadToStream</b> has already been called for specified <b>asyncResult</b>.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadFixedCount(System.IO.Stream,System.Int64)">
            <summary>
            Reads specified number of bytes from source stream and writes to the specified stream.
            </summary>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="count">Number of bytes to read.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadFixedCountString(System.Int32)">
            <summary>
            Reads specified number of bytes from source stream and converts it to string with current encoding.
            </summary>
            <param name="count">Number of bytes to read.</param>
            <returns>Returns readed data as string.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadAll(System.IO.Stream)">
            <summary>
            Reads all data from source stream and stores to the specified stream.
            </summary>
            <param name="stream">Stream where to store readed data.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.Peek">
            <summary>
            Returns the next available character but does not consume it.
            </summary>
            <returns>An integer representing the next character to be read, or -1 if no more characters are available.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.Write(System.String)">
            <summary>
            Writes specified string data to stream.
            </summary>
            <param name="data">Data to write.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WriteLine(System.String)">
            <summary>
            Writes specified line to stream. If CRLF is missing, it will be added automatically to line data.
            </summary>
            <param name="line">Line to send.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>line</b> is null.</exception>
            <returns>Returns number of raw bytes written.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WriteStream(System.IO.Stream)">
            <summary>
            Writes all source <b>stream</b> data to stream.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WriteStream(System.IO.Stream,System.Int64)">
            <summary>
            Writes specified number of bytes from source <b>stream</b> to stream.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <param name="count">Number of bytes to write.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when <b>count</b> argument has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WritePeriodTerminated(System.IO.Stream)">
            <summary>
            Reads all data from the source <b>stream</b> and writes it to stream. Period handling and period terminator is added as required.
            </summary>
            <param name="stream">Source stream which data to write to stream.</param>
            <returns>Returns number of bytes written to source stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Is raised when <b>stream</b> has too big line.</exception>        
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WriteHeader(System.IO.Stream)">
            <summary>
            Reads header from source <b>stream</b> and writes it to stream.
            </summary>
            <param name="stream">Stream from where to read header.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read operation.
            </summary>
            <param name="buffer">The buffer to read the data into.</param>
            <param name="offset">The byte offset in buffer at which to begin writing data read from the stream.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An IAsyncResult that represents the asynchronous read, which could still be pending.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.EndRead(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous data reading.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>The total number of bytes read into the <b>buffer</b>. This can be less than the number of bytes requested 
            if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BufferRead(System.Boolean,LumiSoft.Net.IO.SmartStream.BufferCallback)">
            <summary>
            Begins buffering read-buffer.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <param name="asyncCallback">The callback that is executed when asynchronous operation completes. 
            If operation completes synchronously, no callback called.</param>
            <returns>
            Returns true if the I/O operation is pending. The BufferReadAsyncEventArgs.Completed event on the context parameter will be raised upon completion of the operation. 
            Returns false if the I/O operation completed synchronously. The BufferReadAsyncEventArgs.Completed event on the context parameter will not be raised and the context object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation. 
            </returns>
            <exception cref="T:System.InvalidOperationException">Is raised when there is data in read buffer and this method is called.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.SourceStream">
            <summary>
            Gets this stream underlying stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.IsOwner">
            <summary>
            Gets if SmartStream is owner of source stream. This property affects like closing this stream will close SourceStream if IsOwner true.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.LastActivity">
            <summary>
            Gets the last time when data was read or written.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BytesReaded">
            <summary>
            Gets how many bytes are readed through this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BytesWritten">
            <summary>
            Gets how many bytes are written through this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BytesInReadBuffer">
            <summary>
            Gets number of bytes in read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.Encoding">
            <summary>
            Gets or sets string related methods default encoding.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation">
            <summary>
            This class implements asynchronous line reading.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.#ctor(LumiSoft.Net.IO.SmartStream,System.Byte[],System.Int32,System.Int32,LumiSoft.Net.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="buffer">Buffer where to store data.</param>
            <param name="offset">The location in <b>buffer</b> to begin storing the data.</param>
            <param name="maxCount">Maximum number of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b>,<b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.DoLineReading">
            <summary>
            Does line reading.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.Buffer">
            <summary>
            Gets store buffer.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.BytesReaded">
            <summary>
            Gets number of bytes readed from source stream.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>Buffer</b>.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation">
            <summary>
            This class implements asynchronous line-based terminated data reader, where terminator is on line itself.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.#ctor(LumiSoft.Net.IO.SmartStream,System.String,System.IO.Stream,System.Int64,LumiSoft.Net.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="terminator">Data terminator.</param>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b>,<b>terminator</b> or <b>storeStream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.ReadLine_Completed(System.IAsyncResult)">
            <summary>
            This method is called when asyynchronous line reading has completed.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.Terminator">
            <summary>
            Gets terminator.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>storeStream</b>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.Exception">
            <summary>
            Gets exception happened on asynchronous operation. Returns null if operation was successfull.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation">
            <summary>
            This class implements asynchronous read to stream data reader.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.#ctor(LumiSoft.Net.IO.SmartStream,System.IO.Stream,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="count">Number of bytes to read from source stream.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> or <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.DoDataReading">
            <summary>
            Does data reading.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>storeStream</b>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.Exception">
            <summary>
            Gets exception happened on asynchronous operation. Returns null if operation was successfull.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation">
            <summary>
            This class implements asynchronous data reader.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.#ctor(LumiSoft.Net.IO.SmartStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="buffer">Buffer where to store data.</param>
            <param name="offset">The location in <b>buffer</b> to begin storing the data.</param>
            <param name="maxSize">Maximum number of bytes to read.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.DoRead">
            <summary>
            Does asynchronous data reading.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.Buffer">
            <summary>
            Gets store buffer.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>Buffer</b>.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP">
            <summary>
            This class implements read line operation.
            </summary>
            <remarks>This class can be reused on multiple calls of <see cref="M:LumiSoft.Net.IO.SmartStream.ReadLine(LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP,System.Boolean)">SmartStream.ReadLine</see> method.</remarks>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.#ctor(System.Byte[],LumiSoft.Net.IO.SizeExceededAction)">
            <summary>
            Default constructor.
            </summary>
            <param name="buffer">Line buffer.</param>
            <param name="exceededAction">Specifies how line-reader behaves when maximum line size exceeded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.Start(System.Boolean,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Starts reading line.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <param name="stream">Owner SmartStream.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.DoLineReading(System.Boolean)">
            <summary>
            Starts/continues line reading.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <returns>Returns true if line reading completed.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.SetInfo(System.Int32,System.Exception)">
            <summary>
            Sets specified field values.
            </summary>
            <param name="bytesInBuffer">Number of bytes in buffer.</param>
            <param name="exception">Exception.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.SizeExceededAction">
            <summary>
            Gets line size exceeded action.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.Buffer">
            <summary>
            Gets line buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.BytesInBuffer">
            <summary>
            Gets number of bytes stored in the buffer. Ending line-feed characters included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.LineBytesInBuffer">
            <summary>
            Gets number of line data bytes stored in the buffer. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.LineAscii">
            <summary>
            Gets line as ASCII string. Returns null if EOS(end of stream) reached. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.LineUtf8">
            <summary>
            Gets line as UTF-8 string. Returns null if EOS(end of stream) reached. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.LineUtf32">
            <summary>
            Gets line as UTF-32 string. Returns null if EOS(end of stream) reached. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.Error">
            <summary>
            Gets error occured during asynchronous operation. Value null means no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.Completed">
            <summary>
            Is raised when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP">
            <summary>
            This class implements read period-terminated operation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.#ctor(System.IO.Stream,System.Int64,LumiSoft.Net.IO.SizeExceededAction)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream wehre to sore readed data.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies how period-terminated reader behaves when <b>maxCount</b> exceeded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Start(LumiSoft.Net.IO.SmartStream)">
            <summary>
            Starts period-terminated data reading.
            </summary>
            <param name="stream">Owner SmartStream.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.m_pReadLineOP_Completed(System.Object,LumiSoft.Net.EventArgs{LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP})">
            <summary>
            Is called when asynchronous line reading has completed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.DoRead">
            <summary>
            Continues period-terminated reading.
            </summary>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.ProcessReadedLine">
            <summary>
            Processes readed line.
            </summary>
            <returns>Returns true if read period-terminated operation has completed.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Stream">
            <summary>
            Gets stream where period terminated data has stored.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.BytesStored">
            <summary>
            Gets number of bytes stored to <see cref="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Stream">Stream</see> stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.LinesStored">
            <summary>
            Gets number of lines stored to <see cref="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Stream">Stream</see> stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Error">
            <summary>
            Gets error occured during asynchronous operation. Value null means no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Completed">
            <summary>
            Is raised when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP">
            <summary>
            This class implements asynchronous read buffering.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.#ctor(LumiSoft.Net.IO.SmartStream)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.Start(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Starts asynchronous operation.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <param name="buffer">Buffer where to store readed data.</param>
            <param name="count">Maximum number of bytes to read.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <returns>Returns true if operation completed synchronously, false if asynchronous operation pending.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.ReleaseEvents">
            <summary>
            Releases all events attached to this class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.Buffer">
            <summary>
            Gets read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.BytesInBuffer">
            <summary>
            Gets number of bytes stored in read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.Error">
            <summary>
            Gets error occured during asynchronous operation. Value null means no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.Completed">
            <summary>
            Is raised when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Log.WriteLogEventArgs">
            <summary>
            This class provides data for <b>Logger.WriteLog</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log.WriteLogEventArgs.#ctor(LumiSoft.Net.Log.LogEntry)">
            <summary>
            Default constructor.
            </summary>
            <param name="logEntry">New log entry.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>logEntry</b> is null.</exception>
        </member>
        <member name="P:LumiSoft.Net.Log.WriteLogEventArgs.LogEntry">
            <summary>
            Gets new log entry.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_DispositionTypes">
            <summary>
            This class holds MIME content disposition types. Defined in RFC 2183.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_DispositionTypes.Inline">
            <summary>
            A bodypart should be marked `inline' if it is intended to be displayed automatically upon display of the message. 
            Inline bodyparts should be presented in the order in which they occur, subject to the normal semantics of multipart messages.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_DispositionTypes.Attachment">
            <summary>
            Bodyparts can be designated `attachment' to indicate that they are separate from the main body of the mail message, 
            and that their display should not be automatic, but contingent upon some further action of the user.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_h_Received">
             <summary>
             Represents "Received:" header. Defined in RFC 5321 4.4.
             </summary>
             <remarks>
             <code>
             RFC 5321 4.4.
                 Time-stamp-line = "Received:" FWS Stamp CRLF
                 
                 Stamp           = From-domain By-domain Opt-info [CFWS] ";" FWS date-time
                                 ; where "date-time" is as defined in RFC 5322 [4]
                                 ; but the "obs-" forms, especially two-digit
                                 ; years, are prohibited in SMTP and MUST NOT be used.
                                 
                 From-domain     = "FROM" FWS Extended-Domain
            
                 By-domain       = CFWS "BY" FWS Extended-Domain
            
                 Extended-Domain = Domain / ( Domain FWS "(" TCP-info ")" ) / ( address-literal FWS "(" TCP-info ")" )
            
                 TCP-info        = address-literal / ( Domain FWS address-literal )
                                 ; Information derived by server from TCP connection not client EHLO.
            
                 Opt-info        = [Via] [With] [ID] [For] [Additional-Registered-Clauses]
            
                 Via             = CFWS "VIA" FWS Link
            
                 With            = CFWS "WITH" FWS Protocol
            
                 ID              = CFWS "ID" FWS ( Atom / msg-id )
                                 ; msg-id is defined in RFC 5322 [4]
            
                 For            = CFWS "FOR" FWS ( Path / Mailbox )
                 
                 Additional-Registered-Clauses  = CFWS Atom FWS String
            
                 Link           = "TCP" / Addtl-Link
            
                 Addtl-Link     = Atom
                 
                 Protocol       = "ESMTP" / "SMTP" / Attdl-Protocol
                 
                 Mailbox        = Local-part "@" ( Domain / address-literal )
             </code>
             </remarks>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_Received.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Default constructor.
            </summary>
            <param name="from">Host from where message was received.</param>
            <param name="by">Host name what received message.</param>
            <param name="time">Date time when message was received.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>from</b> or <b>by</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_Received.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Sender: john.doe@domain.com'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_Received.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Received.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Received.Name">
            <summary>
            Returns always "Received".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Received.From">
            <summary>
            Gets or sets host from where message was received.
            </summary>
            <remarks>Normally this is just EHLO/HELO host name what client reported to SMTP server.</remarks>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Received.From_TcpInfo">
            <summary>
            Gets or sets From TCP-Info value. Value null means not specified.
            </summary>
            <remarks>This value is message sender host IP and optional dns host name.
            This value is based on server connection info, not client reported info(EHLO/HELO).
            </remarks>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Received.By">
            <summary>
            Gets or sets host name what received message.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Received.By_TcpInfo">
            <summary>
            Gets or sets By TCP-Info value. Value null means not specified.
            </summary>
            <remarks>RFC defines it, but i don't see any point about that value.</remarks>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Received.Via">
            <summary>
            Gets or sets non-internet transport. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Received.With">
            <summary>
            Gets or sets receiving protocol. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Received.ID">
            <summary>
            Gets or sets ID value. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Received.For">
            <summary>
            Gets or sets mailbox for who message was received. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Received.Time">
            <summary>
            Gets or sets time when message was received.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_MediaTypes">
            <summary>
            This class holds well known Content-Type header field media types. For example: text/plain, application/octet-stream.
            Full IANA registered list can be found from: http://www.iana.org/assignments/media-types.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_MediaTypes.Application">
            <summary>
            This class holds well-known application/xxx media types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Application.octet_stream">
            <summary>
            "application/octet-stream". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Application.pdf">
            <summary>
            "application/pdf". Defined in RFC 3778.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Application.sdp">
            <summary>
            "application/sdp". Defined in RFC 4566.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Application.xml">
            <summary>
            "application/xml". Defined RFC 3023.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Application.zip">
            <summary>
            "application/zip". Defined in RFC 4566.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Application.x_pkcs7_signature">
            <summary>
            "application/x-pkcs7-signature". Defined in RFC 2311,2633.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_MediaTypes.Image">
            <summary>
            This class holds well-known image/xxx media types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Image.gif">
            <summary>
            "image/gif".
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Image.jpeg">
            <summary>
            "image/jpeg".
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Image.tiff">
            <summary>
            "image/tiff".
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_MediaTypes.Text">
            <summary>
            This class holds well-known text/xxx media types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Text.calendar">
            <summary>
            "text/calendar". Defined in RFC 2445.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Text.css">
            <summary>
            "text/css". Defined in RFC 2854
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Text.html">
            <summary>
            "text/html". Defined in RFC 2854.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Text.plain">
            <summary>
            "text/plain". Defined in RFC 2646,2046.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Text.rfc822_headers">
            <summary>
            "text/rfc822-headers". Defined in RFC 1892.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Text.richtext">
            <summary>
            "text/richtext". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Text.xml">
            <summary>
            "text/xml". Defined in RFC 3023.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_MediaTypes.Multipart">
            <summary>
            This class holds well-known multipart/xxx media types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Multipart.alternative">
            <summary>
            "multipart/alternative". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Multipart.digest">
            <summary>
            "multipart/digest". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Multipart.encrypted">
            <summary>
            "multipart/digest". Defined in RFC 1847.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Multipart.form_data">
            <summary>
            "multipart/form-data". Defined in RFC 2388.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Multipart.mixed">
            <summary>
            "multipart/mixed". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Multipart.parallel">
            <summary>
            "multipart/parallel". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Multipart.related">
            <summary>
            "multipart/related". Defined in RFC 2387.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Multipart.report">
            <summary>
            "multipart/report". Defined in RFC 1892.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Multipart.signed">
            <summary>
            "multipart/signed". Defined in RFC 1847.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Multipart.voice_message">
            <summary>
            "multipart/voice-message". Defined in RFC 2421,2423.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_MediaTypes.Message">
            <summary>
            This class holds well-known message/xxx media types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Message.rfc822">
            <summary>
            "message/rfc822". 
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Message.disposition_notification">
            <summary>
            "message/disposition-notification". 
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Message.delivery_status">
            <summary>
            "message/delivery-status". Defined in RFC 3464.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_Message">
            <summary>
            This class represent electronic mail message. Defined in RFC 5322.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_Message">
            <summary>
            Represents a MIME message. Defined in RFC 2045 2.3.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_Entity">
            <summary>
            Represents a MIME entity. Defined in RFC 2045 2.4.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Entity.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Entity.Dispose">
            <summary>
            Cleans up any resources being used. This method is thread-safe.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Entity.ToFile(System.String,LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Stores MIME entity to the specified file.
            </summary>
            <param name="file">File name with path where to store MIME entity.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Entity.ToStream(System.IO.Stream,LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Store MIME enity to the specified stream.
            </summary>
            <param name="stream">Stream where to store MIME entity. Storing starts form stream current position.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Entity.ToString">
            <summary>
            Returns MIME entity as string.
            </summary>
            <returns>Returns MIME entity as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Entity.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns MIME entity as string.
            </summary>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <returns>Returns MIME entity as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Entity.ToByte(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns MIME entity as byte[].
            </summary>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <returns>Returns MIME entity as byte[].</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Entity.Parse(LumiSoft.Net.IO.SmartStream,System.Text.Encoding,LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Parses MIME entiry from the specified stream.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="headerEncoding">Header reading encoding. If not sure UTF-8 is recommended.</param>
            <param name="defaultContentType">Default content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>,<b>headerEncoding</b> or <b>defaultContentType</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Entity.SetParent(LumiSoft.Net.MIME.MIME_Entity)">
            <summary>
            Sets MIME entity parent entity.
            </summary>
            <param name="parent">Parent entity.</param>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.IsModified">
            <summary>
            Gets if this entity is modified since it has loaded.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.Parent">
            <summary>
            Gets the parent entity of this entity, returns null if this is the root entity.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.Header">
            <summary>
            Gets MIME entity header field collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.MimeVersion">
            <summary>
            Gets or sets MIME version number. Value null means that header field does not exist. Normally this value is 1.0. Defined in RFC 2045 section 4.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>An indicator that this message is formatted according to the MIME
            standard, and an indication of which version of MIME is used.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.ContentID">
            <summary>
            Gets or sets content body part ID. Value null means that header field does not exist. Defined in RFC 2045 7.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Specifies a Unique ID for one MIME body part of the content of a message.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.ContentDescription">
            <summary>
            Gets or sets description of message body part. Value null means that header field does not exist. Defined in RFC 2045 8.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Description of a particular body part of a message; for example, a caption for an image body part.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.ContentTransferEncoding">
            <summary>
            Gets or sets content transfer encoding. Value null means that header field does not exist. 
            RFC defined values are in <see cref="T:LumiSoft.Net.MIME.MIME_TransferEncodings">MIME_TransferEncodings</see>. Defined in RFC 2045 6.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Coding method used in a MIME message body part.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.ContentType">
            <summary>
            Gets or sets MIME content type. Value null means that header field does not exist. Defined in RFC 2045 5.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.ContentBase">
            <summary>
            Gets or sets base to be used for resolving relative URIs within this content part. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Base to be used for resolving relative URIs within this content part. See also Content-Location.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.ContentLocation">
            <summary>
            Gets or sets URI for retrieving a body part. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>URI using which the content of this body-part part was retrieved,
            might be retrievable, or which otherwise gives a globally unique identification of the content.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.Contentfeatures">
            <summary>
            Gets or sets content features of a MIME body part. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>The 'Content-features:' header can be used to annotate a MIME body part with a media feature expression, 
            to indicate features of the body part content. See also RFC 2533, RFC 2506, and RFC 2045.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.ContentDisposition">
            <summary>
            Gets or sets content disposition. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Indicates whether a MIME body part is to be shown inline or is an attachment; can also indicate a 
            suggested filename for use when saving an attachment to a file.</remarks>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.ContentLanguage">
            <summary>
            Gets or sets language of message content. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Can include a code for the natural language used in a message; e.g., 'en' for English. 
            Can also contain a list of languages for a message containing more than one language.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.ContentAlternative">
            <summary>
            Gets or sets message alternative content. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Information about the media features of alternative content formats available for the current message.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.ContentMD5">
            <summary>
            Gets or sets content MD5 checksum. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Checksum of content to ensure that it has not been modified.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.ContentDuration">
            <summary>
            Gets or sets time duration of content. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Time duration of body part content, in seconds (e.g., for audio message).</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.Body">
            <summary>
            Gets or sets MIME entity body.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Message.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Message.ParseFromFile(System.String)">
            <summary>
            Parses MIME message from the specified file.
            </summary>
            <param name="file">File name with path from where to parse MIME message.</param>
            <returns>Returns parsed MIME message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Message.ParseFromFile(System.String,System.Text.Encoding)">
            <summary>
            Parses MIME message from the specified file.
            </summary>
            <param name="file">File name with path from where to parse MIME message.</param>
            <param name="headerEncoding">Header reading encoding. If not sure UTF-8 is recommended.</param>
            <returns>Returns parsed MIME message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> or <b>headerEncoding</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Message.ParseFromStream(System.IO.Stream)">
            <summary>
            Parses MIME message from the specified stream.
            </summary>
            <param name="stream">Stream from where to parse MIME message. Parsing starts from current stream position.</param>
            <returns>Returns parsed MIME message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Message.ParseFromStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Parses MIME message from the specified stream.
            </summary>
            <param name="stream">Stream from where to parse MIME message. Parsing starts from current stream position.</param>
            <param name="headerEncoding">Header reading encoding. If not sure UTF-8 is recommended.</param>
            <returns>Returns parsed MIME message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>headerEncoding</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Message.CreateAttachment(System.String)">
            <summary>
            Creates attachment entity.
            </summary>
            <param name="file">File name with optional path.</param>
            <returns>Returns created attachment entity.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Message.CreateAttachment(System.IO.Stream,System.String)">
            <summary>
            Creates attachment entity.
            </summary>
            <param name="stream">Attachment data stream.</param>
            <param name="fileName">File name.</param>
            <returns>Returns created attachment entity.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>fileName</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Message.GetEntityByCID(System.String)">
            <summary>
            Gets MIME entity with the specified Content-ID. Returns null if no such entity.
            </summary>
            <param name="cid">Content ID.</param>
            <returns>Returns MIME entity with the specified Content-ID or null if no such entity.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>cid</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Message.AllEntities">
            <summary>
            Gets all MIME entities as list.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_Message.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_Message.ParseFromByte(System.Byte[])">
            <summary>
            Parses mail message from the specified byte array.
            </summary>
            <param name="data">Mail message data.</param>
            <returns>Returns parsed mail message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_Message.ParseFromByte(System.Byte[],System.Text.Encoding)">
            <summary>
            Parses mail message from the specified byte array.
            </summary>
            <param name="data">Mail message data.</param>
            <param name="headerEncoding">Header reading encoding. If not sure UTF-8 is recommended.</param>
            <returns>Returns parsed mail message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> or <b>headerEncoding</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_Message.ParseFromFile(System.String)">
            <summary>
            Parses mail message from the specified file.
            </summary>
            <param name="file">File name with path from where to parse mail message.</param>
            <returns>Returns parsed mail message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_Message.ParseFromFile(System.String,System.Text.Encoding)">
            <summary>
            Parses mail message from the specified file.
            </summary>
            <param name="file">File name with path from where to parse mail message.</param>
            <param name="headerEncoding">Header reading encoding. If not sure UTF-8 is recommended.</param>
            <returns>Returns parsed mail message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> or <b>headerEncoding</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_Message.ParseFromStream(System.IO.Stream)">
            <summary>
            Parses mail message from the specified stream.
            </summary>
            <param name="stream">Stream from where to parse mail message. Parsing starts from current stream position.</param>
            <returns>Returns parsed mail message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_Message.ParseFromStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Parses mail message from the specified stream.
            </summary>
            <param name="stream">Stream from where to parse mail message. Parsing starts from current stream position.</param>
            <param name="headerEncoding">Header reading encoding. If not sure UTF-8 is recommended.</param>
            <returns>Returns parsed mail message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>headerEncoding</b> is null.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.Date">
            <summary>
            Gets or sets message date and time. Value <b>DateTime.MinValue</b> means not specified.
            </summary>
            <remarks>Specifies the date and time at which the creator of the message indicated that the 
            message was complete and ready to enter the mail delivery system.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.From">
            <summary>
            Gets or sets message author(s). Value null means not specified.
            </summary>
            <remarks>Specifies the author(s) of the message; that is, the mailbox(es) of the person(s) or 
            system(s) responsible for the writing of the message.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.Sender">
            <summary>
            Gets or sets message sender. Value null means not specified.
            </summary>
            <remarks>Specifies the mailbox of the agent responsible for the actual transmission of the message.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ReplyTo">
            <summary>
            Gets or sets mailbox for replies to message. Value null means not specified.
            </summary>
            <remarks>When the "Reply-To:" field is present, it indicates the mailbox(es) to which the author of 
            the message suggests that replies be sent.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.To">
            <summary>
            Gets or sets message primary recipient(s). Value null means not specified.
            </summary>
            <remarks>Contains the address(es) of the primary recipient(s) of the message.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.Cc">
            <summary>
            Gets or sets carbon-copy recipient mailbox. Value null means not specified.
            </summary>
            <remarks>Contains the addresses of others who are to receive the message, though the content of the message may not be directed at them.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.Bcc">
            <summary>
            Gets or sets blind-carbon-copy recipient mailbox. Value null means not specified.
            </summary>
            <remarks>Contains addresses of recipients of the message whose addresses are not to be revealed to other recipients of the message.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.MessageID">
            <summary>
            Gets or sets message identifier. Value null means not specified.
            </summary>
            <remarks>Contains a single unique message identifier that refers to a particular version of a particular message. 
            If the message is resent without changes, the original Message-ID is retained.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.InReplyTo">
            <summary>
            Gets or sets identify replied-to message(s). Value null means not specified.
            </summary>
            <remarks>The message identifier(s) of the original message(s) to which the current message is a reply.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.References">
            <summary>
            Gets or sets related message identifier(s). Value null means not specified.
            </summary>
            <remarks>The message identifier(s) of other message(s) to which the current message may be related. 
            In RFC 2822, the definition was changed to say that this header field contains a list of all Message-IDs
            of messages in the preceding reply chain.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.Subject">
            <summary>
            Gets or sets topic of message. Value null means not specified.
            </summary>
            <remarks>Contains a short string identifying the topic of the message.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.Comments">
            <summary>
            Gets or sets additional comments about the message. Value null means not specified.
            </summary>
            <remarks>Contains any additional comments on the text of the body of the message. 
            Warning: Some mailers will not show this field to recipients.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.Keywords">
            <summary>
            Gets or sets message key words and/or phrases. Value null means not specified.
            </summary>
            <remarks>Contains a comma-separated list of important words and phrases that might be useful for the recipient.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ResentDate">
            <summary>
            Gets or sets date and time message is resent. Value <b>DateTime.MinValue</b> means not specified.
            </summary>
            <remarks>Contains the date and time that a message is reintroduced into the message transfer system.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ResentFrom">
            <summary>
            Gets or sets mailbox of person for whom message is resent. Value null means not specified.
            </summary>
            <remarks>Contains the mailbox of the agent who has reintroduced the message into 
            the message transfer system, or on whose behalf the message has been resent.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ResentSender">
            <summary>
            Gets or sets mailbox of person who actually resends the message. Value null means not specified.
            </summary>
            <remarks>Contains the mailbox of the agent who has reintroduced the message into 
            the message transfer system, if this is different from the Resent-From value.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ResentTo">
            <summary>
            Gets or sets mailbox to which message is resent. Value null means not specified.
            </summary>
            <remarks>Contains the mailbox(es) to which the message has been resent.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ResentCc">
            <summary>
            Gets or sets mailbox(es) to which message is cc'ed on resend. Value null means not specified.
            </summary>
            <remarks>Contains the mailbox(es) to which message is cc'ed on resend.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ResentBcc">
            <summary>
            Gets or sets mailbox(es) to which message is bcc'ed on resend. Value null means not specified.
            </summary>
            <remarks>Contains the mailbox(es) to which message is bcc'ed on resend.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ResentReplyTo">
            <summary>
            Gets or sets resent reply-to. Value null means not specified.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ResentMessageID">
            <summary>
            Gets or sets message identifier for resent message. Value null means not specified.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ReturnPath">
            <summary>
            Gets or sets message return path. Value null means not specified.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.Received">
            <summary>
            Gets mail transfer trace information. Value null means not specified.
            </summary>
            <remarks>Contains information about receipt of the current message by a mail transfer agent on the transfer path.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.DispositionNotificationTo">
            <summary>
            Gets or sets mailbox for sending disposition notification. Value null means not specified.
            </summary>
            <remarks>Indicates that the sender wants a disposition notification when this message 
            is received (read, processed, etc.) by its recipients.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.DispositionNotificationOptions">
            <summary>
            Gets or sets disposition notification options. Value null means not specified.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.AcceptLanguage">
            <summary>
            Gets or sets language that the message sender requests to be used for responses. Value null means not specified.
            </summary>
            <remarks>
            Indicates a language that the message sender requests to be used for responses.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.OriginalMessageID">
            <summary>
            Gets or sets original message identifier. Value null means not specified.
            </summary>
            <remarks>Original message identifier used with resend of message with alternative content format; 
            identifies the original message data to which it corresponds.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.PICSLabel">
            <summary>
            Gets or sets PICS rating label. Value null means not specified.
            </summary>
            <remarks>Ratings label to control selection (filtering) of messages according to the PICS protocol.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ListArchive">
            <summary>
            Gets or sets URL of mailing list archive. Value null means not specified.
            </summary>
            <remarks>Contains the URL to use to browse the archives of the mailing list from which this message was relayed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ListHelp">
            <summary>
            Gets or sets URL for mailing list information. Value null means not specified.
            </summary>
            <remarks>Contains the URL to use to get information about the mailing list from which this message was relayed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ListID">
            <summary>
            Gets or sets mailing list identifier. Value null means not specified.
            </summary>
            <remarks>Stores an identification of the mailing list through which this message was distributed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ListOwner">
            <summary>
            Gets or sets URL for mailing list owner's mailbox. Value null means not specified.
            </summary>
            <remarks>Contains the URL to send e-mail to the owner of the mailing list from which this message was relayed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ListPost">
            <summary>
            Gets or sets URL for mailing list posting. Value null means not specified.
            </summary>
            <remarks>Contains the URL to use to send contributions to the mailing list from which this message was relayed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ListSubscribe">
            <summary>
            Gets or sets URL for mailing list subscription. Value null means not specified.
            </summary>
            <remarks>Contains the URL to use to get a subscription to the mailing list from which this message was relayed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ListUnsubscribe">
            <summary>
            Gets or sets URL for mailing list unsubscription. Value null means not specified.
            </summary>
            <remarks>Contains the URL to use to unsubscribe the mailing list from which this message was relayed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.MessageContext">
            <summary>
            Gets or sets type or context of message. Value null means not specified.
            </summary>
            <remarks>Provides information about the context and presentation characteristics of a message. 
            Can have the values 'voice-message', 'fax-message', 'pager-message', 'multimedia-message', 'text-message', or 'none'.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.Importance">
            <summary>
            Gets or sets message importance. Value null means not specified.
            </summary>
            <remarks>A hint from the originator to the recipients about how important a message is. 
            Values: High, normal, or low.  Not used to control transmission speed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.Priority">
            <summary>
            Gets or sets message priority. Value null means not specified.
            </summary>
            <remarks>Can be 'normal', 'urgent', or 'non-urgent' and can influence transmission speed and delivery.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.Attachments">
            <summary>
            Gets this message attachments.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.BodyText">
            <summary>
            Gets message body text. Returns null if no body text available.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.BodyHtmlText">
            <summary>
            Gets message body html text. Returns null if no body html text available.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_t_TcpInfo">
            <summary>
            Represents Received: header "TCP-info" value. Defined in RFC 5321. 4.4.
            </summary>
            <remarks>
            <code>
            RFC 5321 4.4.
                TCP-info        = address-literal / ( Domain FWS address-literal )
                address-literal = "[" ( IPv4-address-literal / IPv6-address-literal / General-address-literal ) "]"
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_TcpInfo.#ctor(System.Net.IPAddress,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="ip">IP address.</param>
            <param name="hostName">Host name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_TcpInfo.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_TcpInfo.IP">
            <summary>
            Gets IP address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_TcpInfo.HostName">
            <summary>
            Gets host value. Value null means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_EncodedWordEncoding">
            <summary>
            This enum specifies MIME RFC 2047 'encoded-word' encoding method.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_EncodedWordEncoding.Q">
            <summary>
            The "B" encoding. Defined in RFC 2047 (section 4.1).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_EncodedWordEncoding.B">
            <summary>
            The "Q" encoding. Defined in RFC 2047 (section 4.2).
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_EntityCollection">
            <summary>
            Represents MIME child entity collection in multipart/xxx entity.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_EntityCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_EntityCollection.Add(LumiSoft.Net.MIME.MIME_Entity)">
            <summary>
            Adds specified MIME enity to the collection.
            </summary>
            <param name="entity">MIME entity.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>entity</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_EntityCollection.Insert(System.Int32,LumiSoft.Net.MIME.MIME_Entity)">
            <summary>
            Inserts a new MIME entity into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the MIME entity.</param>
            <param name="entity">MIME entity.</param>
            <exception cref="T:System.IndexOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>entity</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_EntityCollection.Remove(LumiSoft.Net.MIME.MIME_Entity)">
            <summary>
            Removes specified MIME entity from the collection.
            </summary>
            <param name="entity">MIME entity.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_EntityCollection.Remove(System.Int32)">
            <summary>
            Removes MIME entity at the specified index from the collection.
            </summary>
            <param name="index">The index of the MIME entity to remove.</param>
            <exception cref="T:System.IndexOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_EntityCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_EntityCollection.Contains(LumiSoft.Net.MIME.MIME_Entity)">
            <summary>
            Gets if the collection contains specified MIME entity.
            </summary>
            <param name="entity">MIME entity.</param>
            <returns>Returns true if the specified MIME entity exists in the collection, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>entity</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_EntityCollection.SetModified(System.Boolean)">
            <summary>
            Sets IsModified property value.
            </summary>
            <param name="isModified">Modified flag.</param>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_EntityCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns>Returns IEnumerator interface.</returns>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_EntityCollection.IsModified">
            <summary>
            Gets if enity collection has modified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_EntityCollection.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_EntityCollection.Item(System.Int32)">
            <summary>
            Gets MIME entity at the specified index.
            </summary>
            <param name="index">MIME entity zero-based index.</param>
            <returns>Returns MIME entity.</returns>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_Reader">
            <summary>
            MIME lexical tokens parser.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Value to read.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.Atom">
            <summary>
            Reads RFC 2822 'atom' from source stream.
            </summary>
            <returns>Returns RFC 2822 'atom' or null if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.DotAtom">
            <summary>
            Reads RFC 2822 'dot-atom' from source stream.
            </summary>
            <returns>Returns RFC 2822 'dot-atom' or null if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.Token">
            <summary>
            Reads RFC 2045 (section 5) 'token' from source stream.
            </summary>
            <returns>Returns RFC 2045 (section 5) 'token' or null if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.Comment">
            <summary>
            Reads RFC 822 'comment' from source stream.
            </summary>
            <returns>Returns RFC 822 'comment' or null if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.Word">
            <summary>
            Reads RFC 2822 (section 3.2.6) 'word' from source stream.
            </summary>
            <returns>Returns RFC 2822 (section 3.2.6) 'word' or null if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.EncodedWord">
            <summary>
            Reads RFC 2047 'encoded-word' from source stream.
            </summary>
            <returns>Returns RFC 2047 'encoded-word' or null if end of stream reached.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when source stream has no encoded-word at current position.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.QuotedString">
            <summary>
            Reads RFC 822 'quoted-string' from source stream.
            </summary>
            <returns>Returns RFC 822 'quoted-string' or null if end of stream reached.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when source stream has no quoted-string at current position.</exception>
            <exception cref="T:System.ArgumentException">Is raised when not valid 'quoted-string'.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.Value">
            <summary>
            Reads RFC 2045 (section 5) 'token' from source stream.
            </summary>
            <returns>Returns 2045 (section 5) 'token' or null if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.Phrase">
            <summary>
            Reads RFC 2047 (section 5) 'phrase' from source stream.
            </summary>
            <returns>Returns RFC 2047 (section 5) 'phrase' or null if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.Text">
            <summary>
            Reads RFC 822 '*text' from source stream.
            </summary>
            <returns>Returns RFC 822 '*text' or null if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.ToFirstChar">
            <summary>
            Reads all white-space chars + CR and LF.
            </summary>
            <returns>Returns readed chars.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.Char(System.Boolean)">
            <summary>
            Reads 1 char from source stream.
            </summary>
            <param name="readToFirstChar">Specifies if postion is moved to char(skips white spaces).</param>
            <returns>Returns readed char or -1 if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.Peek(System.Boolean)">
            <summary>
            Shows next char in source stream, this method won't consume that char.
            </summary>
            <param name="readToFirstChar">Specifies if postion is moved to char(skips white spaces).</param>
            <returns>Returns next char in source stream, returns -1 if end of stream.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.StartsWith(System.String)">
            <summary>
            Gets if source stream valu starts with the specified value. Compare is case-insensitive.
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns true if source steam satrs with specified string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.ToEnd">
            <summary>
            Reads all data from current postion to the end.
            </summary>
            <returns>Retruns readed data. Returns null if end of string is reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.IsAlpha(System.Char)">
            <summary>
            Gets if the specified char is RFC 822 'ALPHA'.
            </summary>
            <param name="c">Char to check.</param>
            <returns>Returns true if specified char is RFC 822 'ALPHA'.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.IsAText(System.Char)">
            <summary>
            Gets if the specified char is RFC 2822 'atext'.
            </summary>
            <param name="c">Char to check.</param>
            <returns>Returns true if specified char is RFC 2822 'atext'.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.IsDotAtom(System.String)">
            <summary>
            Gets if the specified value can be represented as "dot-atom".
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns true if the specified value can be represented as "dot-atom".</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.IsToken(System.String)">
            <summary>
            Gets if specified valu is RFC 2045 (section 5) 'token'.
            </summary>
            <param name="text">Text to check.</param>
            <returns>Returns true if specified char is RFC 2045 (section 5) 'token'.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.IsToken(System.Char)">
            <summary>
            Gets if the specified char is RFC 2045 (section 5) 'token'.
            </summary>
            <param name="c">Char to check.</param>
            <returns>Returns true if specified char is RFC 2045 (section 5) 'token'.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.IsAttributeChar(System.Char)">
            <summary>
            Gets if the specified char is RFC 2231 (section 7) 'attribute-char'.
            </summary>
            <param name="c">Char to check.</param>
            <returns>Returns true if specified char is RFC 2231 (section 7) 'attribute-char'.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.ReadParenthesized">
            <summary>
            Reads parenthesized value. Supports {},(),[],&lt;&gt; parenthesis. 
            Throws exception if there isn't parenthesized value or closing parenthesize is missing.
            </summary>
            <returns>Returns value between parenthesized.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.QuotedReadToDelimiter(System.Char[])">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiters in quoted string is skipped. 
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiters">Data delimiters.</param>
            <returns>Returns readed string or null if end of string reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>delimiters</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Reader.Available">
            <summary>
            Gets number of chars has left for processing.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_TransferEncodings">
            <summary>
            This class holds MIME content transfer encodings. Defined in RFC 2045 6.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_TransferEncodings.SevenBit">
            <summary>
            Up to 998 octets per line of the code range 1..127 with CR and LF (codes 13 and 10 respectively) only allowed to 
            appear as part of a CRLF line ending. This is the default value.
            Defined in RFC 2045 6.2.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_TransferEncodings.EightBit">
            <summary>
            Up to 998 octets per line with CR and LF (codes 13 and 10 respectively) only allowed to appear as part of a CRLF line ending.
            Defined in RFC 2045 6.2.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_TransferEncodings.QuotedPrintable">
            <summary>
            Used to encode arbitrary octet sequences into a form that satisfies the rules of 7bit. 
            Designed to be efficient and mostly human readable when used for text data consisting primarily of US-ASCII characters 
            but also containing a small proportion of bytes with values outside that range.
            Defined in RFC 2045 6.7.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_TransferEncodings.Base64">
            <summary>
            Used to encode arbitrary octet sequences into a form that satisfies the rules of 7bit. Has a fixed overhead and is 
            intended for non text data and text that is not ASCII heavy.
            Defined in RFC 2045 6.8.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_TransferEncodings.Binary">
            <summary>
            Any sequence of octets. This type is not widely used. Defined in RFC 3030.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_Utils">
            <summary>
            Provides MIME related utility methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Utils.DateTimeToRfc2822(System.DateTime)">
            <summary>
            Converts date to RFC 2822 date time string.
            </summary>
            <param name="dateTime">Date time value to convert..</param>
            <returns>Returns RFC 2822 date time string.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Utils.ParseRfc2822DateTime(System.String)">
            <summary>
            Parses RFC 2822 date-time from the specified value.
            </summary>
            <param name="value">RFC 2822 date-time string value.</param>
            <returns>Returns parsed datetime value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Utils.UnfoldHeader(System.String)">
            <summary>
            Unfolds folded header field.
            </summary>
            <param name="value">Header field.</param>
            <returns>Returns unfolded header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Utils.CreateMessageID">
            <summary>
            Creates Rfc 2822 3.6.4 message-id. Syntax: '&lt;' id-left '@' id-right '&gt;'.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Utils.ParseHeaders(System.IO.Stream)">
            <summary>
            Parses headers from message or mime entry.
            </summary>
            <param name="entryStrm">Stream from where to read headers.</param>
            <returns>Returns header lines.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Utils.ParseHeaderField(System.String,System.IO.Stream)">
            <summary>
            Parse header specified header field value.
            
            Use this method only if you need to get only one header field, otherwise use
            MimeParser.ParseHeaderField(string fieldName,string headers).
            This avoid parsing headers multiple times.
            </summary>
            <param name="fieldName">Header field which to parse. Eg. Subject: .</param>
            <param name="entryStrm">Stream from where to read headers.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Utils.ParseHeaderField(System.String,System.String)">
            <summary>
            Parse header specified header field value.
            </summary>
            <param name="fieldName">Header field which to parse. Eg. Subject: .</param>
            <param name="headers">Full headers string. Use MimeParser.ParseHeaders() to get this value.</param>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Utils.QDecode(System.Text.Encoding,System.String)">
            <summary>
            "Q" decoder. This is same as quoted-printable, except '_' is converted to ' '.
            Defined in RFC 2047 4.2.
            </summary>
            <param name="encoding">Input string encoding.</param>
            <param name="data">String which to encode.</param>
            <returns>Returns decoded string.</returns>		
            <exception cref="T:System.ArgumentNullException">Is raised when <b>encoding</b> or <b>data</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Utils.QuotedPrintableDecode(System.Byte[])">
            <summary>
            quoted-printable decoder. Defined in RFC 2045 6.7.
            </summary>
            <param name="data">Data which to encode.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="T:LumiSoft.Net.Net_Utils">
            <summary>
            Common utility methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.GetLocalHostName(System.String)">
            <summary>
            Gets local host name or argument <b>hostName</b> value if it's specified.
            </summary>
            <param name="hostName">Host name or null.</param>
            <returns>Returns local host name or argument <b>hostName</b> value if it's specified.</returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.CompareArray(System.Array,System.Array)">
            <summary>
            Compares if specified array itmes equals.
            </summary>
            <param name="array1">Array 1.</param>
            <param name="array2">Array 2</param>
            <returns>Returns true if both arrays are equal.</returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.CompareArray(System.Array,System.Array,System.Int32)">
            <summary>
            Compares if specified array itmes equals.
            </summary>
            <param name="array1">Array 1.</param>
            <param name="array2">Array 2</param>
            <param name="array2Count">Number of bytes in array 2 used for compare.</param>
            <returns>Returns true if both arrays are equal.</returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.ReverseArray(System.Array)">
            <summary>
            Reverses the specified array elements.
            </summary>
            <param name="array">Array elements to reverse.</param>
            <returns>Returns array with reversed items.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>array</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.StreamCopy(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies <b>source</b> stream data to <b>target</b> stream.
            </summary>
            <param name="source">Source stream. Reading starts from stream current position.</param>
            <param name="target">Target stream. Writing starts from stream current position.</param>
            <param name="blockSize">Specifies transfer block size in bytes.</param>
            <returns>Returns number of bytes copied.</returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.IsIPAddress(System.String)">
            <summary>
            Gets if the specified string value is IP address.
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns true if specified value is IP address.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.IsMulticastAddress(System.Net.IPAddress)">
            <summary>
            Gets if the specified IP address is multicast address.
            </summary>
            <param name="ip">IP address.</param>
            <returns>Returns true if <b>ip</b> is muticast address, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> s null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.IsPrivateIP(System.String)">
            <summary>
            Gets if specified IP address is private LAN IP address. For example 192.168.x.x is private ip.
            </summary>
            <param name="ip">IP address to check.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
            <returns>Returns true if IP is private IP.</returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.IsPrivateIP(System.Net.IPAddress)">
            <summary>
            Gets if specified IP address is private LAN IP address. For example 192.168.x.x is private ip.
            </summary>
            <param name="ip">IP address to check.</param>
            <returns>Returns true if IP is private IP.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.ParseIPEndPoint(System.String)">
            <summary>
            Parses IPEndPoint from the specified string value.
            </summary>
            <param name="value">IPEndPoint string value.</param>
            <returns>Returns parsed IPEndPoint.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.IsInteger(System.String)">
            <summary>
            Checks if specified string is integer(int/long).
            </summary>
            <param name="value"></param>
            <returns>Returns true if specified string is integer.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.IsAscii(System.String)">
            <summary>
            Gets if the specified string is ASCII string.
            </summary>
            <param name="value">String value.</param>
            <returns>Returns true if specified string is ASCII string, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.IsIoCompletionPortsSupported">
            <summary>
            Gets if IO completion ports supported by OS.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.CreateSocket(System.Net.IPEndPoint,System.Net.Sockets.ProtocolType)">
            <summary>
            Creates new socket for the specified end point.
            </summary>
            <param name="localEP">Local end point.</param>
            <param name="protocolType">Protocol type.</param>
            <returns>Retruns newly created socket.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>localEP</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.ToHex(System.Byte[])">
            <summary>
            Converts specified data to HEX string.
            </summary>
            <param name="data">Data to convert.</param>
            <returns>Returns hex string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.ToHex(System.String)">
            <summary>
            Converts specified string to HEX string.
            </summary>
            <param name="text">String to convert.</param>
            <returns>Returns hex string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.FromHex(System.Byte[])">
            <summary>
            Converts hex byte data to normal byte data. Hex data must be in two bytes pairs, for example: 0F,FF,A3,... .
            </summary>
            <param name="hexData">Hex data.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>hexData</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.FromBase64(System.String)">
            <summary>
            Decodes specified base64 data.
            </summary>
            <param name="data">Base64 string.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.FromBase64(System.Byte[])">
            <summary>
            Decodes specified base64 data.
            </summary>
            <param name="data">Base64 data.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.Base64Encode(System.Byte[])">
            <summary>
            Encodes specified data with base64 encoding.
            </summary>
            <param name="data">Data to encode.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.Base64EncodeEx(System.Byte[],System.Char[],System.Boolean)">
            <summary>
            Encodes specified data with bas64 encoding.
            </summary>
            <param name="data">Data to to encode.</param>
            <param name="base64Chars">Custom base64 chars (64 chars) or null if default chars used.</param>
            <param name="padd">Padd missing block chars. Normal base64 must be 4 bytes blocks, if not 4 bytes in block, 
            missing bytes must be padded with '='. Modified base64 just skips missing bytes.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.Base64DecodeEx(System.Byte[],System.Char[])">
            <summary>
            Decodes base64 data. Defined in RFC 2045 6.8.  Base64 Content-Transfer-Encoding.
            </summary>
            <param name="base64Data">Base64 decoded data.</param>
            <param name="base64Chars">Custom base64 chars (64 chars) or null if default chars used.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.ComputeMd5(System.String,System.Boolean)">
            <summary>
            Computes md5 hash.
            </summary>
            <param name="text">Text to hash.</param>
            <param name="hex">Specifies if md5 value is returned as hex string.</param>
            <returns>Returns md5 value or md5 hex value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="T:LumiSoft.Net.POP3.Client.POP3_ClientException">
            <summary>
            POP3 client exception.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="responseLine">IMAP server response line.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>responseLine</b> is null.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_ClientException.StatusCode">
            <summary>
            Gets POP3 server error status code.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_ClientException.ResponseText">
            <summary>
            Gets POP3 server response text after status code.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Client.POP3_ClientMessage">
            <summary>
            This class represents POP3 client message.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.#ctor(LumiSoft.Net.POP3.Client.POP3_Client,System.Int32,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="pop3">Owner POP3 client.</param>
            <param name="seqNumber">Message 1 based sequence number.</param>
            <param name="size">Message size in bytes.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.MarkForDeletion">
            <summary>
            Marks message as deleted.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.HeaderToString">
            <summary>
            Gets message header as string.
            </summary>
            <returns>Returns message header as string.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when message is marked for deletion and this method is accessed.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.HeaderToByte">
            <summary>
            Gets message header as byte[] data.
            </summary>
            <returns>Returns message header as byte[] data.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when message is marked for deletion and this method is accessed.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.HeaderToStream(System.IO.Stream)">
            <summary>
            Stores message header to the specified stream.
            </summary>
            <param name="stream">Stream where to store data.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when argument <b>stream</b> value is null.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.MessageToByte">
            <summary>
            Gets message as byte[] data.
            </summary>
            <returns>Returns message as byte[] data.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when message is marked for deletion and this method is accessed.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.MessageToStream(System.IO.Stream)">
            <summary>
            Stores message to specified stream.
            </summary>
            <param name="stream">Stream where to store message.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when argument <b>stream</b> value is null.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when message is marked for deletion and this method is accessed.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.MessageTopLinesToByte(System.Int32)">
            <summary>
            Gets message header + specified number lines of message body.
            </summary>
            <param name="lineCount">Number of lines to get from message body.</param>
            <returns>Returns message header + specified number lines of message body.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when <b>numberOfLines</b> is negative value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when message is marked for deletion and this method is accessed.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.MessageTopLinesToStream(System.IO.Stream,System.Int32)">
            <summary>
            Stores message header + specified number lines of message body to the specified stream.
            </summary>
            <param name="stream">Stream where to store data.</param>
            <param name="lineCount">Number of lines to get from message body.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when argument <b>stream</b> value is null.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when message is marked for deletion and this method is accessed.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.Dispose">
            <summary>
            Disposes message.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.SetUID(System.String)">
            <summary>
            Sets message UID value.
            </summary>
            <param name="uid">UID value.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.SetMarkedForDeletion(System.Boolean)">
            <summary>
            Sets IsMarkedForDeletion flag value.
            </summary>
            <param name="isMarkedForDeletion">New IsMarkedForDeletion value.</param>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_ClientMessage.IsDisposed">
            <summary>
            Gets if POP3 message is Disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_ClientMessage.SequenceNumber">
            <summary>
            Gets message 1 based sequence number.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_ClientMessage.UID">
            <summary>
            Gets message UID. NOTE: Before accessing this property, check that server supports UIDL command.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when POP3 server doesnt support UIDL command.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_ClientMessage.Size">
            <summary>
            Gets message size in bytes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_ClientMessage.IsMarkedForDeletion">
            <summary>
            Gets if message is marked for deletion.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.POP3.Client.POP3_ClientMessageCollection">
            <summary>
            This class represents POP3 client messages collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessageCollection.#ctor(LumiSoft.Net.POP3.Client.POP3_Client)">
            <summary>
            Default constructor.
            </summary>
            <param name="pop3">Owner POP3 client.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessageCollection.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessageCollection.Add(System.Int32)">
            <summary>
            Adds new message to messages collection.
            </summary>
            <param name="size">Message size in bytes.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessageCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns>Returns IEnumerator interface.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_ClientMessageCollection.TotalSize">
            <summary>
            Gets total size of messages, messages marked for deletion are included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_ClientMessageCollection.Count">
            <summary>
            Gets number of messages in the collection, messages marked for deletion are included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_ClientMessageCollection.Item(System.Int32)">
            <summary>
            Gets message from specified index.
            </summary>
            <param name="index">Message zero based index in the collection.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when index is out of range.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_ClientMessageCollection.Item(System.String)">
            <summary>
            Gets message with specified UID value.
            </summary>
            <param name="uid">Message UID value.</param>
            <returns>Returns message or null if message doesn't exist.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when POP3 server doesn't support UIDL.</exception>
        </member>
        <member name="T:LumiSoft.Net.PortRange">
            <summary>
            This class holds UDP or TCP port range.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.PortRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="start">Start port.</param>
            <param name="end">End port.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the aruments value is out of range.</exception>
        </member>
        <member name="P:LumiSoft.Net.PortRange.Start">
            <summary>
            Gets start port.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.PortRange.End">
            <summary>
            Gets end port.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SDP.SDP_Attribute">
            <summary>
            Implements SDP attribute.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Attribute.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Attribute name.</param>
            <param name="value">Attribute value.</param>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Attribute.Parse(System.String)">
            <summary>
            Parses media from "a" SDP message field.
            </summary>
            <param name="aValue">"a" SDP message field.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Attribute.ToValue">
            <summary>
            Converts this to valid "a" string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Attribute.Name">
            <summary>
            Gets attribute name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Attribute.Value">
            <summary>
            Gets or sets attribute value.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SDP.SDP_Connection">
            <summary>
            A SDP_ConnectionData represents an <B>c=</B> SDP message field. Defined in RFC 4566 5.7. Connection Data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Connection.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="netType">Network type(IN).</param>
            <param name="addressType">Address type(IP4/IP6).</param>
            <param name="address">Host name or IP address.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>netType</b>, <b>addressType</b> or <b>address</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Connection.Parse(System.String)">
            <summary>
            Parses media from "c" SDP message field.
            </summary>
            <param name="cValue">"m" SDP message field.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Connection.ToValue">
            <summary>
            Converts this to valid connection data stirng. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Connection.NetType">
            <summary>
            Gets net type. Currently it's always IN(Internet).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Connection.AddressType">
            <summary>
            Gets or sets address type. Currently defined values IP4 or IP6.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Connection.Address">
            <summary>
            Gets or sets connection address.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SDP.SDP_MediaDescription">
            <summary>
            This class represents SDP media description. Defined in RFC 4566 5.14.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_MediaDescription.#ctor(System.String,System.Int32,System.Int32,System.String,System.String[])">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">SDP media type. List of knwon values <see cref="T:LumiSoft.Net.SDP.SDP_MediaTypes"/>.</param>
            <param name="port">Media transport port.</param>
            <param name="ports">Number of continuos transport ports. </param>
            <param name="protocol">Gets or sets transport protocol.</param>
            <param name="mediaFormats">Media formats. See MediaFormats property for more info.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b>, <b>protocol</b> or <b>mediaFormats</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_MediaDescription.#ctor">
            <summary>
            Internal parse constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_MediaDescription.Parse(System.String)">
            <summary>
            Parses media from "m" SDP message field.
            </summary>
            <param name="mValue">"m" SDP message field.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_MediaDescription.ToValue">
            <summary>
            Converts this to valid media string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_MediaDescription.MediaType">
            <summary>
            Gets or sets meadia type. Currently defined media are "audio", "video", "text", 
            "application", and "message", although this list may be extended in the future.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_MediaDescription.Port">
            <summary>
            Gets or sets the transport port to which the media stream is sent.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_MediaDescription.NumberOfPorts">
            <summary>
            Gets or sets number of continuos media ports.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_MediaDescription.Protocol">
            <summary>
            Gets or sets transport protocol. Currently known protocols: UDP;RTP/AVP;RTP/SAVP.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_MediaDescription.MediaFormats">
            <summary>
            Gets media formats collection.
            </summary>
            <remarks>
            <code>
            ; Media Formats: 
            ; If the Transport Protocol is "RTP/AVP" or "RTP/SAVP" the &lt;fmt&gt; 
            ; sub-fields contain RTP payload type numbers, for example: 
            ; - for Audio: 0: PCMU, 4: G723, 8: PCMA, 18: G729 
            ; - for Video: 31: H261, 32: MPV 
            ; If the Transport Protocol is "udp" the &lt;fmt&gt; sub-fields 
            ; must reference a MIME type 
            </code>
            </remarks>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_MediaDescription.Information">
            <summary>
            Gets or sets media information. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_MediaDescription.Connection">
            <summary>
            Gets or sets per media connection data. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_MediaDescription.Bandwidth">
            <summary>
            Gets or sets bandwidth data. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_MediaDescription.Attributes">
            <summary>
            Gets media attributes collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_MediaDescription.Tags">
            <summary>
            Gets user data items collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SDP.SDP_MediaTypes">
            <summary>
            This class contains known SDP media types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SDP.SDP_MediaTypes.audio">
            <summary>
            Audio.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SDP.SDP_MediaTypes.video">
            <summary>
            Video.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SDP.SDP_MediaTypes.text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SDP.SDP_MediaTypes.application">
            <summary>
            Application.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SDP.SDP_MediaTypes.message">
            <summary>
            Message.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SDP.SDP_Message">
            <summary>
            Session Description Protocol. Defined in RFC 4566.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Message.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Message.Parse(System.String)">
            <summary>
            Parses SDP from raw data.
            </summary>
            <param name="data">Raw SDP data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Message.ToFile(System.String)">
            <summary>
            Stores SDP data to specified file. Note: official suggested file extention is .sdp.
            </summary>
            <param name="fileName">File name with path where to store SDP data.</param>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Message.ToStringData">
            <summary>
            Returns SDP as string data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Message.ToByte">
            <summary>
            Returns SDP as byte[] data.
            </summary>
            <returns>Returns SDP as byte[] data.</returns>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Message.Version">
            <summary>
            Gets or sets version of the Session Description Protocol.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Message.Origin">
            <summary>
            Gets or sets session originator.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Message.SessionName">
            <summary>
            Gets or sets textual session name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Message.SessionDescription">
            <summary>
            Gets or sets textual information about the session. This is optional value, null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Message.Uri">
            <summary>
            Gets or sets Uniform Resource Identifier. The URI should be a pointer to additional information 
            about the session. This is optional value, null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Message.Connection">
            <summary>
            Gets or sets connection data. This is optional value if each media part specifies this value,
            null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Message.Times">
            <summary>
            Gets start and stop times for a session. If Count = 0, t field not written dot SDP data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Message.RepeatTimes">
            <summary>
            Gets or sets repeat times for a session. This is optional value, null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Message.Attributes">
            <summary>
            Gets attributes collection. This is optional value, Count == 0 means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Message.MediaDescriptions">
            <summary>
            Gets media descriptions.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SDP.SDP_Origin">
            <summary>
            This class represents SDP Origin("o="). Defined in RFC 4566 5.2.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Origin.#ctor(System.String,System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="userName">User name.</param>
            <param name="sessionID">Session ID.</param>
            <param name="sessionVersion">Session version.</param>
            <param name="netType">Network type(IN).</param>
            <param name="addressType">Address type(IP4/IP6).</param>
            <param name="unicastAddress">Host name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b>, <b>netType</b>, <b>addressType</b> or <b>unicastAddress</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Origin.Parse(System.String)">
            <summary>
            Parses SDP Origin("o=") from specified value.
            </summary>
            <param name="value">Origin value.</param>
            <returns>Returns parsed SDP Origin.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Origin.ToString">
            <summary>
            Returns origin as SDP string.
            </summary>
            <returns>Returns origin as SDP string.</returns>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Origin.UserName">
            <summary>
            Gets user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Origin.SessionID">
            <summary>
            Gets session ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Origin.SessionVersion">
            <summary>
            Gets session version.
            </summary>
            <remarks>This value should be increased each time when session data has modified.</remarks>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Origin.NetType">
            <summary>
            Gets network type. Currently "IN" is only defined value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Origin.AddressType">
            <summary>
            Gets address type. Currently "IP4" and "IP6" are only defined values.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Origin.UnicastAddress">
            <summary>
            Gets address(DNS host name or IP address). 
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SDP.SDP_Time">
            <summary>
            A SDP_Time represents an <B>t=</B> SDP message field. Defined in RFC 4566 5.9. Timing.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Time.#ctor(System.Int64,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="startTime">Start time when session must start. Network Time Protocol (NTP) time values in 
            seconds since 1900, 0 value means not specified.</param>
            <param name="stopTime">Stop time when session must end.Network Time Protocol (NTP) time values in 
            seconds since 1900, 0 value means not specified.</param>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Time.Parse(System.String)">
            <summary>
            Parses media from "t" SDP message field.
            </summary>
            <param name="tValue">"t" SDP message field.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Time.ToValue">
            <summary>
            Converts this to valid "t" string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Time.StartTime">
            <summary>
            Gets or sets start time when session must start. Network Time Protocol (NTP) time values in 
            seconds since 1900. 0 value means not specified, if StopTime is also 0, then means infinite session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Time.StopTime">
            <summary>
            Gets or sets stop time when session must end. Network Time Protocol (NTP) time values in 
            seconds since 1900. 0 value means not specified, if StopTime is also 0, then means infinite session.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SslMode">
            <summary>
            This enum holds SSL modes.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SslMode.None">
            <summary>
            No SSL is used.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SslMode.SSL">
            <summary>
            Connection is SSL.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SslMode.TLS">
            <summary>
            Connection will be switched to SSL with start TLS.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Client.STUN_Client">
            <summary>
            This class implements STUN client. Defined in RFC 3489.
            </summary>
            <example>
            <code>
            // Create new socket for STUN client.
            Socket socket = new Socket(AddressFamily.InterNetwork,SocketType.Dgram,ProtocolType.Udp);
            socket.Bind(new IPEndPoint(IPAddress.Any,0));
            
            // Query STUN server
            STUN_Result result = STUN_Client.Query("stunserver.org",3478,socket);
            if(result.NetType != STUN_NetType.UdpBlocked){
                // UDP blocked or !!!! bad STUN server
            }
            else{
                IPEndPoint publicEP = result.PublicEndPoint;
                // Do your stuff
            }
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.STUN.Client.STUN_Client.Query(System.String,System.Int32,System.Net.IPEndPoint)">
            <summary>
            Gets NAT info from STUN server.
            </summary>
            <param name="host">STUN server name or IP.</param>
            <param name="port">STUN server port. Default port is 3478.</param>
            <param name="localEP">Local IP end point.</param>
            <returns>Returns UDP netwrok info.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>host</b> or <b>localEP</b> is null reference.</exception>
            <exception cref="T:System.Exception">Throws exception if unexpected error happens.</exception>
        </member>
        <member name="M:LumiSoft.Net.STUN.Client.STUN_Client.Query(System.String,System.Int32,System.Net.Sockets.Socket)">
            <summary>
            Gets NAT info from STUN server.
            </summary>
            <param name="host">STUN server name or IP.</param>
            <param name="port">STUN server port. Default port is 3478.</param>
            <param name="socket">UDP socket to use.</param>
            <returns>Returns UDP netwrok info.</returns>
            <exception cref="T:System.Exception">Throws exception if unexpected error happens.</exception>
        </member>
        <member name="M:LumiSoft.Net.STUN.Client.STUN_Client.GetPublicIP(System.String,System.Int32,System.Net.IPAddress)">
            <summary>
            Resolves local IP to public IP using STUN.
            </summary>
            <param name="stunServer">STUN server.</param>
            <param name="port">STUN server port. Default port is 3478.</param>
            <param name="localIP">Local IP address.</param>
            <returns>Returns public IP address.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stunServer</b> or <b>localIP</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.IO.IOException">Is raised when no connection to STUN server.</exception>
        </member>
        <member name="M:LumiSoft.Net.STUN.Client.STUN_Client.DoTransaction(LumiSoft.Net.STUN.Message.STUN_Message,System.Net.Sockets.Socket,System.Net.IPEndPoint)">
            <summary>
            Does STUN transaction. Returns transaction response or null if transaction failed.
            </summary>
            <param name="request">STUN message.</param>
            <param name="socket">Socket to use for send/receive.</param>
            <param name="remoteEndPoint">Remote end point.</param>
            <returns>Returns transaction response or null if transaction failed.</returns>
        </member>
        <member name="T:LumiSoft.Net.STUN.Client.STUN_NetType">
            <summary>
            Specifies UDP network type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Client.STUN_NetType.UdpBlocked">
            <summary>
            UDP is always blocked.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Client.STUN_NetType.OpenInternet">
            <summary>
            No NAT, public IP, no firewall.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Client.STUN_NetType.SymmetricUdpFirewall">
            <summary>
            No NAT, public IP, but symmetric UDP firewall.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Client.STUN_NetType.FullCone">
            <summary>
            A full cone NAT is one where all requests from the same internal IP address and port are 
            mapped to the same external IP address and port. Furthermore, any external host can send 
            a packet to the internal host, by sending a packet to the mapped external address.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Client.STUN_NetType.RestrictedCone">
            <summary>
            A restricted cone NAT is one where all requests from the same internal IP address and 
            port are mapped to the same external IP address and port. Unlike a full cone NAT, an external
            host (with IP address X) can send a packet to the internal host only if the internal host 
            had previously sent a packet to IP address X.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Client.STUN_NetType.PortRestrictedCone">
            <summary>
            A port restricted cone NAT is like a restricted cone NAT, but the restriction 
            includes port numbers. Specifically, an external host can send a packet, with source IP
            address X and source port P, to the internal host only if the internal host had previously 
            sent a packet to IP address X and port P.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Client.STUN_NetType.Symmetric">
            <summary>
            A symmetric NAT is one where all requests from the same internal IP address and port, 
            to a specific destination IP address and port, are mapped to the same external IP address and
            port.  If the same host sends a packet with the same source address and port, but to 
            a different destination, a different mapping is used. Furthermore, only the external host that
            receives a packet can send a UDP packet back to the internal host.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Client.STUN_Result">
            <summary>
            This class holds STUN_Client.Query method return data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.STUN.Client.STUN_Result.#ctor(LumiSoft.Net.STUN.Client.STUN_NetType,System.Net.IPEndPoint)">
            <summary>
            Default constructor.
            </summary>
            <param name="netType">Specifies UDP network type.</param>
            <param name="publicEndPoint">Public IP end point.</param>
        </member>
        <member name="P:LumiSoft.Net.STUN.Client.STUN_Result.NetType">
            <summary>
            Gets UDP network type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Client.STUN_Result.PublicEndPoint">
            <summary>
            Gets public IP end point. This value is null if failed to get network type.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Message.STUN_Message">
            <summary>
            Implements STUN message. Defined in RFC 3489.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_Message.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_Message.Parse(System.Byte[])">
            <summary>
            Parses STUN message from raw data packet.
            </summary>
            <param name="data">Raw STUN message.</param>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_Message.ToByteData">
            <summary>
            Converts this to raw STUN packet.
            </summary>
            <returns>Returns raw STUN packet.</returns>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_Message.ParseAttribute(System.Byte[],System.Int32@)">
            <summary>
            Parses attribute from data.
            </summary>
            <param name="data">SIP message data.</param>
            <param name="offset">Offset in data.</param>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_Message.ParseEndPoint(System.Byte[],System.Int32@)">
            <summary>
            Pasrses IP endpoint attribute.
            </summary>
            <param name="data">STUN message data.</param>
            <param name="offset">Offset in data.</param>
            <returns>Returns parsed IP end point.</returns>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_Message.StoreEndPoint(LumiSoft.Net.STUN.Message.STUN_Message.AttributeType,System.Net.IPEndPoint,System.Byte[],System.Int32@)">
            <summary>
            Stores ip end point attribute to buffer.
            </summary>
            <param name="type">Attribute type.</param>
            <param name="endPoint">IP end point.</param>
            <param name="message">Buffer where to store.</param>
            <param name="offset">Offset in buffer.</param>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.Type">
            <summary>
            Gets STUN message type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.TransactionID">
            <summary>
            Gets transaction ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.MappedAddress">
            <summary>
            Gets or sets IP end point what was actually connected to STUN server. Returns null if not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.ResponseAddress">
            <summary>
            Gets or sets IP end point where to STUN client likes to receive response.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.ChangeRequest">
            <summary>
            Gets or sets how and where STUN server must send response back to STUN client.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.SourceAddress">
            <summary>
            Gets or sets STUN server IP end point what sent response to STUN client. Value null
            means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.ChangedAddress">
            <summary>
            Gets or sets IP end point where STUN server will send response back to STUN client 
            if the "change IP" and "change port" flags had been set in the ChangeRequest.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.UserName">
            <summary>
            Gets or sets user name. Value null means not specified.
            </summary>          
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.Password">
            <summary>
            Gets or sets password. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.ErrorCode">
            <summary>
            Gets or sets error info. Returns null if not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.ReflectedFrom">
            <summary>
            Gets or sets IP endpoint from which IP end point STUN server got STUN client request.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.ServerName">
            <summary>
            Gets or sets server name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Message.STUN_Message.AttributeType">
            <summary>
            Specifies STUN attribute type.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Message.STUN_Message.IPFamily">
            <summary>
            Specifies IP address family.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Message.STUN_MessageType">
            <summary>
            This enum specifies STUN message type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Message.STUN_MessageType.BindingRequest">
            <summary>
            STUN message is binding request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Message.STUN_MessageType.BindingResponse">
            <summary>
            STUN message is binding request response.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Message.STUN_MessageType.BindingErrorResponse">
            <summary>
            STUN message is binding requesr error response.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Message.STUN_MessageType.SharedSecretRequest">
            <summary>
            STUN message is "shared secret" request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Message.STUN_MessageType.SharedSecretResponse">
            <summary>
            STUN message is "shared secret" request response.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Message.STUN_MessageType.SharedSecretErrorResponse">
            <summary>
            STUN message is "shared secret" request error response.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Message.STUN_t_ChangeRequest">
            <summary>
            This class implements STUN CHANGE-REQUEST attribute. Defined in RFC 3489 11.2.4.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_t_ChangeRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_t_ChangeRequest.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="changeIP">Specifies if STUN server must send response to different IP than request was received.</param>
            <param name="changePort">Specifies if STUN server must send response to different port than request was received.</param>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_t_ChangeRequest.ChangeIP">
            <summary>
            Gets or sets if STUN server must send response to different IP than request was received.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_t_ChangeRequest.ChangePort">
            <summary>
            Gets or sets if STUN server must send response to different port than request was received.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Message.STUN_t_ErrorCode">
            <summary>
            This class implements STUN ERROR-CODE. Defined in RFC 3489 11.2.9.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_t_ErrorCode.#ctor(System.Int32,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="code">Error code.</param>
            <param name="reasonText">Reason text.</param>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_t_ErrorCode.Code">
            <summary>
            Gets or sets error code.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_t_ErrorCode.ReasonText">
            <summary>
            Gets reason text.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Client">
            <summary>
            This class implements generic TCP client.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.Dispose">
            <summary>
            Cleans up any resources being used. This method is thread-safe.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Starts connection to the specified host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port to connect.</param>
            <param name="callback">Callback to call when the connect operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.BeginConnect(System.String,System.Int32,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts connection to the specified host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <param name="callback">Callback to call when the connect operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.BeginConnect(System.Net.IPEndPoint,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts connection to the specified remote end point.
            </summary>
            <param name="remoteEP">Remote IP end point where to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <param name="callback">Callback to call when the connect operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.BeginConnect(System.Net.IPEndPoint,System.Net.IPEndPoint,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts connection to the specified remote end point.
            </summary>
            <param name="localEP">Local IP end point to use for connect.</param>
            <param name="remoteEP">Remote IP end point where to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <param name="callback">Callback to call when the connect operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.EndConnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous connection request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when argument <b>asyncResult</b> was not returned by a call to the <b>BeginConnect</b> method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndConnect</b> was previously called for the asynchronous connection.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.Connect(System.String,System.Int32)">
            <summary>
            Connects to the specified host. If the hostname resolves to more than one IP address, 
            all IP addresses will be tried for connection, until one of them connects.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port to connect.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.Connect(System.String,System.Int32,System.Boolean)">
            <summary>
            Connects to the specified host. If the hostname resolves to more than one IP address, 
            all IP addresses will be tried for connection, until one of them connects.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.Connect(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Connects to the specified remote end point.
            </summary>
            <param name="remoteEP">Remote IP end point where to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.Connect(System.Net.IPEndPoint,System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Connects to the specified remote end point.
            </summary>
            <param name="localEP">Local IP end point to use for connet.</param>
            <param name="remoteEP">Remote IP end point where to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.Disconnect">
            <summary>
            Disconnects connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.BeginDisconnect(System.AsyncCallback,System.Object)">
            <summary>
            Starts disconnecting connection.
            </summary>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous disconnect.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.EndDisconnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous disconnect request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when argument <b>asyncResult</b> was not returned by a call to the <b>BeginDisconnect</b> method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndDisconnect</b> was previously called for the asynchronous connection.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.SwitchToSecure">
            <summary>
            Switches session to secure connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected or is already secure.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.OnError(System.Exception)">
            <summary>
            This must be called when unexpected error happens. When inheriting <b>TCP_Client</b> class, be sure that you call <b>OnError</b>
            method for each unexpected error.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.OnConnected">
            <summary>
            This method is called after TCP client has sucessfully connected.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.ReadLine">
            <summary>
            Reads and logs specified line from connected host.
            </summary>
            <returns>Returns readed line.</returns>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.WriteLine(System.String)">
            <summary>
            Sends and logs specified line to connected host.
            </summary>
            <param name="line">Line to send.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.LogAddRead(System.Int64,System.String)">
            <summary>
            Logs read operation.
            </summary>
            <param name="size">Number of bytes readed.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.LogAddWrite(System.Int64,System.String)">
            <summary>
            Logs write operation.
            </summary>
            <param name="size">Number of bytes written.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.LogAddText(System.String)">
            <summary>
            Logs free text entry.
            </summary>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.LogAddException(System.String,System.Exception)">
            <summary>
            Logs exception.
            </summary>
            <param name="text">Log text.</param>
            <param name="x">Exception happened.</param>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.Logger">
            <summary>
            Gets or sets TCP client logger. Value null means no logging.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.IsConnected">
            <summary>
            Gets if TCP client is connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.ID">
            <summary>
            Gets session ID.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.ConnectTime">
            <summary>
            Gets the time when session was connected.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.LastActivity">
            <summary>
            Gets the last time when data was sent or received.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.LocalEndPoint">
            <summary>
            Gets session local IP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.RemoteEndPoint">
            <summary>
            Gets session remote IP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.IsSecureConnection">
            <summary>
            Gets if this session TCP connection is secure connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.TcpStream">
            <summary>
            Gets TCP stream which must be used to send/receive data through this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.ValidateCertificateCallback">
            <summary>
            Gets or stes remote callback which is called when remote server certificate needs to be validated.
            Value null means not sepcified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Client.BeginConnectHostDelegate">
            <summary>
            Internal helper method for asynchronous Connect method.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Client.BeginConnectEPDelegate">
            <summary>
            Internal helper method for asynchronous Connect method.
            </summary>
            <param name="localEP">Local IP end point to use for connect.</param>
            <param name="remoteEP">Remote IP end point where to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Client.DisconnectDelegate">
            <summary>
            Internal helper method for asynchronous Disconnect method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TimerEx">
            <summary>
            Simple timer implementation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TimerEx.#ctor">
            <summary>
            Default contructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TimerEx.#ctor(System.Double)">
            <summary>
            Default contructor.
            </summary>
            <param name="interval">The time in milliseconds between events.</param>
        </member>
        <member name="M:LumiSoft.Net.TimerEx.#ctor(System.Double,System.Boolean)">
            <summary>
            Default contructor.
            </summary>
            <param name="interval">The time in milliseconds between events.</param>
            <param name="autoReset">Specifies if timer is auto reseted.</param>
        </member>
        <member name="T:LumiSoft.Net.UDP.UDP_PacketEventArgs">
            <summary>
            This class provides data for <b>UdpServer.PacketReceived</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_PacketEventArgs.#ctor(LumiSoft.Net.UDP.UDP_Server,System.Net.Sockets.Socket,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Default constructor.
            </summary>
            <param name="server">UDP server which received packet.</param>
            <param name="socket">Socket which received packet.</param>
            <param name="remoteEP">Remote end point which sent data.</param>
            <param name="data">UDP data.</param>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_PacketEventArgs.SendReply(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends reply to received packet. This method uses same local end point to send packet which
            received packet, this ensures right NAT traversal.
            </summary>
            <param name="data">Data buffer.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_PacketEventArgs.UdpServer">
            <summary>
            Gets UDP server which received packet.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_PacketEventArgs.LocalEndPoint">
            <summary>
            Gets local end point what recieved packet.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_PacketEventArgs.RemoteEndPoint">
            <summary>
            Gets remote end point what sent data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_PacketEventArgs.Data">
            <summary>
            Gets UDP packet data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_PacketEventArgs.Socket">
            <summary>
            Gets socket which received packet.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.UDP.UDP_ProcessMode">
            <summary>
            This enum specified UDP server packets process mode.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UDP.UDP_ProcessMode.Sequential">
            <summary>
            UDP packets processed one by one in their receive order.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UDP.UDP_ProcessMode.Parallel">
            <summary>
            UDP packets proecesses parallel.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.UDP.PacketReceivedHandler">
            <summary>
            Represents the method that will handle the <b>UdpServer.PacketReceived</b> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="T:LumiSoft.Net.UDP.UDP_Server">
            <summary>
            This class implements generic UDP server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.Start">
            <summary>
            Starts UDP server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.Stop">
            <summary>
            Stops UDP server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.Restart">
            <summary>
            Restarts running server. If server is not running, this methods has no efffect.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.SendPacket(System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint)">
            <summary>
            Sends specified UDP packet to the specified remote end point.
            </summary>
            <param name="packet">UDP packet to send.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to send.</param>
            <param name="remoteEP">Remote end point.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when any of the arumnets is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.SendPacket(System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint,System.Net.IPEndPoint@)">
            <summary>
            Sends specified UDP packet to the specified remote end point.
            </summary>
            <param name="packet">UDP packet to send.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to send.</param>
            <param name="remoteEP">Remote end point.</param>
            <param name="localEP">Returns local IP end point which was used to send UDP packet.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when any of the arumnets is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.SendPacket(System.Net.IPEndPoint,System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint)">
            <summary>
            Sends specified UDP packet to the specified remote end point.
            </summary>
            <param name="localEP">Local end point to use for sending.</param>
            <param name="packet">UDP packet to send.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to send.</param>
            <param name="remoteEP">Remote end point.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when any of the arumnets is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.SendPacket(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint,System.Net.IPEndPoint@)">
            <summary>
            Sends specified UDP packet to the specified remote end point.
            </summary>
            <param name="socket">UDP socket to use for data sending.</param>
            <param name="packet">UDP packet to send.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to send.</param>
            <param name="remoteEP">Remote end point.</param>
            <param name="localEP">Returns local IP end point which was used to send UDP packet.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when any of the arumnets is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.GetLocalEndPoint(System.Net.IPEndPoint)">
            <summary>
            Gets suitable local IP end point for the specified remote endpoint.
            If there are multiple sending local end points, they will be load-balanched with round-robin.
            </summary>
            <param name="remoteEP">Remote end point.</param>
            <returns>Returns local IP end point.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when argument <b>remoteEP</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when argument <b>remoteEP</b> has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when no suitable IPv4 or IPv6 socket for <b>remoteEP</b>.</exception>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.ProcessIncomingUdp">
            <summary>
            Processes incoming UDP data and queues it for processing.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.ProcessQueuedPackets">
            <summary>
            This method processes queued UDP packets.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.ProcessPacketOnTrPool(System.Object)">
            <summary>
            Processes UDP packet on thread pool thread.
            </summary>
            <param name="state">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.OnUdpPacketReceived(LumiSoft.Net.UDP.UDP_Server.UdpPacket)">
            <summary>
            Raises PacketReceived event.
            </summary>
            <param name="packet">UDP packet.</param>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.OnError(System.Exception)">
            <summary>
            Raises Error event.
            </summary>
            <param name="x">Exception occured.</param>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.IsRunning">
            <summary>
            Gets if UDP server is running.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.ProcessMode">
            <summary>
            Gets or sets UDP packets process mode.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when server is running and this property value is tried to set.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.MTU">
            <summary>
            Gets or sets maximum network transmission unit.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when server is running and this property value is tried to set.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.MaxQueueSize">
            <summary>
            Gets maximum UDP packets to queue.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.Bindings">
            <summary>
            Gets or sets IP end point where UDP server is binded.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.StartTime">
            <summary>
            Gets time when server was started.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.BytesReceived">
            <summary>
            Gets how many bytes this UDP server has received since start.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.PacketsReceived">
            <summary>
            Gets how many UDP packets this UDP server has received since start.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.BytesSent">
            <summary>
            Gets how many bytes this UDP server has sent since start.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.PacketsSent">
            <summary>
            Gets how many UDP packets this UDP server has sent since start.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.UDP.UDP_Server.PacketReceived">
            <summary>
            This event is raised when new UDP packet received.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.UDP.UDP_Server.Error">
            <summary>
            This event is raised when unexpected error happens.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.UDP.UDP_Server.UdpPacket">
            <summary>
            This class represents UDP packet.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.UdpPacket.#ctor(System.Net.Sockets.Socket,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Default constructor.
            </summary>
            <param name="socket">Socket which received packet.</param>
            <param name="remoteEP">Remote end point from where packet was received.</param>
            <param name="data">UDP packet data.</param>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.UdpPacket.Socket">
            <summary>
            Gets socket which received packet.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.UdpPacket.RemoteEndPoint">
            <summary>
            Gets remote end point from where packet was received.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.UdpPacket.Data">
            <summary>
            Gets UDP packet data.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AbsoluteUri">
            <summary>
            Implements absolute-URI. Defined in RFC 3986.4.3.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AbsoluteUri.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AbsoluteUri.Parse(System.String)">
            <summary>
            Parse URI from string value.
            </summary>
            <param name="value">String URI value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when <b>value</b> has invalid URI value.</exception>
        </member>
        <member name="M:LumiSoft.Net.AbsoluteUri.ParseInternal(System.String)">
            <summary>
            Parses URI from the specified string.
            </summary>
            <param name="value">URI string.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.AbsoluteUri.ToString">
            <summary>
            Converts URI to string.
            </summary>
            <returns>Returns URI as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.AbsoluteUri.Scheme">
            <summary>
            Gets URI scheme.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AbsoluteUri.Value">
            <summary>
            Gets URI value after scheme.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.DataSizeExceededException">
            <summary>
            The exception that is thrown when maximum allowed data size has exceeded.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.DataSizeExceededException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.IncompleteDataException">
            <summary>
            The exception that is thrown when incomplete data received.
            For example for ReadPeriodTerminated() method reaches end of stream before getting period terminator.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.IncompleteDataException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.IncompleteDataException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="T:LumiSoft.Net.IO.LineSizeExceededException">
            <summary>
            The exception that is thrown when maximum allowed line size has exceeded.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.LineSizeExceededException.#ctor">
            <summary>
            Default coonstructor.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.BitDebuger">
            <summary>
            This class provides bit debugging methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.BitDebuger.ToBit(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts byte array to bit(1 byte = 8 bit) representation.
            </summary>
            <param name="buffer">Data buffer.</param>
            <param name="count">Numer of bytes to convert.</param>
            <param name="bytesPerLine">Number of bytes per line.</param>
            <returns>Returns byte array as bit(1 byte = 8 bit) representation.</returns>
        </member>
        <member name="T:LumiSoft.Net.IO.SizeExceededAction">
            <summary>
            Specifies action what is done if requested action exceeds maximum allowed size.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IO.SizeExceededAction.ThrowException">
            <summary>
            Throws exception at once when maximum size exceeded.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IO.SizeExceededAction.JunkAndThrowException">
            <summary>
            Junks all data what exceeds maximum allowed size and after requested operation completes,
            throws exception.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.JunkingStream">
            <summary>
            This stream just junks all written data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.JunkingStream.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.JunkingStream.Flush">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.JunkingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of the stream to the given value. This method always throws a NotSupportedException.
            </summary>
            <param name="offset">This parameter is not used.</param>
            <param name="origin">This parameter is not used.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IO.JunkingStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream. This method always throws a NotSupportedException.
            </summary>
            <param name="value">This parameter is not used.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.JunkingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream. This method always throws a NotSupportedException.
            </summary>
            <param name="buffer">This parameter is not used.</param>
            <param name="offset">This parameter is not used.</param>
            <param name="size">This parameter is not used.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IO.JunkingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the stream.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to write to the stream.</param>
            <param name="offset">The location in buffer from which to start writing data.</param>
            <param name="size">The number of bytes to write to the stream.</param>
        </member>
        <member name="P:LumiSoft.Net.IO.JunkingStream.CanRead">
            <summary>
            Gets a value indicating whether the stream supports reading. This property always returns false.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.JunkingStream.CanSeek">
            <summary>
            Gets a value indicating whether the stream supports seeking. This property always returns false.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.JunkingStream.CanWrite">
            <summary>
            Gets a value that indicates whether the stream supports writing.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.JunkingStream.Length">
            <summary>
            Gets the length of the data available on the stream. This property always throws a NotSupportedException.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.JunkingStream.Position">
            <summary>
            Gets or sets the current position in the stream. This property always throws a NotSupportedException.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Log.LogEntry">
            <summary>
            Implements log entry.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log.LogEntry.#ctor(LumiSoft.Net.Log.LogEntryType,System.String,System.Int64,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="type">Log entry type.</param>
            <param name="id">Log entry ID.</param>
            <param name="size">Specified how much data was readed or written.</param>
            <param name="text">Description text.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.LogEntry.#ctor(LumiSoft.Net.Log.LogEntryType,System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Default constructor.
            </summary>
            <param name="type">Log entry type.</param>
            <param name="id">Log entry ID.</param>
            <param name="userIdentity">Log entry owner user or null if none.</param>
            <param name="size">Log entry read/write size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="localEP">Local IP end point.</param>
            <param name="remoteEP">Remote IP end point.</param>
            <param name="data">Log data.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.LogEntry.#ctor(LumiSoft.Net.Log.LogEntryType,System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Exception)">
            <summary>
            Default constructor.
            </summary>
            <param name="type">Log entry type.</param>
            <param name="id">Log entry ID.</param>
            <param name="userIdentity">Log entry owner user or null if none.</param>
            <param name="size">Log entry read/write size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="localEP">Local IP end point.</param>
            <param name="remoteEP">Remote IP end point.</param>
            <param name="exception">Exception happened. Can be null.</param>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.EntryType">
            <summary>
            Gets log entry type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.ID">
            <summary>
            Gets log entry ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.Time">
            <summary>
            Gets time when log entry was created.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.UserIdentity">
            <summary>
            Gets log entry related user identity.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.Size">
            <summary>
            Gets how much data was readed or written, depends on <b>LogEntryType</b>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.Text">
            <summary>
            Gets describing text.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.Exception">
            <summary>
            Gets exception happened. This property is available only if LogEntryType.Exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.LocalEndPoint">
            <summary>
            Gets local IP end point. Value null means no local end point.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.RemoteEndPoint">
            <summary>
            Gets remote IP end point. Value null means no remote end point.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.Data">
            <summary>
            Gest log data. Value null means no log data.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Log.LogEntryType">
            <summary>
            Specifies log entry type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Log.LogEntryType.Read">
            <summary>
            Read entry.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Log.LogEntryType.Write">
            <summary>
            Write entry.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Log.LogEntryType.Text">
            <summary>
            Text entry.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Log.LogEntryType.Exception">
            <summary>
            Exception entry.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Log.Logger">
            <summary>
            General logging module.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddRead(System.Int64,System.String)">
            <summary>
            Adds read log entry.
            </summary>
            <param name="size">Readed data size in bytes.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddRead(System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Adds read log entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="size">Readed data size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddRead(System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Adds read log entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="size">Readed data size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
            <param name="data">Log data.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddWrite(System.Int64,System.String)">
            <summary>
            Add write log entry.
            </summary>
            <param name="size">Written data size in bytes.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddWrite(System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Add write log entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="size">Written data size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddWrite(System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Add write log entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="size">Written data size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
            <param name="data">Log data.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddText(System.String)">
            <summary>
            Adds text entry.
            </summary>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddText(System.String,System.String)">
            <summary>
            Adds text entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddText(System.String,System.Security.Principal.GenericIdentity,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Adds text entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddException(System.String,System.Security.Principal.GenericIdentity,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Exception)">
            <summary>
            Adds exception entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
            <param name="exception">Exception happened.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.OnWriteLog(LumiSoft.Net.Log.LogEntry)">
            <summary>
            Raises WriteLog event.
            </summary>
            <param name="entry">Log entry.</param>
        </member>
        <member name="E:LumiSoft.Net.Log.Logger.WriteLog">
            <summary>
            Is raised when new log entry is available.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Client.POP3_Client">
            <summary>
            POP3 Client. Defined in RFC 1939.
            </summary>
            <example>
            <code>
            
            /*
             To make this code to work, you need to import following namespaces:
             using LumiSoft.Net.Mime;
             using LumiSoft.Net.POP3.Client; 
             */
            
            using(POP3_Client c = new POP3_Client()){
            	c.Connect("ivx",WellKnownPorts.POP3);
            	c.Authenticate("test","test",true);
            			
            	// Get first message if there is any
            	if(c.Messages.Count > 0){
            		// Do your suff
            		
            		// Parse message
            		Mime m = Mime.Parse(c.Messages[0].MessageToByte());
            		string from = m.MainEntity.From;
            		string subject = m.MainEntity.Subject;			
            		// ... 
            	}		
            }
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.Disconnect">
            <summary>
            Closes connection to POP3 server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.BeginStartTLS(System.AsyncCallback,System.Object)">
            <summary>
            Starts switching to SSL.
            </summary>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected or is authenticated or is already secure connection.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.EndStartTLS(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous StartTLS request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.StartTLS">
            <summary>
            Switches POP3 connection to SSL.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected or is authenticated or is already secure connection.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.BeginAuthenticate(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts authentication.
            </summary>
            <param name="userName">User login name.</param>
            <param name="password">Password.</param>
            <param name="tryApop"> If true and POP3 server supports APOP, then APOP is used, otherwise normal login used.</param>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected or is already authenticated.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.EndAuthenticate(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous authentication request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.Authenticate(System.String,System.String,System.Boolean)">
            <summary>
            Authenticates user.
            </summary>
            <param name="userName">User login name.</param>
            <param name="password">Password.</param>
            <param name="tryApop"> If true and POP3 server supports APOP, then APOP is used, otherwise normal login used.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected or is already authenticated.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.BeginNoop(System.AsyncCallback,System.Object)">
            <summary>
            Starts sending NOOP command to server. This method can be used for keeping connection alive(not timing out).
            </summary>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.EndNoop(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous Noop request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.Noop">
            <summary>
            Send NOOP command to server. This method can be used for keeping connection alive(not timing out).
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.BeginReset(System.AsyncCallback,System.Object)">
            <summary>
            Starts resetting session. Messages marked for deletion will be unmarked.
            </summary>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected and authenticated.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.EndReset(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous reset request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.Reset">
            <summary>
            Resets session. Messages marked for deletion will be unmarked.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected and authenticated.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.OnConnected">
            <summary>
            This method is called after TCP client has sucessfully connected.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.MarkMessageForDeletion(System.Int32)">
            <summary>
            Marks specified message for deletion.
            </summary>
            <param name="sequenceNumber">Message sequence number.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.GetMessage(System.Int32,System.IO.Stream)">
            <summary>
            Stores specified message to the specified stream.
            </summary>
            <param name="sequenceNumber">Message 1 based sequence number.</param>
            <param name="stream">Stream where to store message.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.GetTopOfMessage(System.Int32,System.IO.Stream,System.Int32)">
            <summary>
            Stores specified message header + specified lines of body to the specified stream.
            </summary>
            <param name="sequenceNumber">Message 1 based sequence number.</param>
            <param name="stream">Stream where to store data.</param>
            <param name="lineCount">Number of lines of message body to get.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.FillMessages">
            <summary>
            Fills messages info.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_Client.GreetingText">
            <summary>
            Gets greeting text which was sent by POP3 server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and POP3 client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_Client.ExtenededCapabilities">
            <summary>
            Gets POP3 exteneded capabilities supported by POP3 server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and POP3 client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_Client.ExtendedCapabilities">
            <summary>
            Gets POP3 exteneded capabilities supported by POP3 server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and POP3 client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_Client.IsUidlSupported">
            <summary>
            Gets if POP3 server supports UIDL command.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and 
            POP3 client is not connected and authenticated.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_Client.Messages">
            <summary>
            Gets messages collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and 
            POP3 client is not connected and authenticated.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_Client.AuthenticatedUserIdentity">
            <summary>
            Gets session authenticated user identity, returns null if not authenticated.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and POP3 client is not connected.</exception>
        </member>
        <member name="T:LumiSoft.Net.POP3.Client.POP3_Client.StartTLSDelegate">
            <summary>
            Internal helper method for asynchronous StartTLS method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Client.POP3_Client.AuthenticateDelegate">
            <summary>
            Internal helper method for asynchronous Authenticate method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Client.POP3_Client.NoopDelegate">
            <summary>
            Internal helper method for asynchronous Noop method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Client.POP3_Client.ResetDelegate">
            <summary>
            Internal helper method for asynchronous Reset method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.WellKnownPorts">
            <summary>
            This class provides well known TCP/UDP service ports.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.FTP_Data">
            <summary>
            FTP - data port.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.FTP_Control">
            <summary>
            FTP - control (command) port.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.SMTP">
            <summary>
            SMTP protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.DNS">
            <summary>
            DNS protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.HTTP">
            <summary>
            HTTP protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.POP3">
            <summary>
            POP3 protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.NNTP">
            <summary>
            NNTP (Network News Transfer Protocol)  protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.NTP">
            <summary>
            NTP (Network Time Protocol) protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.IMAP4">
            <summary>
            IMAP4 protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.HTTPS">
            <summary>
            HTTPS protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.SMTP_SSL">
            <summary>
            SMTP over SSL protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.FTP_Control_SSL">
            <summary>
            FTP over SSL protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.IMAP4_SSL">
            <summary>
            IMAP4 over SSL protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.POP3_SSL">
            <summary>
            POP3 over SSL protocol.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.UriSchemes">
            <summary>
            This class represents well known URI schemes.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.dav">
            <summary>
            HTTP Extensions for Distributed Authoring (WebDAV).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.file">
            <summary>
            Addressing files on local or network file systems.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.ftp">
            <summary>
            FTP resources.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.http">
            <summary>
            HTTP resources.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.https">
            <summary>
            HTTP connections secured using SSL/TLS.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.mailto">
            <summary>
            SMTP e-mail addresses and default content.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.sip">
            <summary>
            Session Initiation Protocol (SIP).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.sips">
            <summary>
            Session Initiation Protocol (SIP) using TLS.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.tel">
            <summary>
            Telephone numbers.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AsyncResultState">
            <summary>
            (For internal use only). This class provides holder for IAsyncResult interface and extends it's features.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AsyncResultState.#ctor(System.Object,System.Delegate,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="asyncObject">Caller's async object.</param>
            <param name="asyncDelegate">Delegate which is called asynchronously.</param>
            <param name="callback">Callback to call when the connect operation is complete.</param>
            <param name="state">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.AsyncResultState.SetAsyncResult(System.IAsyncResult)">
            <summary>
            Sets AsyncResult value.
            </summary>
            <param name="asyncResult">Asycnhronous result to wrap.</param>
        </member>
        <member name="M:LumiSoft.Net.AsyncResultState.CompletedCallback(System.IAsyncResult)">
            <summary>
            This method is called by AsyncDelegate when asynchronous operation completes. 
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.AsyncObject">
            <summary>
            Gets or sets caller's async object.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.AsyncDelegate">
            <summary>
            Gets delegate which is called asynchronously.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.AsyncResult">
            <summary>
            Gets source asynchronous result what we wrap.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.IsEndCalled">
            <summary>
            Gets if the user called the End*() method.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IPBindInfo">
            <summary>
            Holds IP bind info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IPBindInfo.#ctor(System.String,LumiSoft.Net.BindInfoProtocol,System.Net.IPAddress,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="hostName">Host name.</param>
            <param name="protocol">Bind protocol.</param>
            <param name="ip">IP address to listen.</param>
            <param name="port">Port to listen.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IPBindInfo.#ctor(System.String,System.Net.IPAddress,System.Int32,LumiSoft.Net.SslMode,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Default constructor.
            </summary>
            <param name="hostName">Host name.</param>
            <param name="ip">IP address to listen.</param>
            <param name="port">Port to listen.</param>
            <param name="sslMode">Specifies SSL mode.</param>
            <param name="sslCertificate">Certificate to use for SSL connections.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IPBindInfo.#ctor(System.String,LumiSoft.Net.BindInfoProtocol,System.Net.IPAddress,System.Int32,LumiSoft.Net.SslMode,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Default constructor.
            </summary>
            <param name="hostName">Host name.</param>
            <param name="protocol">Bind protocol.</param>
            <param name="ip">IP address to listen.</param>
            <param name="port">Port to listen.</param>
            <param name="sslMode">Specifies SSL mode.</param>
            <param name="sslCertificate">Certificate to use for SSL connections.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IPBindInfo.Equals(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>Returns true if two objects are equal.</returns>
        </member>
        <member name="M:LumiSoft.Net.IPBindInfo.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
            <returns>Returns the hash code.</returns>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.HostName">
            <summary>
            Gets host name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.Protocol">
            <summary>
            Gets protocol.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.EndPoint">
            <summary>
            Gets IP end point.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.IP">
            <summary>
            Gets IP address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.Port">
            <summary>
            Gets port.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.SslMode">
            <summary>
            Gets SSL mode.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.SSL_Certificate">
            <summary>
            Gets SSL certificate.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.Certificate">
            <summary>
            Gets SSL certificate.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.Tag">
            <summary>
            Gets or sets user data. This is used internally don't use it !!!.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.CircleCollection`1">
            <summary>
            Circle collection. Elements will be circled clockwise.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.Add(`0[])">
            <summary>
            Adds specified items to the collection.
            </summary>
            <param name="items">Items to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>items</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.Add(`0)">
            <summary>
            Adds specified item to the collection.
            </summary>
            <param name="item">Item to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>item</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.Remove(`0)">
            <summary>
            Removes specified item from the collection.
            </summary>
            <param name="item">Item to remove.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>item</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.Clear">
            <summary>
            Clears all items from collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.Contains(`0)">
            <summary>
            Gets if the collection contain the specified item.
            </summary>
            <param name="item">Item to check.</param>
            <returns>Returns true if the collection contain the specified item, otherwise false.</returns>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.Next">
            <summary>
            Gets next item from the collection. This method is thread-safe.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is raised when thre is no items in the collection.</exception>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.ToArray">
            <summary>
            Copies all elements to new array, all elements will be in order they added. This method is thread-safe.
            </summary>
            <returns>Returns elements in a new array.</returns>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.ToCurrentOrderArray">
            <summary>
            Copies all elements to new array, all elements will be in current circle order. This method is thread-safe.
            </summary>
            <returns>Returns elements in a new array.</returns>
        </member>
        <member name="P:LumiSoft.Net.CircleCollection`1.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.CircleCollection`1.Item(System.Int32)">
            <summary>
            Gets item at the specified index.
            </summary>
            <param name="index">Item zero based index.</param>
            <returns>Returns item at the specified index.</returns>
        </member>
        <member name="T:LumiSoft.Net.BindInfoProtocol">
            <summary>
            Specifies BindInfo protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.BindInfoProtocol.TCP">
            <summary>
            TCP protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.BindInfoProtocol.UDP">
            <summary>
            UDP protocol.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.StringReader">
            <summary>
            String reader.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.StringReader.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="source">Source string.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>source</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.StringReader.AppenString(System.String)">
            <summary>
            Appends specified string to SourceString.
            </summary>
            <param name="str">String value to append.</param>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadToFirstChar">
            <summary>
            Reads to first char, skips white-space(SP,VTAB,HTAB,CR,LF) from the beginning of source string.
            </summary>
            <returns>Returns white-space chars which was readed.</returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadSpecifiedLength(System.Int32)">
            <summary>
            Reads string with specified length. Throws exception if read length is bigger than source string length.
            </summary>
            <param name="length">Number of chars to read.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.QuotedReadToDelimiter(System.Char)">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiter in quoted string is skipped.
            Delimiter is removed by default.
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiter">Data delimiter.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.QuotedReadToDelimiter(System.Char[])">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiters in quoted string is skipped.
            Delimiter is removed by default.
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiters">Data delimiters.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.QuotedReadToDelimiter(System.Char[],System.Boolean)">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiters in quoted string is skipped. 
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiters">Data delimiters.</param>
            <param name="removeDelimiter">Specifies if delimiter is removed from underlying string.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadWord">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadWord(System.Boolean)">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <param name="unQuote">Specifies if quoted string word is unquoted.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadWord(System.Boolean,System.Char[],System.Boolean)">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <param name="unQuote">Specifies if quoted string word is unquoted.</param>
            <param name="wordTerminatorChars">Specifies chars what terminate word.</param>
            <param name="removeWordTerminator">Specifies if work terminator is removed.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadParenthesized">
            <summary>
            Reads parenthesized value. Supports {},(),[],&lt;&gt; parenthesis. 
            Throws exception if there isn't parenthesized value or closing parenthesize is missing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadToEnd">
            <summary>
            Reads all remaining string, returns null if no chars left to read.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.StartsWith(System.String)">
            <summary>
            Gets if source string starts with specified value. Compare is case-sensitive.
            </summary>
            <param name="value">Start string value.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.StartsWith(System.String,System.Boolean)">
            <summary>
            Gets if source string starts with specified value.
            </summary>
            <param name="value">Start string value.</param>
            <param name="case_sensitive">Specifies if compare is case-sensitive.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.StartsWithWord">
            <summary>
            Gets if current source string starts with word. For example if source string starts with
            whiter space or parenthesize, this method returns false.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.StringReader.Available">
            <summary>
            Gets how many chars are available for reading.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.StringReader.OriginalString">
            <summary>
            Gets original string passed to class constructor.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.StringReader.SourceString">
            <summary>
            Gets currently remaining string.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.StringReader.Position">
            <summary>
            Gets position in original string.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TextUtils">
            <summary>
            This class provides usefull text methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.QuoteString(System.String)">
            <summary>
            Qoutes and escapes fishy(\") chars.
            </summary>
            <param name="text">Text to quote.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.UnQuoteString(System.String)">
            <summary>
            Unquotes and unescapes escaped chars specified text. For example "xxx" will become to 'xxx', "escaped quote \"", will become to escaped 'quote "'.
            </summary>
            <param name="text">Text to unquote.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.EscapeString(System.String,System.Char[])">
            <summary>
            Escapes specified chars in the specified string.
            </summary>
            <param name="text">Text to escape.</param>
            <param name="charsToEscape">Chars to escape.</param>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.UnEscapeString(System.String)">
            <summary>
            Unescapes all escaped chars.
            </summary>
            <param name="text">Text to unescape.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.SplitQuotedString(System.String,System.Char)">
            <summary>
            Splits string into string arrays. This split method won't split qouted strings, but only text outside of qouted string.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.SplitQuotedString(System.String,System.Char,System.Boolean)">
            <summary>
            Splits string into string arrays. This split method won't split qouted strings, but only text outside of qouted string.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <param name="unquote">If true, splitted parst will be unqouted if they are qouted.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.QuotedIndexOf(System.String,System.Char)">
            <summary>
            Gets first index of specified char. The specified char in quoted string is skipped.
            Returns -1 if specified char doesn't exist.
            </summary>
            <param name="text">Text in what to check.</param>
            <param name="indexChar">Char what index to get.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.SplitString(System.String,System.Char)">
            <summary>
            Splits string into string arrays.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char Char that splits text.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.IsToken(System.String)">
            <summary>
            Gets if specified string is valid "token" value.
            </summary>
            <param name="value">String value to check.</param>
            <returns>Returns true if specified string value is valid "token" value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised if <b>value</b> is null.</exception>
        </member>
    </members>
</doc>
